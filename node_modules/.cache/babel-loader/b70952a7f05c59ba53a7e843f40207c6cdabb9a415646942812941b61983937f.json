{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOperation = void 0;\nconst operation_1 = require(\"./operation\");\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst sort_1 = require(\"../sort\");\nconst shared_1 = require(\"../cmap/wire_protocol/shared\");\nconst read_concern_1 = require(\"../read_concern\");\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n  constructor(collection, ns, filter = {}, options = {}) {\n    super(collection, options);\n    this.options = options;\n    this.ns = ns;\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new error_1.MongoDriverError('Query filter must be a plain object or ObjectId');\n    }\n    // If the filter is a buffer, validate that is a valid BSON document\n    if (Buffer.isBuffer(filter)) {\n      const objectSize = filter[0] | filter[1] << 8 | filter[2] << 16 | filter[3] << 24;\n      if (objectSize !== filter.length) {\n        throw new error_1.MongoDriverError(`query filter raw message size does not match message header size [${filter.length}] != [${objectSize}]`);\n      }\n    }\n    // special case passing in an ObjectId as a filter\n    this.filter = filter != null && filter._bsontype === 'ObjectID' ? {\n      _id: filter\n    } : filter;\n  }\n  execute(server, session, callback) {\n    this.server = server;\n    const serverWireVersion = utils_1.maxWireVersion(server);\n    const options = this.options;\n    if (typeof options.allowDiskUse !== 'undefined' && serverWireVersion < 4) {\n      callback(new error_1.MongoDriverError('The `allowDiskUse` option is not supported on MongoDB < 3.2'));\n      return;\n    }\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(new error_1.MongoDriverError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n      return;\n    }\n    if (serverWireVersion < 4) {\n      if (this.readConcern && this.readConcern.level !== 'local') {\n        callback(new error_1.MongoDriverError(`server find command does not support a readConcern level of ${this.readConcern.level}`));\n        return;\n      }\n      const findCommand = makeLegacyFindCommand(this.ns, this.filter, options);\n      if (shared_1.isSharded(server) && this.readPreference) {\n        findCommand.$readPreference = this.readPreference.toJSON();\n      }\n      server.query(this.ns, findCommand, {\n        ...this.options,\n        ...this.bsonOptions,\n        documentsReturnedIn: 'firstBatch',\n        readPreference: this.readPreference\n      }, callback);\n      return;\n    }\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n    if (this.explain) {\n      findCommand = utils_1.decorateWithExplain(findCommand, this.explain);\n    }\n    server.command(this.ns, findCommand, {\n      fullResult: !!this.fullResponse,\n      ...this.options,\n      ...this.bsonOptions,\n      documentsReturnedIn: 'firstBatch',\n      session\n    }, callback);\n  }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n  const findCommand = {\n    find: ns.collection,\n    filter\n  };\n  if (options.sort) {\n    findCommand.sort = sort_1.formatSort(options.sort);\n  }\n  if (options.projection) {\n    let projection = options.projection;\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length ? projection.reduce((result, field) => {\n        result[field] = 1;\n        return result;\n      }, {}) : {\n        _id: 1\n      };\n    }\n    findCommand.projection = projection;\n  }\n  if (options.hint) {\n    findCommand.hint = utils_1.normalizeHintField(options.hint);\n  }\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (options.limit && options.limit !== 0 && Math.abs(options.batchSize) < Math.abs(options.limit)) {\n        findCommand.limit = -options.batchSize;\n      }\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  }\n  if (options.comment) {\n    findCommand.comment = options.comment;\n  }\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n  const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n  return findCommand;\n}\nfunction makeLegacyFindCommand(ns, filter, options) {\n  const findCommand = {\n    $query: filter\n  };\n  if (options.sort) {\n    findCommand.$orderby = sort_1.formatSort(options.sort);\n  }\n  if (options.hint) {\n    findCommand.$hint = utils_1.normalizeHintField(options.hint);\n  }\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.$returnKey = options.returnKey;\n  }\n  if (options.max) {\n    findCommand.$max = options.max;\n  }\n  if (options.min) {\n    findCommand.$min = options.min;\n  }\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.$showDiskLoc = options.showRecordId;\n  }\n  if (options.comment) {\n    findCommand.$comment = options.comment;\n  }\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.$maxTimeMS = options.maxTimeMS;\n  }\n  if (typeof options.explain !== 'undefined') {\n    findCommand.$explain = true;\n  }\n  return findCommand;\n}\noperation_1.defineAspects(FindOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"names":["operation_1","require","utils_1","error_1","command_1","sort_1","shared_1","read_concern_1","SUPPORTS_WRITE_CONCERN_AND_COLLATION","FindOperation","CommandOperation","constructor","collection","ns","filter","options","Array","isArray","MongoDriverError","Buffer","isBuffer","objectSize","length","_bsontype","_id","execute","server","session","callback","serverWireVersion","maxWireVersion","allowDiskUse","collation","name","readConcern","level","findCommand","makeLegacyFindCommand","isSharded","readPreference","$readPreference","toJSON","query","bsonOptions","documentsReturnedIn","makeFindCommand","explain","decorateWithExplain","command","fullResult","fullResponse","exports","find","sort","formatSort","projection","reduce","result","field","hint","normalizeHintField","skip","limit","singleBatch","batchSize","Math","abs","comment","maxTimeMS","ReadConcern","fromOptions","max","min","returnKey","showRecordId","tailable","timeout","noCursorTimeout","awaitData","allowPartialResults","let","$query","$orderby","$hint","$returnKey","$max","$min","$showDiskLoc","$comment","$maxTimeMS","$explain","defineAspects","Aspect","READ_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\find.ts"],"sourcesContent":["import { Aspect, defineAspects, Hint } from './operation';\nimport {\n  maxWireVersion,\n  MongoDBNamespace,\n  Callback,\n  normalizeHintField,\n  decorateWithExplain\n} from '../utils';\nimport { MongoDriverError } from '../error';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Collection } from '../collection';\nimport { CommandOperation, CommandOperationOptions, CollationOptions } from './command';\nimport { Sort, formatSort } from '../sort';\nimport { isSharded } from '../cmap/wire_protocol/shared';\nimport { ReadConcern } from '../read_concern';\nimport type { ClientSession } from '../sessions';\nimport type { Projection } from '../mongo_types';\n\n/** @public */\nexport interface FindOptions<TSchema = Document> extends CommandOperationOptions {\n  /** Sets the limit of documents returned in the query. */\n  limit?: number;\n  /** Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]` etc. */\n  sort?: Sort;\n  /** The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` **or** `{'a': 0, 'b': 0}` */\n  projection?: Projection<TSchema>;\n  /** Set to skip N documents ahead in your query (useful for pagination). */\n  skip?: number;\n  /** Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}` */\n  hint?: Hint;\n  /** Specify if the cursor can timeout. */\n  timeout?: boolean;\n  /** Specify if the cursor is tailable. */\n  tailable?: boolean;\n  /** Specify if the cursor is a a tailable-await cursor. Requires `tailable` to be true */\n  awaitData?: boolean;\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n  batchSize?: number;\n  /** If true, returns only the index keys in the resulting documents. */\n  returnKey?: boolean;\n  /** The inclusive lower bound for a specific index */\n  min?: Document;\n  /** The exclusive upper bound for a specific index */\n  max?: Document;\n  /** You can put a $comment field on a query to make looking in the profiler logs simpler. */\n  comment?: string | Document;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true */\n  maxAwaitTimeMS?: number;\n  /** The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that. */\n  noCursorTimeout?: boolean;\n  /** Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields). */\n  collation?: CollationOptions;\n  /** Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher) */\n  allowDiskUse?: boolean;\n  /** Determines whether to close the cursor after the first batch. Defaults to false. */\n  singleBatch?: boolean;\n  /** For queries against a sharded collection, allows the command (or subsequent getMore commands) to return partial results, rather than an error, if one or more queried shards are unavailable. */\n  allowPartialResults?: boolean;\n  /** Determines whether to return the record identifier for each document. If true, adds a field $recordId to the returned documents. */\n  showRecordId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n\n/** @internal */\nexport class FindOperation extends CommandOperation<Document> {\n  options: FindOptions;\n  filter: Document;\n\n  constructor(\n    collection: Collection | undefined,\n    ns: MongoDBNamespace,\n    filter: Document = {},\n    options: FindOptions = {}\n  ) {\n    super(collection, options);\n\n    this.options = options;\n    this.ns = ns;\n\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new MongoDriverError('Query filter must be a plain object or ObjectId');\n    }\n\n    // If the filter is a buffer, validate that is a valid BSON document\n    if (Buffer.isBuffer(filter)) {\n      const objectSize = filter[0] | (filter[1] << 8) | (filter[2] << 16) | (filter[3] << 24);\n      if (objectSize !== filter.length) {\n        throw new MongoDriverError(\n          `query filter raw message size does not match message header size [${filter.length}] != [${objectSize}]`\n        );\n      }\n    }\n\n    // special case passing in an ObjectId as a filter\n    this.filter = filter != null && filter._bsontype === 'ObjectID' ? { _id: filter } : filter;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Document>): void {\n    this.server = server;\n\n    const serverWireVersion = maxWireVersion(server);\n    const options = this.options;\n    if (typeof options.allowDiskUse !== 'undefined' && serverWireVersion < 4) {\n      callback(new MongoDriverError('The `allowDiskUse` option is not supported on MongoDB < 3.2'));\n      return;\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(\n        new MongoDriverError(\n          `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\n        )\n      );\n\n      return;\n    }\n\n    if (serverWireVersion < 4) {\n      if (this.readConcern && this.readConcern.level !== 'local') {\n        callback(\n          new MongoDriverError(\n            `server find command does not support a readConcern level of ${this.readConcern.level}`\n          )\n        );\n\n        return;\n      }\n\n      const findCommand = makeLegacyFindCommand(this.ns, this.filter, options);\n      if (isSharded(server) && this.readPreference) {\n        findCommand.$readPreference = this.readPreference.toJSON();\n      }\n\n      server.query(\n        this.ns,\n        findCommand,\n        {\n          ...this.options,\n          ...this.bsonOptions,\n          documentsReturnedIn: 'firstBatch',\n          readPreference: this.readPreference\n        },\n        callback\n      );\n\n      return;\n    }\n\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n    if (this.explain) {\n      findCommand = decorateWithExplain(findCommand, this.explain);\n    }\n\n    server.command(\n      this.ns,\n      findCommand,\n      {\n        fullResult: !!this.fullResponse,\n        ...this.options,\n        ...this.bsonOptions,\n        documentsReturnedIn: 'firstBatch',\n        session\n      },\n      callback\n    );\n  }\n}\n\nfunction makeFindCommand(ns: MongoDBNamespace, filter: Document, options: FindOptions): Document {\n  const findCommand: Document = {\n    find: ns.collection,\n    filter\n  };\n\n  if (options.sort) {\n    findCommand.sort = formatSort(options.sort);\n  }\n\n  if (options.projection) {\n    let projection = options.projection;\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length\n        ? projection.reduce((result, field) => {\n            result[field] = 1;\n            return result;\n          }, {})\n        : { _id: 1 };\n    }\n\n    findCommand.projection = projection;\n  }\n\n  if (options.hint) {\n    findCommand.hint = normalizeHintField(options.hint);\n  }\n\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (\n        options.limit &&\n        options.limit !== 0 &&\n        Math.abs(options.batchSize) < Math.abs(options.limit)\n      ) {\n        findCommand.limit = -options.batchSize;\n      }\n\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  }\n\n  if (options.comment) {\n    findCommand.comment = options.comment;\n  }\n\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n\n  const readConcern = ReadConcern.fromOptions(options);\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n\n  return findCommand;\n}\n\nfunction makeLegacyFindCommand(\n  ns: MongoDBNamespace,\n  filter: Document,\n  options: FindOptions\n): Document {\n  const findCommand: Document = {\n    $query: filter\n  };\n\n  if (options.sort) {\n    findCommand.$orderby = formatSort(options.sort);\n  }\n\n  if (options.hint) {\n    findCommand.$hint = normalizeHintField(options.hint);\n  }\n\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.$returnKey = options.returnKey;\n  }\n\n  if (options.max) {\n    findCommand.$max = options.max;\n  }\n\n  if (options.min) {\n    findCommand.$min = options.min;\n  }\n\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.$showDiskLoc = options.showRecordId;\n  }\n\n  if (options.comment) {\n    findCommand.$comment = options.comment;\n  }\n\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.$maxTimeMS = options.maxTimeMS;\n  }\n\n  if (typeof options.explain !== 'undefined') {\n    findCommand.$explain = true;\n  }\n\n  return findCommand;\n}\n\ndefineAspects(FindOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXPLAINABLE]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}