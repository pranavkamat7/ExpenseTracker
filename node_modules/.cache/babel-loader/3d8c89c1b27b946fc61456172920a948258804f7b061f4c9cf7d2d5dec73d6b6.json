{"ast":null,"code":"\"use strict\";\n\n// Resolves the default auth mechanism according to\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = void 0;\nconst error_1 = require(\"../../error\");\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.includes(defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256 : defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (ismaster.maxWireVersion >= 3) {\n      return defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n  // Default for wireprotocol < 3\n  return defaultAuthProviders_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n  constructor(options) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n      if (!this.mechanismProperties.AWS_SESSION_TOKEN && process.env.AWS_SESSION_TOKEN) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param ismaster - An ismaster response from the server\n   */\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n    return this;\n  }\n  validate() {\n    if ((this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_CR || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoDriverError(`Username required for mechanism '${this.mechanism}'`);\n    }\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n      if (this.source != null && this.source !== '$external') {\n        throw new error_1.MongoDriverError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n      }\n    }\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      throw new error_1.MongoDriverError('PLAIN Authentication Mechanism needs an auth source');\n    }\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      throw new error_1.MongoDriverError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n  }\n  static merge(creds, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    return new MongoCredentials({\n      username: (_b = (_a = options.username) !== null && _a !== void 0 ? _a : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _b !== void 0 ? _b : '',\n      password: (_d = (_c = options.password) !== null && _c !== void 0 ? _c : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _d !== void 0 ? _d : '',\n      mechanism: (_f = (_e = options.mechanism) !== null && _e !== void 0 ? _e : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _f !== void 0 ? _f : defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: (_h = (_g = options.mechanismProperties) !== null && _g !== void 0 ? _g : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _h !== void 0 ? _h : {},\n      source: (_l = (_k = (_j = options.source) !== null && _j !== void 0 ? _j : options.db) !== null && _k !== void 0 ? _k : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _l !== void 0 ? _l : 'admin'\n    });\n  }\n}\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"names":["error_1","require","defaultAuthProviders_1","getDefaultAuthMechanism","ismaster","Array","isArray","saslSupportedMechs","includes","AuthMechanism","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","maxWireVersion","MONGODB_CR","MongoCredentials","constructor","options","username","password","source","db","mechanism","MONGODB_DEFAULT","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","Object","freeze","equals","other","resolveAuthMechanism","validate","MONGODB_GSSAPI","MONGODB_PLAIN","MongoDriverError","MONGODB_AWS","MONGODB_X509","Reflect","set","undefined","merge","creds","_b","_a","_d","_c","_f","_e","_h","_g","_l","_k","_j","exports"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\cmap\\auth\\mongo_credentials.ts"],"sourcesContent":["// Resolves the default auth mechanism according to\n\nimport type { Document } from '../../bson';\nimport { MongoDriverError } from '../../error';\nimport { AuthMechanism } from './defaultAuthProviders';\n\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(ismaster?: Document): AuthMechanism {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.includes(AuthMechanism.MONGODB_SCRAM_SHA256)\n        ? AuthMechanism.MONGODB_SCRAM_SHA256\n        : AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (ismaster.maxWireVersion >= 3) {\n      return AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return AuthMechanism.MONGODB_CR;\n}\n\n/** @public */\nexport interface MongoCredentialsOptions {\n  username: string;\n  password: string;\n  source: string;\n  db?: string;\n  mechanism?: AuthMechanism;\n  mechanismProperties: Document;\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nexport class MongoCredentials {\n  /** The username used for authentication */\n  readonly username: string;\n  /** The password used for authentication */\n  readonly password: string;\n  /** The database that the user should authenticate against */\n  readonly source: string;\n  /** The method used to authenticate */\n  readonly mechanism: AuthMechanism;\n  /** Special properties used by some types of auth mechanisms */\n  readonly mechanismProperties: Document;\n\n  constructor(options: MongoCredentialsOptions) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (!this.mechanismProperties.AWS_SESSION_TOKEN && process.env.AWS_SESSION_TOKEN) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other: MongoCredentials): boolean {\n    return (\n      this.mechanism === other.mechanism &&\n      this.username === other.username &&\n      this.password === other.password &&\n      this.source === other.source\n    );\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param ismaster - An ismaster response from the server\n   */\n  resolveAuthMechanism(ismaster?: Document): MongoCredentials {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate(): void {\n    if (\n      (this.mechanism === AuthMechanism.MONGODB_GSSAPI ||\n        this.mechanism === AuthMechanism.MONGODB_CR ||\n        this.mechanism === AuthMechanism.MONGODB_PLAIN ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA1 ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA256) &&\n      !this.username\n    ) {\n      throw new MongoDriverError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (\n      this.mechanism === AuthMechanism.MONGODB_GSSAPI ||\n      this.mechanism === AuthMechanism.MONGODB_AWS ||\n      this.mechanism === AuthMechanism.MONGODB_X509\n    ) {\n      if (this.source != null && this.source !== '$external') {\n        throw new MongoDriverError(\n          `Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`\n        );\n      }\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      throw new MongoDriverError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      throw new MongoDriverError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n  }\n\n  static merge(\n    creds: MongoCredentials | undefined,\n    options: Partial<MongoCredentialsOptions>\n  ): MongoCredentials {\n    return new MongoCredentials({\n      username: options.username ?? creds?.username ?? '',\n      password: options.password ?? creds?.password ?? '',\n      mechanism: options.mechanism ?? creds?.mechanism ?? AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}