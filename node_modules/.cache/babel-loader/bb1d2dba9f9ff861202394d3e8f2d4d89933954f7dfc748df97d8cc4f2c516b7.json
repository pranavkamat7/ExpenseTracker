{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst utils_1 = require(\"../utils\");\nconst sort_1 = require(\"../sort\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(topology, namespace, filter, options = {}) {\n    super(topology, namespace, options);\n    this[kFilter] = filter || {};\n    this[kBuiltOptions] = options;\n    if (typeof options.sort !== 'undefined') {\n      this[kBuiltOptions].sort = sort_1.formatSort(options.sort);\n    }\n  }\n  clone() {\n    const clonedOptions = utils_1.mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.topology, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n  _initialize(session, callback) {\n    const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    execute_operation_1.executeOperation(this.topology, findOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n      // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      }\n      // TODO: NODE-2882\n      callback(undefined, {\n        server: findOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** @internal */\n  _getMore(batchSize, callback) {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n      if (batchSize <= 0) {\n        return this.close(callback);\n      }\n    }\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err);\n      // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n      callback(undefined, response);\n    });\n  }\n  count(options, callback) {\n    if (typeof options === 'boolean') {\n      throw new error_1.MongoDriverError('Invalid first parameter to count');\n    }\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return execute_operation_1.executeOperation(this.topology, new count_1.CountOperation(this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      ...options\n    }), callback);\n  }\n  explain(verbosity, callback) {\n    if (typeof verbosity === 'function') callback = verbosity, verbosity = true;\n    if (verbosity === undefined) verbosity = true;\n    return execute_operation_1.executeOperation(this.topology, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      explain: verbosity\n    }), callback);\n  }\n  /** Set the cursor query */\n  filter(filter) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name, value) {\n    abstract_cursor_1.assertUninitialized(this);\n    if (name[0] !== '$') {\n      throw new error_1.MongoDriverError(`${name} is not a valid query modifier`);\n    }\n    // Strip of the $\n    const field = name.substr(1);\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n      case 'orderby':\n        this[kBuiltOptions].sort = sort_1.formatSort(value);\n        break;\n      case 'query':\n        this[kFilter] = value;\n        break;\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n      default:\n        throw new error_1.MongoDriverError(`invalid query modifier: ${name}`);\n    }\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoDriverError('maxAwaitTimeMS must be a number');\n    }\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoDriverError('maxTimeMS must be a number');\n    }\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  project(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort, direction) {\n    abstract_cursor_1.assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoDriverError('Tailable cursor does not support sorting');\n    }\n    this[kBuiltOptions].sort = sort_1.formatSort(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse() {\n    abstract_cursor_1.assertUninitialized(this);\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoDriverError('allowDiskUse requires a sort specification');\n    }\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoDriverError('Tailable cursor does not support limit');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoDriverError('limit requires an integer');\n    }\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoDriverError('Tailable cursor does not support skip');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoDriverError('skip requires an integer');\n    }\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\nexports.FindCursor = FindCursor;","map":{"version":3,"names":["error_1","require","count_1","execute_operation_1","find_1","utils_1","sort_1","abstract_cursor_1","kFilter","Symbol","kNumReturned","kBuiltOptions","exports","FLAGS","FindCursor","AbstractCursor","constructor","topology","namespace","filter","options","sort","formatSort","clone","clonedOptions","mergeOptions","session","map","transform","_initialize","callback","findOperation","FindOperation","undefined","cursorOptions","executeOperation","err","response","cursor","firstBatch","length","documents","server","_getMore","batchSize","numReturned","limit","close","nextBatch","count","MongoDriverError","CountOperation","explain","verbosity","assertUninitialized","hint","min","max","returnKey","value","showRecordId","addQueryModifier","name","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","allowDiskUse","collation","skip"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\cursor\\find_cursor.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { MongoDriverError } from '../error';\nimport type { ExplainVerbosityLike } from '../explain';\nimport { CountOperation, CountOptions } from '../operations/count';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport { FindOperation, FindOptions } from '../operations/find';\nimport { mergeOptions } from '../utils';\nimport type { Hint } from '../operations/operation';\nimport type { CollationOptions } from '../operations/command';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, Sort, SortDirection } from '../sort';\nimport type { Callback, MongoDBNamespace } from '../utils';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\nimport type { Projection } from '../mongo_types';\n\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n\n/** @public Flags allowed for cursor */\nexport const FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public */\nexport class FindCursor<TSchema = Document> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kFilter]: Document;\n  /** @internal */\n  [kNumReturned]?: number;\n  /** @internal */\n  [kBuiltOptions]: FindOptions;\n\n  /** @internal */\n  constructor(\n    topology: Topology,\n    namespace: MongoDBNamespace,\n    filter: Document | undefined,\n    options: FindOptions = {}\n  ) {\n    super(topology, namespace, options);\n\n    this[kFilter] = filter || {};\n    this[kBuiltOptions] = options;\n\n    if (typeof options.sort !== 'undefined') {\n      this[kBuiltOptions].sort = formatSort(options.sort);\n    }\n  }\n\n  clone(): FindCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.topology, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n\n  map<T>(transform: (doc: TSchema) => T): FindCursor<T> {\n    return super.map(transform) as FindCursor<T>;\n  }\n\n  /** @internal */\n  _initialize(session: ClientSession | undefined, callback: Callback<ExecutionResult>): void {\n    const findOperation = new FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n      ...this.cursorOptions,\n      session\n    });\n\n    executeOperation(this.topology, findOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n\n      // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      }\n\n      // TODO: NODE-2882\n      callback(undefined, { server: findOperation.server, session, response });\n    });\n  }\n\n  /** @internal */\n  _getMore(batchSize: number, callback: Callback<Document>): void {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize =\n        limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        return this.close(callback);\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err);\n\n      // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n\n  /** Get the count of documents for this cursor */\n  count(): Promise<number>;\n  count(callback: Callback<number>): void;\n  count(options: CountOptions): Promise<number>;\n  count(options: CountOptions, callback: Callback<number>): void;\n  count(\n    options?: CountOptions | Callback<number>,\n    callback?: Callback<number>\n  ): Promise<number> | void {\n    if (typeof options === 'boolean') {\n      throw new MongoDriverError('Invalid first parameter to count');\n    }\n\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      this.topology,\n      new CountOperation(this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        ...options\n      }),\n      callback\n    );\n  }\n\n  /** Execute the explain for the cursor */\n  explain(): Promise<Document>;\n  explain(callback: Callback): void;\n  explain(verbosity?: ExplainVerbosityLike): Promise<Document>;\n  explain(\n    verbosity?: ExplainVerbosityLike | Callback,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof verbosity === 'function') (callback = verbosity), (verbosity = true);\n    if (verbosity === undefined) verbosity = true;\n\n    return executeOperation(\n      this.topology,\n      new FindOperation(undefined, this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity\n      }),\n      callback\n    );\n  }\n\n  /** Set the cursor query */\n  filter(filter: Document): this {\n    assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint: Hint): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name: string, value: string | boolean | number | Document): this {\n    assertUninitialized(this);\n    if (name[0] !== '$') {\n      throw new MongoDriverError(`${name} is not a valid query modifier`);\n    }\n\n    // Strip of the $\n    const field = name.substr(1);\n\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value as string | Document;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value as boolean;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value as string | Document;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value as Document;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value as number;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value as Document;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = formatSort(value as string | Document);\n        break;\n\n      case 'query':\n        this[kFilter] = value as Document;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value as boolean;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value as boolean;\n        break;\n\n      default:\n        throw new MongoDriverError(`invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value: string): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoDriverError('maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoDriverError('maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * **NOTE:** adding a projection changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable. Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   * ```\n   */\n  project<T = TSchema>(value: Projection<T>): FindCursor<T>;\n  project(value: Projection<TSchema>): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort: Sort | string, direction?: SortDirection): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoDriverError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = formatSort(sort, direction);\n    return this;\n  }\n\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse(): this {\n    assertUninitialized(this);\n    if (!this[kBuiltOptions].sort) {\n      throw new MongoDriverError('allowDiskUse requires a sort specification');\n    }\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value: CollationOptions): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoDriverError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoDriverError('limit requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoDriverError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoDriverError('skip requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}