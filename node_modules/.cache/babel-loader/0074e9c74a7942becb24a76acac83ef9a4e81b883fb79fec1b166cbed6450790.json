{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst bson_1 = require(\"../bson\");\nconst WRITABLE_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.Standalone, common_1.ServerType.Mongos]);\nconst DATA_BEARING_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.RSSecondary, common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @internal\n   *\n   * @param address - The address of the server\n   * @param ismaster - An optional ismaster response for this server\n   */\n  constructor(address, ismaster, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    if (typeof address === 'string') {\n      this._hostAddress = new utils_1.HostAddress(address);\n      this.address = this._hostAddress.toString();\n    } else {\n      this._hostAddress = address;\n      this.address = this._hostAddress.toString();\n    }\n    this.type = parseServerType(ismaster);\n    this.hosts = (_b = (_a = ismaster === null || ismaster === void 0 ? void 0 : ismaster.hosts) === null || _a === void 0 ? void 0 : _a.map(host => host.toLowerCase())) !== null && _b !== void 0 ? _b : [];\n    this.passives = (_d = (_c = ismaster === null || ismaster === void 0 ? void 0 : ismaster.passives) === null || _c === void 0 ? void 0 : _c.map(host => host.toLowerCase())) !== null && _d !== void 0 ? _d : [];\n    this.arbiters = (_f = (_e = ismaster === null || ismaster === void 0 ? void 0 : ismaster.arbiters) === null || _e === void 0 ? void 0 : _e.map(host => host.toLowerCase())) !== null && _f !== void 0 ? _f : [];\n    this.tags = (_g = ismaster === null || ismaster === void 0 ? void 0 : ismaster.tags) !== null && _g !== void 0 ? _g : {};\n    this.minWireVersion = (_h = ismaster === null || ismaster === void 0 ? void 0 : ismaster.minWireVersion) !== null && _h !== void 0 ? _h : 0;\n    this.maxWireVersion = (_j = ismaster === null || ismaster === void 0 ? void 0 : ismaster.maxWireVersion) !== null && _j !== void 0 ? _j : 0;\n    this.roundTripTime = (_k = options === null || options === void 0 ? void 0 : options.roundTripTime) !== null && _k !== void 0 ? _k : -1;\n    this.lastUpdateTime = utils_1.now();\n    this.lastWriteDate = (_m = (_l = ismaster === null || ismaster === void 0 ? void 0 : ismaster.lastWrite) === null || _l === void 0 ? void 0 : _l.lastWriteDate) !== null && _m !== void 0 ? _m : 0;\n    if (options === null || options === void 0 ? void 0 : options.topologyVersion) {\n      this.topologyVersion = options.topologyVersion;\n    } else if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.topologyVersion) {\n      this.topologyVersion = ismaster.topologyVersion;\n    }\n    if (options === null || options === void 0 ? void 0 : options.error) {\n      this.error = options.error;\n    }\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.primary) {\n      this.primary = ismaster.primary;\n    }\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.me) {\n      this.me = ismaster.me.toLowerCase();\n    }\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.setName) {\n      this.setName = ismaster.setName;\n    }\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.setVersion) {\n      this.setVersion = ismaster.setVersion;\n    }\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.electionId) {\n      this.electionId = ismaster.electionId;\n    }\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.logicalSessionTimeoutMinutes) {\n      this.logicalSessionTimeoutMinutes = ismaster.logicalSessionTimeoutMinutes;\n    }\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.$clusterTime) {\n      this.$clusterTime = ismaster.$clusterTime;\n    }\n  }\n  get hostAddress() {\n    if (this._hostAddress) return this._hostAddress;else return new utils_1.HostAddress(this.address);\n  }\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /** Is this server available for reads*/\n  get isReadable() {\n    return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n  }\n  /** Is this server data bearing */\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /** Is this server available for writes */\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   */\n  equals(other) {\n    const topologyVersionsEqual = this.topologyVersion === other.topologyVersion || compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n    const electionIdsEqual = this.electionId && other.electionId ? other.electionId && this.electionId.equals(other.electionId) : this.electionId === other.electionId;\n    return other != null && utils_1.errorStrictEqual(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && utils_1.arrayStrictEqual(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n}\nexports.ServerDescription = ServerDescription;\n// Parses an `ismaster` message and determines the server type\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return common_1.ServerType.Unknown;\n  }\n  if (ismaster.isreplicaset) {\n    return common_1.ServerType.RSGhost;\n  }\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return common_1.ServerType.Mongos;\n  }\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return common_1.ServerType.RSOther;\n    } else if (ismaster.ismaster || ismaster.isWritablePrimary) {\n      return common_1.ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return common_1.ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return common_1.ServerType.RSArbiter;\n    } else {\n      return common_1.ServerType.RSOther;\n    }\n  }\n  return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n  return tagsKeys.length === tags2Keys.length && tagsKeys.every(key => tags2[key] === tags[key]);\n}\n/**\n * Compares two topology versions.\n *\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\nfunction compareTopologyVersion(lhs, rhs) {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n  if (lhs.processId.equals(rhs.processId)) {\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    const lhsCounter = bson_1.Long.isLong(lhs.counter) ? lhs.counter : bson_1.Long.fromNumber(lhs.counter);\n    const rhsCounter = bson_1.Long.isLong(rhs.counter) ? lhs.counter : bson_1.Long.fromNumber(rhs.counter);\n    return lhsCounter.compare(rhsCounter);\n  }\n  return -1;\n}\nexports.compareTopologyVersion = compareTopologyVersion;","map":{"version":3,"names":["utils_1","require","common_1","bson_1","WRITABLE_SERVER_TYPES","Set","ServerType","RSPrimary","Standalone","Mongos","DATA_BEARING_SERVER_TYPES","RSSecondary","ServerDescription","constructor","address","ismaster","options","_hostAddress","HostAddress","toString","type","parseServerType","hosts","_b","_a","map","host","toLowerCase","passives","_d","_c","arbiters","_f","_e","tags","_g","minWireVersion","_h","maxWireVersion","_j","roundTripTime","_k","lastUpdateTime","now","lastWriteDate","_m","_l","lastWrite","topologyVersion","error","primary","me","setName","setVersion","electionId","logicalSessionTimeoutMinutes","$clusterTime","hostAddress","allHosts","concat","isReadable","isWritable","isDataBearing","has","chopLength","port","length","slice","split","pop","Number","parseInt","equals","other","topologyVersionsEqual","compareTopologyVersion","electionIdsEqual","errorStrictEqual","arrayStrictEqual","tagsStrictEqual","exports","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","isWritablePrimary","secondary","arbiterOnly","RSArbiter","tags2","tagsKeys","Object","keys","tags2Keys","every","key","lhs","rhs","processId","lhsCounter","Long","isLong","counter","fromNumber","rhsCounter","compare"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\sdam\\server_description.ts"],"sourcesContent":["import { arrayStrictEqual, errorStrictEqual, now, HostAddress } from '../utils';\nimport { ServerType } from './common';\nimport { ObjectId, Long, Document } from '../bson';\nimport type { ClusterTime } from './common';\nimport type { MongoError } from '../error';\n\nconst WRITABLE_SERVER_TYPES = new Set<ServerType>([\n  ServerType.RSPrimary,\n  ServerType.Standalone,\n  ServerType.Mongos\n]);\n\nconst DATA_BEARING_SERVER_TYPES = new Set<ServerType>([\n  ServerType.RSPrimary,\n  ServerType.RSSecondary,\n  ServerType.Mongos,\n  ServerType.Standalone\n]);\n\n/** @public */\nexport interface TopologyVersion {\n  processId: ObjectId;\n  counter: Long;\n}\n\n/** @public */\nexport type TagSet = { [key: string]: string };\n\n/** @internal */\nexport interface ServerDescriptionOptions {\n  /** An Error used for better reporting debugging */\n  error?: MongoError;\n\n  /** The round trip time to ping this server (in ms) */\n  roundTripTime?: number;\n\n  /** The topologyVersion */\n  topologyVersion?: TopologyVersion;\n}\n\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nexport class ServerDescription {\n  private _hostAddress: HostAddress;\n  address: string;\n  type: ServerType;\n  hosts: string[];\n  passives: string[];\n  arbiters: string[];\n  tags: TagSet;\n\n  error?: MongoError;\n  topologyVersion?: TopologyVersion;\n  minWireVersion: number;\n  maxWireVersion: number;\n  roundTripTime: number;\n  lastUpdateTime: number;\n  lastWriteDate: number;\n\n  me?: string;\n  primary?: string;\n  setName?: string;\n  setVersion?: number;\n  electionId?: ObjectId;\n  logicalSessionTimeoutMinutes?: number;\n\n  // NOTE: does this belong here? It seems we should gossip the cluster time at the CMAP level\n  $clusterTime?: ClusterTime;\n\n  /**\n   * Create a ServerDescription\n   * @internal\n   *\n   * @param address - The address of the server\n   * @param ismaster - An optional ismaster response for this server\n   */\n  constructor(\n    address: HostAddress | string,\n    ismaster?: Document,\n    options?: ServerDescriptionOptions\n  ) {\n    if (typeof address === 'string') {\n      this._hostAddress = new HostAddress(address);\n      this.address = this._hostAddress.toString();\n    } else {\n      this._hostAddress = address;\n      this.address = this._hostAddress.toString();\n    }\n    this.type = parseServerType(ismaster);\n    this.hosts = ismaster?.hosts?.map((host: string) => host.toLowerCase()) ?? [];\n    this.passives = ismaster?.passives?.map((host: string) => host.toLowerCase()) ?? [];\n    this.arbiters = ismaster?.arbiters?.map((host: string) => host.toLowerCase()) ?? [];\n    this.tags = ismaster?.tags ?? {};\n    this.minWireVersion = ismaster?.minWireVersion ?? 0;\n    this.maxWireVersion = ismaster?.maxWireVersion ?? 0;\n    this.roundTripTime = options?.roundTripTime ?? -1;\n    this.lastUpdateTime = now();\n    this.lastWriteDate = ismaster?.lastWrite?.lastWriteDate ?? 0;\n\n    if (options?.topologyVersion) {\n      this.topologyVersion = options.topologyVersion;\n    } else if (ismaster?.topologyVersion) {\n      this.topologyVersion = ismaster.topologyVersion;\n    }\n\n    if (options?.error) {\n      this.error = options.error;\n    }\n\n    if (ismaster?.primary) {\n      this.primary = ismaster.primary;\n    }\n\n    if (ismaster?.me) {\n      this.me = ismaster.me.toLowerCase();\n    }\n\n    if (ismaster?.setName) {\n      this.setName = ismaster.setName;\n    }\n\n    if (ismaster?.setVersion) {\n      this.setVersion = ismaster.setVersion;\n    }\n\n    if (ismaster?.electionId) {\n      this.electionId = ismaster.electionId;\n    }\n\n    if (ismaster?.logicalSessionTimeoutMinutes) {\n      this.logicalSessionTimeoutMinutes = ismaster.logicalSessionTimeoutMinutes;\n    }\n\n    if (ismaster?.$clusterTime) {\n      this.$clusterTime = ismaster.$clusterTime;\n    }\n  }\n\n  get hostAddress(): HostAddress {\n    if (this._hostAddress) return this._hostAddress;\n    else return new HostAddress(this.address);\n  }\n\n  get allHosts(): string[] {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n\n  /** Is this server available for reads*/\n  get isReadable(): boolean {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n\n  /** Is this server data bearing */\n  get isDataBearing(): boolean {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n\n  /** Is this server available for writes */\n  get isWritable(): boolean {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host(): string {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port(): number {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   */\n  equals(other: ServerDescription): boolean {\n    const topologyVersionsEqual =\n      this.topologyVersion === other.topologyVersion ||\n      compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n\n    const electionIdsEqual: boolean =\n      this.electionId && other.electionId\n        ? other.electionId && this.electionId.equals(other.electionId)\n        : this.electionId === other.electionId;\n\n    return (\n      other != null &&\n      errorStrictEqual(this.error, other.error) &&\n      this.type === other.type &&\n      this.minWireVersion === other.minWireVersion &&\n      arrayStrictEqual(this.hosts, other.hosts) &&\n      tagsStrictEqual(this.tags, other.tags) &&\n      this.setName === other.setName &&\n      this.setVersion === other.setVersion &&\n      electionIdsEqual &&\n      this.primary === other.primary &&\n      this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n      topologyVersionsEqual\n    );\n  }\n}\n\n// Parses an `ismaster` message and determines the server type\nexport function parseServerType(ismaster?: Document): ServerType {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster || ismaster.isWritablePrimary) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n\nfunction tagsStrictEqual(tags: TagSet, tags2: TagSet): boolean {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n\n  return (\n    tagsKeys.length === tags2Keys.length &&\n    tagsKeys.every((key: string) => tags2[key] === tags[key])\n  );\n}\n\n/**\n * Compares two topology versions.\n *\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\nexport function compareTopologyVersion(lhs?: TopologyVersion, rhs?: TopologyVersion): number {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n\n  if (lhs.processId.equals(rhs.processId)) {\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    const lhsCounter = Long.isLong(lhs.counter) ? lhs.counter : Long.fromNumber(lhs.counter);\n    const rhsCounter = Long.isLong(rhs.counter) ? lhs.counter : Long.fromNumber(rhs.counter);\n    return lhsCounter.compare(rhsCounter);\n  }\n\n  return -1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}