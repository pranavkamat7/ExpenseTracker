{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandOperation = void 0;\nconst operation_1 = require(\"./operation\");\nconst read_concern_1 = require(\"../read_concern\");\nconst write_concern_1 = require(\"../write_concern\");\nconst utils_1 = require(\"../utils\");\nconst sessions_1 = require(\"../sessions\");\nconst error_1 = require(\"../error\");\nconst explain_1 = require(\"../explain\");\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n  constructor(parent, options) {\n    super(options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n    const dbNameOverride = (options === null || options === void 0 ? void 0 : options.dbName) || (options === null || options === void 0 ? void 0 : options.authdb);\n    if (dbNameOverride) {\n      this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent ? parent.s.namespace.withCollection('$cmd') : new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    this.fullResponse = options && typeof options.fullResponse === 'boolean' ? options.fullResponse : false;\n    // TODO(NODE-2056): make logger another \"inheritable\" property\n    if (parent && parent.logger) {\n      this.logger = parent.logger;\n    }\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      this.explain = explain_1.Explain.fromOptions(options);\n    } else if ((options === null || options === void 0 ? void 0 : options.explain) !== undefined) {\n      throw new error_1.MongoDriverError(`explain is not supported on this command`);\n    }\n  }\n  get canRetryWrite() {\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      return this.explain === undefined;\n    }\n    return true;\n  }\n  executeCommand(server, session, cmd, callback) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n    const serverWireVersion = utils_1.maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n    if (this.readConcern && sessions_1.commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, {\n        readConcern: this.readConcern\n      });\n    }\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(new error_1.MongoDriverError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n      return;\n    }\n    if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n      Object.assign(cmd, {\n        writeConcern: this.writeConcern\n      });\n    }\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (options.collation && typeof options.collation === 'object' && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n        Object.assign(cmd, {\n          collation: options.collation\n        });\n      }\n    }\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n      if (serverWireVersion < 6 && cmd.aggregate) {\n        // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in \"explain: true\"\n        cmd.explain = true;\n      } else {\n        cmd = utils_1.decorateWithExplain(cmd, this.explain);\n      }\n    }\n    server.command(this.ns, cmd, {\n      fullResult: !!this.fullResponse,\n      ...options\n    }, callback);\n  }\n}\nexports.CommandOperation = CommandOperation;","map":{"version":3,"names":["operation_1","require","read_concern_1","write_concern_1","utils_1","sessions_1","error_1","explain_1","SUPPORTS_WRITE_CONCERN_AND_COLLATION","CommandOperation","AbstractOperation","constructor","parent","options","dbNameOverride","dbName","authdb","ns","MongoDBNamespace","s","namespace","withCollection","readConcern","ReadConcern","fromOptions","writeConcern","WriteConcern","fullResponse","logger","hasAspect","Aspect","EXPLAINABLE","explain","Explain","undefined","MongoDriverError","canRetryWrite","executeCommand","server","session","cmd","callback","bsonOptions","readPreference","serverWireVersion","maxWireVersion","inTransaction","commandSupportsReadConcern","Object","assign","collation","name","WRITE_OPERATION","SKIP_COLLATION","maxTimeMS","comment","aggregate","decorateWithExplain","command","fullResult","exports"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\command.ts"],"sourcesContent":["import { Aspect, AbstractOperation, OperationOptions } from './operation';\nimport { ReadConcern } from '../read_concern';\nimport { WriteConcern, WriteConcernOptions } from '../write_concern';\nimport { maxWireVersion, MongoDBNamespace, Callback, decorateWithExplain } from '../utils';\nimport type { ReadPreference } from '../read_preference';\nimport { ClientSession, commandSupportsReadConcern } from '../sessions';\nimport { MongoDriverError } from '../error';\nimport type { Logger } from '../logger';\nimport type { Server } from '../sdam/server';\nimport type { BSONSerializeOptions, Document } from '../bson';\nimport type { ReadConcernLike } from './../read_concern';\nimport { Explain, ExplainOptions } from '../explain';\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n\n/** @public */\nexport interface CollationOptions {\n  locale: string;\n  caseLevel?: boolean;\n  caseFirst?: string;\n  strength?: number;\n  numericOrdering?: boolean;\n  alternate?: string;\n  maxVariable?: string;\n  backwards?: boolean;\n  normalization?: boolean;\n}\n\n/** @public */\nexport interface CommandOperationOptions\n  extends OperationOptions,\n    WriteConcernOptions,\n    ExplainOptions {\n  /** Return the full server response for the command */\n  fullResponse?: boolean;\n  /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** Collation */\n  collation?: CollationOptions;\n  maxTimeMS?: number;\n  /** A user-provided comment to attach to this command */\n  comment?: string | Document;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n\n  // Admin command overrides.\n  dbName?: string;\n  authdb?: string;\n  noResponse?: boolean;\n}\n\n/** @internal */\nexport interface OperationParent {\n  s: { namespace: MongoDBNamespace };\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  readPreference?: ReadPreference;\n  logger?: Logger;\n  bsonOptions?: BSONSerializeOptions;\n}\n\n/** @internal */\nexport abstract class CommandOperation<T> extends AbstractOperation<T> {\n  options: CommandOperationOptions;\n  ns: MongoDBNamespace;\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  explain?: Explain;\n  fullResponse?: boolean;\n  logger?: Logger;\n\n  constructor(parent?: OperationParent, options?: CommandOperationOptions) {\n    super(options);\n    this.options = options ?? {};\n\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n    const dbNameOverride = options?.dbName || options?.authdb;\n    if (dbNameOverride) {\n      this.ns = new MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent\n        ? parent.s.namespace.withCollection('$cmd')\n        : new MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = ReadConcern.fromOptions(options);\n    this.writeConcern = WriteConcern.fromOptions(options);\n    this.fullResponse =\n      options && typeof options.fullResponse === 'boolean' ? options.fullResponse : false;\n\n    // TODO(NODE-2056): make logger another \"inheritable\" property\n    if (parent && parent.logger) {\n      this.logger = parent.logger;\n    }\n\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      this.explain = Explain.fromOptions(options);\n    } else if (options?.explain !== undefined) {\n      throw new MongoDriverError(`explain is not supported on this command`);\n    }\n  }\n\n  get canRetryWrite(): boolean {\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      return this.explain === undefined;\n    }\n    return true;\n  }\n\n  abstract execute(server: Server, session: ClientSession, callback: Callback<T>): void;\n\n  executeCommand(server: Server, session: ClientSession, cmd: Document, callback: Callback): void {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n\n    const serverWireVersion = maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, { readConcern: this.readConcern });\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(\n        new MongoDriverError(\n          `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\n        )\n      );\n      return;\n    }\n\n    if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION) && !inTransaction) {\n      Object.assign(cmd, { writeConcern: this.writeConcern });\n    }\n\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (\n        options.collation &&\n        typeof options.collation === 'object' &&\n        !this.hasAspect(Aspect.SKIP_COLLATION)\n      ) {\n        Object.assign(cmd, { collation: options.collation });\n      }\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n\n    if (this.hasAspect(Aspect.EXPLAINABLE) && this.explain) {\n      if (serverWireVersion < 6 && cmd.aggregate) {\n        // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in \"explain: true\"\n        cmd.explain = true;\n      } else {\n        cmd = decorateWithExplain(cmd, this.explain);\n      }\n    }\n\n    server.command(this.ns, cmd, { fullResult: !!this.fullResponse, ...options }, callback);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}