{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AutoEncryptionLoggerLevel = exports.aws4 = exports.saslprep = exports.Snappy = exports.Kerberos = void 0;\nconst error_1 = require(\"./error\");\nfunction makeErrorModule(error) {\n  const props = error ? {\n    kModuleError: error\n  } : {};\n  return new Proxy(props, {\n    get: (_, key) => {\n      if (key === 'kModuleError') {\n        return error;\n      }\n      throw error;\n    },\n    set: () => {\n      throw error;\n    }\n  });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoDriverError('Optional module `kerberos` not found. Please install it to enable kerberos authentication'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.Kerberos = require('kerberos');\n} catch {} // eslint-disable-line\nexports.Snappy = makeErrorModule(new error_1.MongoDriverError('Optional module `snappy` not found. Please install it to enable snappy compression'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.Snappy = require('snappy');\n} catch {} // eslint-disable-line\nexports.saslprep = makeErrorModule(new error_1.MongoDriverError('Optional module `saslprep` not found.' + ' Please install it to enable Stringprep Profile for User Names and Passwords'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.saslprep = require('saslprep');\n} catch {} // eslint-disable-line\nexports.aws4 = makeErrorModule(new error_1.MongoDriverError('Optional module `aws4` not found. Please install it to enable AWS authentication'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.aws4 = require('aws4');\n} catch {} // eslint-disable-line\n/** @public */\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n  FatalError: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Trace: 4\n});","map":{"version":3,"names":["error_1","require","makeErrorModule","error","props","kModuleError","Proxy","get","_","key","set","exports","Kerberos","MongoDriverError","Snappy","saslprep","aws4","AutoEncryptionLoggerLevel","Object","freeze","FatalError","Error","Warning","Info","Trace"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\deps.ts"],"sourcesContent":["import { MongoDriverError } from './error';\nimport type { MongoClient } from './mongo_client';\nimport type { deserialize, Document, serialize } from './bson';\nimport type { Callback } from './utils';\n\nfunction makeErrorModule(error: any) {\n  const props = error ? { kModuleError: error } : {};\n  return new Proxy(props, {\n    get: (_: any, key: any) => {\n      if (key === 'kModuleError') {\n        return error;\n      }\n      throw error;\n    },\n    set: () => {\n      throw error;\n    }\n  });\n}\n\nexport let Kerberos:\n  | typeof import('kerberos')\n  | { kModuleError: MongoDriverError } = makeErrorModule(\n  new MongoDriverError(\n    'Optional module `kerberos` not found. Please install it to enable kerberos authentication'\n  )\n);\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  Kerberos = require('kerberos');\n} catch {} // eslint-disable-line\n\nexport interface KerberosClient {\n  step: (challenge: string, callback?: Callback<string>) => Promise<string> | void;\n  wrap: (\n    challenge: string,\n    options?: { user: string },\n    callback?: Callback<string>\n  ) => Promise<string> | void;\n  unwrap: (challenge: string, callback?: Callback<string>) => Promise<string> | void;\n}\n\nexport let Snappy: typeof import('snappy') | { kModuleError: MongoDriverError } = makeErrorModule(\n  new MongoDriverError(\n    'Optional module `snappy` not found. Please install it to enable snappy compression'\n  )\n);\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  Snappy = require('snappy');\n} catch {} // eslint-disable-line\n\nexport let saslprep:\n  | typeof import('saslprep')\n  | { kModuleError: MongoDriverError } = makeErrorModule(\n  new MongoDriverError(\n    'Optional module `saslprep` not found.' +\n      ' Please install it to enable Stringprep Profile for User Names and Passwords'\n  )\n);\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  saslprep = require('saslprep');\n} catch {} // eslint-disable-line\n\nexport let aws4: typeof import('aws4') | { kModuleError: MongoDriverError } = makeErrorModule(\n  new MongoDriverError(\n    'Optional module `aws4` not found. Please install it to enable AWS authentication'\n  )\n);\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  aws4 = require('aws4');\n} catch {} // eslint-disable-line\n\n/** @public */\nexport const AutoEncryptionLoggerLevel = Object.freeze({\n  FatalError: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Trace: 4\n} as const);\n\n/** @public */\nexport type AutoEncryptionLoggerLevel = typeof AutoEncryptionLoggerLevel[keyof typeof AutoEncryptionLoggerLevel];\n\n/** @public */\nexport interface AutoEncryptionOptions {\n  /** @internal */\n  bson?: { serialize: typeof serialize; deserialize: typeof deserialize };\n  /** @internal client for metadata lookups */\n  metadataClient?: MongoClient;\n  /** A `MongoClient` used to fetch keys from a key vault */\n  keyVaultClient?: MongoClient;\n  /** The namespace where keys are stored in the key vault */\n  keyVaultNamespace?: string;\n  /** Configuration options that are used by specific KMS providers during key generation, encryption, and decryption. */\n  kmsProviders?: {\n    /** Configuration options for using 'aws' as your KMS provider */\n    aws?: {\n      /** The access key used for the AWS KMS provider */\n      accessKeyId: string;\n      /** The secret access key used for the AWS KMS provider */\n      secretAccessKey: string;\n      /**\n       * An optional AWS session token that will be used as the\n       * X-Amz-Security-Token header for AWS requests.\n       */\n      sessionToken?: string;\n    };\n    /** Configuration options for using 'local' as your KMS provider */\n    local?: {\n      /**\n       * The master key used to encrypt/decrypt data keys.\n       * A 96-byte long Buffer or base64 encoded string.\n       */\n      key: Buffer | string;\n    };\n    /** Configuration options for using 'azure' as your KMS provider */\n    azure?: {\n      /** The tenant ID identifies the organization for the account */\n      tenantId: string;\n      /** The client ID to authenticate a registered application */\n      clientId: string;\n      /** The client secret to authenticate a registered application */\n      clientSecret: string;\n      /**\n       * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n       * This is optional, and only needed if customer is using a non-commercial Azure instance\n       * (e.g. a government or China account, which use different URLs).\n       * Defaults to \"login.microsoftonline.com\"\n       */\n      identityPlatformEndpoint?: string | undefined;\n    };\n    /** Configuration options for using 'gcp' as your KMS provider */\n    gcp?: {\n      /** The service account email to authenticate */\n      email: string;\n      /** A PKCS#8 encrypted key. This can either be a base64 string or a binary representation */\n      privateKey: string | Buffer;\n      /**\n       * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n       * Defaults to \"oauth2.googleapis.com\"\n       */\n      endpoint?: string | undefined;\n    };\n  };\n  /**\n   * A map of namespaces to a local JSON schema for encryption\n   *\n   * **NOTE**: Supplying options.schemaMap provides more security than relying on JSON Schemas obtained from the server.\n   * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending decrypted data that should be encrypted.\n   * Schemas supplied in the schemaMap only apply to configuring automatic encryption for client side encryption.\n   * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n   */\n  schemaMap?: Document;\n  /** Allows the user to bypass auto encryption, maintaining implicit decryption */\n  bypassAutoEncryption?: boolean;\n  options?: {\n    /** An optional hook to catch logging messages from the underlying encryption engine */\n    logger?: (level: AutoEncryptionLoggerLevel, message: string) => void;\n  };\n  extraOptions?: {\n    /**\n     * A local process the driver communicates with to determine how to encrypt values in a command.\n     * Defaults to \"mongodb://%2Fvar%2Fmongocryptd.sock\" if domain sockets are available or \"mongodb://localhost:27020\" otherwise\n     */\n    mongocryptdURI?: string;\n    /** If true, autoEncryption will not attempt to spawn a mongocryptd before connecting  */\n    mongocryptdBypassSpawn?: boolean;\n    /** The path to the mongocryptd executable on the system */\n    mongocryptdSpawnPath?: string;\n    /** Command line arguments to use when auto-spawning a mongocryptd */\n    mongocryptdSpawnArgs?: string[];\n  };\n}\n\n/** @public */\nexport interface AutoEncrypter {\n  // eslint-disable-next-line @typescript-eslint/no-misused-new\n  new (client: MongoClient, options: AutoEncryptionOptions): AutoEncrypter;\n  init(cb: Callback): void;\n  teardown(force: boolean, callback: Callback): void;\n  encrypt(ns: string, cmd: Document, options: any, callback: Callback<Document>): void;\n  decrypt(cmd: Document, options: any, callback: Callback<Document>): void;\n}\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAKA,SAASC,eAAeA,CAACC,KAAU;EACjC,MAAMC,KAAK,GAAGD,KAAK,GAAG;IAAEE,YAAY,EAAEF;EAAK,CAAE,GAAG,EAAE;EAClD,OAAO,IAAIG,KAAK,CAACF,KAAK,EAAE;IACtBG,GAAG,EAAEA,CAACC,CAAM,EAAEC,GAAQ,KAAI;MACxB,IAAIA,GAAG,KAAK,cAAc,EAAE;QAC1B,OAAON,KAAK;;MAEd,MAAMA,KAAK;IACb,CAAC;IACDO,GAAG,EAAEA,CAAA,KAAK;MACR,MAAMP,KAAK;IACb;GACD,CAAC;AACJ;AAEWQ,OAAA,CAAAC,QAAQ,GAEsBV,eAAe,CACtD,IAAIF,OAAA,CAAAa,gBAAgB,CAClB,2FAA2F,CAC5F,CACF;AAED,IAAI;EACF;EACAF,OAAA,CAAAC,QAAQ,GAAGX,OAAO,CAAC,UAAU,CAAC;CAC/B,CAAC,MAAM,EAAE,CAAC;AAYAU,OAAA,CAAAG,MAAM,GAAiEZ,eAAe,CAC/F,IAAIF,OAAA,CAAAa,gBAAgB,CAClB,oFAAoF,CACrF,CACF;AAED,IAAI;EACF;EACAF,OAAA,CAAAG,MAAM,GAAGb,OAAO,CAAC,QAAQ,CAAC;CAC3B,CAAC,MAAM,EAAE,CAAC;AAEAU,OAAA,CAAAI,QAAQ,GAEsBb,eAAe,CACtD,IAAIF,OAAA,CAAAa,gBAAgB,CAClB,uCAAuC,GACrC,8EAA8E,CACjF,CACF;AAED,IAAI;EACF;EACAF,OAAA,CAAAI,QAAQ,GAAGd,OAAO,CAAC,UAAU,CAAC;CAC/B,CAAC,MAAM,EAAE,CAAC;AAEAU,OAAA,CAAAK,IAAI,GAA+Dd,eAAe,CAC3F,IAAIF,OAAA,CAAAa,gBAAgB,CAClB,kFAAkF,CACnF,CACF;AAED,IAAI;EACF;EACAF,OAAA,CAAAK,IAAI,GAAGf,OAAO,CAAC,MAAM,CAAC;CACvB,CAAC,MAAM,EAAE,CAAC;AAEX;AACaU,OAAA,CAAAM,yBAAyB,GAAGC,MAAM,CAACC,MAAM,CAAC;EACrDC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,CAAC;EACVC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE;CACC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}