{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCR = void 0;\nconst crypto = require(\"crypto\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst utils_1 = require(\"../../utils\");\nconst error_1 = require(\"../../error\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (!credentials) {\n      return callback(new error_1.MongoDriverError('AuthContext must provide credentials.'));\n    }\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command(utils_1.ns(`${source}.$cmd`), {\n      getnonce: 1\n    }, undefined, (err, r) => {\n      let nonce = null;\n      let key = null;\n      // Get nonce\n      if (err == null) {\n        nonce = r.nonce;\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex');\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      connection.command(utils_1.ns(`${source}.$cmd`), authenticateCommand, undefined, callback);\n    });\n  }\n}\nexports.MongoCR = MongoCR;","map":{"version":3,"names":["crypto","require","auth_provider_1","utils_1","error_1","MongoCR","AuthProvider","auth","authContext","callback","connection","credentials","MongoDriverError","username","password","source","command","ns","getnonce","undefined","err","r","nonce","key","md5","createHash","update","hash_password","digest","authenticateCommand","authenticate","user","exports"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\cmap\\auth\\mongocr.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport { AuthProvider, AuthContext } from './auth_provider';\nimport { Callback, ns } from '../../utils';\nimport { MongoDriverError } from '../../error';\n\nexport class MongoCR extends AuthProvider {\n  auth(authContext: AuthContext, callback: Callback): void {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n      return callback(new MongoDriverError('AuthContext must provide credentials.'));\n    }\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command(ns(`${source}.$cmd`), { getnonce: 1 }, undefined, (err, r) => {\n      let nonce = null;\n      let key = null;\n\n      // Get nonce\n      if (err == null) {\n        nonce = r.nonce;\n\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n\n        // Generate keys used for authentication\n        md5.update(username + ':mongo:' + password, 'utf8');\n        const hash_password = md5.digest('hex');\n\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n\n      connection.command(ns(`${source}.$cmd`), authenticateCommand, undefined, callback);\n    });\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,eAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AAEA,MAAaI,OAAQ,SAAQH,eAAA,CAAAI,YAAY;EACvCC,IAAIA,CAACC,WAAwB,EAAEC,QAAkB;IAC/C,MAAM;MAAEC,UAAU;MAAEC;IAAW,CAAE,GAAGH,WAAW;IAC/C,IAAI,CAACG,WAAW,EAAE;MAChB,OAAOF,QAAQ,CAAC,IAAIL,OAAA,CAAAQ,gBAAgB,CAAC,uCAAuC,CAAC,CAAC;;IAEhF,MAAMC,QAAQ,GAAGF,WAAW,CAACE,QAAQ;IACrC,MAAMC,QAAQ,GAAGH,WAAW,CAACG,QAAQ;IACrC,MAAMC,MAAM,GAAGJ,WAAW,CAACI,MAAM;IACjCL,UAAU,CAACM,OAAO,CAACb,OAAA,CAAAc,EAAE,CAAC,GAAGF,MAAM,OAAO,CAAC,EAAE;MAAEG,QAAQ,EAAE;IAAC,CAAE,EAAEC,SAAS,EAAE,CAACC,GAAG,EAAEC,CAAC,KAAI;MAC9E,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,GAAG,GAAG,IAAI;MAEd;MACA,IAAIH,GAAG,IAAI,IAAI,EAAE;QACfE,KAAK,GAAGD,CAAC,CAACC,KAAK;QAEf;QACA,IAAIE,GAAG,GAAGxB,MAAM,CAACyB,UAAU,CAAC,KAAK,CAAC;QAElC;QACAD,GAAG,CAACE,MAAM,CAACb,QAAQ,GAAG,SAAS,GAAGC,QAAQ,EAAE,MAAM,CAAC;QACnD,MAAMa,aAAa,GAAGH,GAAG,CAACI,MAAM,CAAC,KAAK,CAAC;QAEvC;QACAJ,GAAG,GAAGxB,MAAM,CAACyB,UAAU,CAAC,KAAK,CAAC;QAC9BD,GAAG,CAACE,MAAM,CAACJ,KAAK,GAAGT,QAAQ,GAAGc,aAAa,EAAE,MAAM,CAAC;QACpDJ,GAAG,GAAGC,GAAG,CAACI,MAAM,CAAC,KAAK,CAAC;;MAGzB,MAAMC,mBAAmB,GAAG;QAC1BC,YAAY,EAAE,CAAC;QACfC,IAAI,EAAElB,QAAQ;QACdS,KAAK;QACLC;OACD;MAEDb,UAAU,CAACM,OAAO,CAACb,OAAA,CAAAc,EAAE,CAAC,GAAGF,MAAM,OAAO,CAAC,EAAEc,mBAAmB,EAAEV,SAAS,EAAEV,QAAQ,CAAC;IACpF,CAAC,CAAC;EACJ;;AAvCFuB,OAAA,CAAA3B,OAAA,GAAAA,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}