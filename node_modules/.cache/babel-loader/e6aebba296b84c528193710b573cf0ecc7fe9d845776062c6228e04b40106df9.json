{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkWriteOperation = void 0;\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n  constructor(collection, operations, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    };\n    // Create the bulk operation\n    const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options);\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    }\n    // Execute the bulk\n    bulk.execute({\n      ...options,\n      session\n    }, (err, r) => {\n      // We have connection level error\n      if (!r && err) {\n        return callback(err);\n      }\n      // Return the results\n      callback(undefined, r);\n    });\n  }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\noperation_1.defineAspects(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["operation_1","require","BulkWriteOperation","AbstractOperation","constructor","collection","operations","options","execute","server","session","callback","coll","bsonOptions","readPreference","bulk","ordered","initializeUnorderedBulkOp","initializeOrderedBulkOp","i","length","raw","err","r","undefined","exports","defineAspects","Aspect","WRITE_OPERATION"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\bulk_write.ts"],"sourcesContent":["import { Aspect, defineAspects, AbstractOperation } from './operation';\nimport type { Callback } from '../utils';\nimport type { Collection } from '../collection';\nimport type {\n  BulkOperationBase,\n  BulkWriteResult,\n  BulkWriteOptions,\n  AnyBulkWriteOperation\n} from '../bulk/common';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\n\n/** @internal */\nexport class BulkWriteOperation extends AbstractOperation<BulkWriteResult> {\n  options: BulkWriteOptions;\n  collection: Collection;\n  operations: AnyBulkWriteOperation[];\n\n  constructor(\n    collection: Collection,\n    operations: AnyBulkWriteOperation[],\n    options: BulkWriteOptions\n  ) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<BulkWriteResult>): void {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n\n    // Create the bulk operation\n    const bulk: BulkOperationBase =\n      options.ordered === false\n        ? coll.initializeUnorderedBulkOp(options)\n        : coll.initializeOrderedBulkOp(options);\n\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    // Execute the bulk\n    bulk.execute({ ...options, session }, (err, r) => {\n      // We have connection level error\n      if (!r && err) {\n        return callback(err);\n      }\n\n      // Return the results\n      callback(undefined, r);\n    });\n  }\n}\n\ndefineAspects(BulkWriteOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":";;;;;;AAAA,MAAAA,WAAA,GAAAC,OAAA;AAYA;AACA,MAAaC,kBAAmB,SAAQF,WAAA,CAAAG,iBAAkC;EAKxEC,YACEC,UAAsB,EACtBC,UAAmC,EACnCC,OAAyB;IAEzB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAEAE,OAAOA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAAmC;IACjF,MAAMC,IAAI,GAAG,IAAI,CAACP,UAAU;IAC5B,MAAMC,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAMC,OAAO,GAAG;MAAE,GAAG,IAAI,CAACA,OAAO;MAAE,GAAG,IAAI,CAACM,WAAW;MAAEC,cAAc,EAAE,IAAI,CAACA;IAAc,CAAE;IAE7F;IACA,MAAMC,IAAI,GACRR,OAAO,CAACS,OAAO,KAAK,KAAK,GACrBJ,IAAI,CAACK,yBAAyB,CAACV,OAAO,CAAC,GACvCK,IAAI,CAACM,uBAAuB,CAACX,OAAO,CAAC;IAE3C;IACA,IAAI;MACF,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1CJ,IAAI,CAACM,GAAG,CAACf,UAAU,CAACa,CAAC,CAAC,CAAC;;KAE1B,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAOX,QAAQ,CAACW,GAAG,CAAC;;IAGtB;IACAP,IAAI,CAACP,OAAO,CAAC;MAAE,GAAGD,OAAO;MAAEG;IAAO,CAAE,EAAE,CAACY,GAAG,EAAEC,CAAC,KAAI;MAC/C;MACA,IAAI,CAACA,CAAC,IAAID,GAAG,EAAE;QACb,OAAOX,QAAQ,CAACW,GAAG,CAAC;;MAGtB;MACAX,QAAQ,CAACa,SAAS,EAAED,CAAC,CAAC;IACxB,CAAC,CAAC;EACJ;;AA9CFE,OAAA,CAAAvB,kBAAA,GAAAA,kBAAA;AAiDAF,WAAA,CAAA0B,aAAa,CAACxB,kBAAkB,EAAE,CAACF,WAAA,CAAA2B,MAAM,CAACC,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}