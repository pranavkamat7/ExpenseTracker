{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MapReduceOperation = void 0;\nconst bson_1 = require(\"../bson\");\nconst utils_1 = require(\"../utils\");\nconst read_preference_1 = require(\"../read_preference\");\nconst command_1 = require(\"./command\");\nconst error_1 = require(\"../error\");\nconst operation_1 = require(\"./operation\");\nconst db_1 = require(\"../db\");\nconst exclusionList = ['explain', 'readPreference', 'readConcern', 'session', 'bypassDocumentValidation', 'writeConcern', 'raw', 'fieldsAsRaw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bsonRegExp', 'serializeFunctions', 'ignoreUndefined', 'scope' // this option is reformatted thus exclude the original\n];\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n * @internal\n */\nclass MapReduceOperation extends command_1.CommandOperation {\n  /**\n   * Constructs a MapReduce operation.\n   *\n   * @param collection - Collection instance.\n   * @param map - The mapping function.\n   * @param reduce - The reduce function.\n   * @param options - Optional settings. See Collection.prototype.mapReduce for a list of options.\n   */\n  constructor(collection, map, reduce, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collection = collection;\n    this.map = map;\n    this.reduce = reduce;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const map = this.map;\n    const reduce = this.reduce;\n    let options = this.options;\n    const mapCommandHash = {\n      mapReduce: coll.collectionName,\n      map: map,\n      reduce: reduce\n    };\n    if (options.scope) {\n      mapCommandHash.scope = processScope(options.scope);\n    }\n    // Add any other options passed in\n    for (const n in options) {\n      // Only include if not in exclusion list\n      if (exclusionList.indexOf(n) === -1) {\n        mapCommandHash[n] = options[n];\n      }\n    }\n    options = Object.assign({}, options);\n    // If we have a read preference and inline is not set as output fail hard\n    if (this.readPreference.mode === read_preference_1.ReadPreferenceMode.primary && options.out && options.out.inline !== 1 && options.out !== 'inline') {\n      // Force readPreference to primary\n      options.readPreference = read_preference_1.ReadPreference.primary;\n      // Decorate command with writeConcern if supported\n      utils_1.applyWriteConcern(mapCommandHash, {\n        db: coll.s.db,\n        collection: coll\n      }, options);\n    } else {\n      utils_1.decorateWithReadConcern(mapCommandHash, coll, options);\n    }\n    // Is bypassDocumentValidation specified\n    if (options.bypassDocumentValidation === true) {\n      mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    // Have we specified collation\n    try {\n      utils_1.decorateWithCollation(mapCommandHash, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n    if (this.explain && utils_1.maxWireVersion(server) < 9) {\n      callback(new error_1.MongoDriverError(`server ${server.name} does not support explain on mapReduce`));\n      return;\n    }\n    // Execute command\n    super.executeCommand(server, session, mapCommandHash, (err, result) => {\n      if (err) return callback(err);\n      // Check if we have an error\n      if (1 !== result.ok || result.err || result.errmsg) {\n        return callback(new error_1.MongoServerError(result));\n      }\n      // If an explain option was executed, don't process the server results\n      if (this.explain) return callback(undefined, result);\n      // Create statistics value\n      const stats = {};\n      if (result.timeMillis) stats['processtime'] = result.timeMillis;\n      if (result.counts) stats['counts'] = result.counts;\n      if (result.timing) stats['timing'] = result.timing;\n      // invoked with inline?\n      if (result.results) {\n        // If we wish for no verbosity\n        if (options['verbose'] == null || !options['verbose']) {\n          return callback(undefined, result.results);\n        }\n        return callback(undefined, {\n          results: result.results,\n          stats: stats\n        });\n      }\n      // The returned collection\n      let collection = null;\n      // If we have an object it's a different db\n      if (result.result != null && typeof result.result === 'object') {\n        const doc = result.result;\n        // Return a collection from another db\n        collection = new db_1.Db(coll.s.db.s.client, doc.db, coll.s.db.s.options).collection(doc.collection);\n      } else {\n        // Create a collection object that wraps the result collection\n        collection = coll.s.db.collection(result.result);\n      }\n      // If we wish for no verbosity\n      if (options['verbose'] == null || !options['verbose']) {\n        return callback(err, collection);\n      }\n      // Return stats as third set of values\n      callback(err, {\n        collection,\n        stats\n      });\n    });\n  }\n}\nexports.MapReduceOperation = MapReduceOperation;\n/** Functions that are passed as scope args must be converted to Code instances. */\nfunction processScope(scope) {\n  if (!utils_1.isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n  const newScope = {};\n  for (const key of Object.keys(scope)) {\n    if ('function' === typeof scope[key]) {\n      newScope[key] = new bson_1.Code(String(scope[key]));\n    } else if (scope[key]._bsontype === 'Code') {\n      newScope[key] = scope[key];\n    } else {\n      newScope[key] = processScope(scope[key]);\n    }\n  }\n  return newScope;\n}\noperation_1.defineAspects(MapReduceOperation, [operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"names":["bson_1","require","utils_1","read_preference_1","command_1","error_1","operation_1","db_1","exclusionList","MapReduceOperation","CommandOperation","constructor","collection","map","reduce","options","execute","server","session","callback","coll","mapCommandHash","mapReduce","collectionName","scope","processScope","n","indexOf","Object","assign","readPreference","mode","ReadPreferenceMode","primary","out","inline","ReadPreference","applyWriteConcern","db","s","decorateWithReadConcern","bypassDocumentValidation","decorateWithCollation","err","explain","maxWireVersion","MongoDriverError","name","executeCommand","result","ok","errmsg","MongoServerError","undefined","stats","timeMillis","counts","timing","results","doc","Db","client","exports","isObject","_bsontype","newScope","key","keys","Code","String","defineAspects","Aspect","EXPLAINABLE"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\map_reduce.ts"],"sourcesContent":["import { Code, Document } from '../bson';\nimport {\n  applyWriteConcern,\n  decorateWithCollation,\n  decorateWithReadConcern,\n  isObject,\n  Callback,\n  maxWireVersion\n} from '../utils';\nimport { ReadPreference, ReadPreferenceMode } from '../read_preference';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport type { Server } from '../sdam/server';\nimport type { Collection } from '../collection';\nimport type { Sort } from '../sort';\nimport { MongoDriverError, MongoServerError } from '../error';\nimport type { ObjectId } from '../bson';\nimport { Aspect, defineAspects } from './operation';\nimport type { ClientSession } from '../sessions';\nimport { Db } from '../db';\n\nconst exclusionList = [\n  'explain',\n  'readPreference',\n  'readConcern',\n  'session',\n  'bypassDocumentValidation',\n  'writeConcern',\n  'raw',\n  'fieldsAsRaw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bsonRegExp',\n  'serializeFunctions',\n  'ignoreUndefined',\n  'scope' // this option is reformatted thus exclude the original\n];\n\n/** @public */\nexport type MapFunction<TSchema = Document> = (this: TSchema) => void;\n/** @public */\nexport type ReduceFunction<TKey = ObjectId, TValue = any> = (key: TKey, values: TValue[]) => TValue;\n/** @public */\nexport type FinalizeFunction<TKey = ObjectId, TValue = Document> = (\n  key: TKey,\n  reducedValue: TValue\n) => TValue;\n\n/** @public */\nexport interface MapReduceOptions<TKey = ObjectId, TValue = Document>\n  extends CommandOperationOptions {\n  /** Sets the output target for the map reduce job. */\n  out?: 'inline' | { inline: 1 } | { replace: string } | { merge: string } | { reduce: string };\n  /** Query filter object. */\n  query?: Document;\n  /** Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces. */\n  sort?: Sort;\n  /** Number of objects to return from collection. */\n  limit?: number;\n  /** Keep temporary data. */\n  keeptemp?: boolean;\n  /** Finalize function. */\n  finalize?: FinalizeFunction<TKey, TValue> | string;\n  /** Can pass in variables that can be access from map/reduce/finalize. */\n  scope?: Document;\n  /** It is possible to make the execution stay in JS. Provided in MongoDB \\> 2.0.X. */\n  jsMode?: boolean;\n  /** Provide statistics on job execution time. */\n  verbose?: boolean;\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n}\n\ninterface MapReduceStats {\n  processtime?: number;\n  counts?: number;\n  timing?: number;\n}\n\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n * @internal\n */\nexport class MapReduceOperation extends CommandOperation<Document | Document[]> {\n  options: MapReduceOptions;\n  collection: Collection;\n  /** The mapping function. */\n  map: MapFunction | string;\n  /** The reduce function. */\n  reduce: ReduceFunction | string;\n\n  /**\n   * Constructs a MapReduce operation.\n   *\n   * @param collection - Collection instance.\n   * @param map - The mapping function.\n   * @param reduce - The reduce function.\n   * @param options - Optional settings. See Collection.prototype.mapReduce for a list of options.\n   */\n  constructor(\n    collection: Collection,\n    map: MapFunction | string,\n    reduce: ReduceFunction | string,\n    options?: MapReduceOptions\n  ) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.map = map;\n    this.reduce = reduce;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Document | Document[]>): void {\n    const coll = this.collection;\n    const map = this.map;\n    const reduce = this.reduce;\n    let options = this.options;\n\n    const mapCommandHash: Document = {\n      mapReduce: coll.collectionName,\n      map: map,\n      reduce: reduce\n    };\n\n    if (options.scope) {\n      mapCommandHash.scope = processScope(options.scope);\n    }\n\n    // Add any other options passed in\n    for (const n in options) {\n      // Only include if not in exclusion list\n      if (exclusionList.indexOf(n) === -1) {\n        mapCommandHash[n] = (options as any)[n];\n      }\n    }\n\n    options = Object.assign({}, options);\n\n    // If we have a read preference and inline is not set as output fail hard\n    if (\n      this.readPreference.mode === ReadPreferenceMode.primary &&\n      options.out &&\n      (options.out as any).inline !== 1 &&\n      options.out !== 'inline'\n    ) {\n      // Force readPreference to primary\n      options.readPreference = ReadPreference.primary;\n      // Decorate command with writeConcern if supported\n      applyWriteConcern(mapCommandHash, { db: coll.s.db, collection: coll }, options);\n    } else {\n      decorateWithReadConcern(mapCommandHash, coll, options);\n    }\n\n    // Is bypassDocumentValidation specified\n    if (options.bypassDocumentValidation === true) {\n      mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(mapCommandHash, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (this.explain && maxWireVersion(server) < 9) {\n      callback(new MongoDriverError(`server ${server.name} does not support explain on mapReduce`));\n      return;\n    }\n\n    // Execute command\n    super.executeCommand(server, session, mapCommandHash, (err, result) => {\n      if (err) return callback(err);\n      // Check if we have an error\n      if (1 !== result.ok || result.err || result.errmsg) {\n        return callback(new MongoServerError(result));\n      }\n\n      // If an explain option was executed, don't process the server results\n      if (this.explain) return callback(undefined, result);\n\n      // Create statistics value\n      const stats: MapReduceStats = {};\n      if (result.timeMillis) stats['processtime'] = result.timeMillis;\n      if (result.counts) stats['counts'] = result.counts;\n      if (result.timing) stats['timing'] = result.timing;\n\n      // invoked with inline?\n      if (result.results) {\n        // If we wish for no verbosity\n        if (options['verbose'] == null || !options['verbose']) {\n          return callback(undefined, result.results);\n        }\n\n        return callback(undefined, { results: result.results, stats: stats });\n      }\n\n      // The returned collection\n      let collection = null;\n\n      // If we have an object it's a different db\n      if (result.result != null && typeof result.result === 'object') {\n        const doc = result.result;\n        // Return a collection from another db\n        collection = new Db(coll.s.db.s.client, doc.db, coll.s.db.s.options).collection(\n          doc.collection\n        );\n      } else {\n        // Create a collection object that wraps the result collection\n        collection = coll.s.db.collection(result.result);\n      }\n\n      // If we wish for no verbosity\n      if (options['verbose'] == null || !options['verbose']) {\n        return callback(err, collection);\n      }\n\n      // Return stats as third set of values\n      callback(err, { collection, stats });\n    });\n  }\n}\n\n/** Functions that are passed as scope args must be converted to Code instances. */\nfunction processScope(scope: Document | ObjectId) {\n  if (!isObject(scope) || (scope as any)._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  const newScope: Document = {};\n\n  for (const key of Object.keys(scope)) {\n    if ('function' === typeof (scope as Document)[key]) {\n      newScope[key] = new Code(String((scope as Document)[key]));\n    } else if ((scope as Document)[key]._bsontype === 'Code') {\n      newScope[key] = (scope as Document)[key];\n    } else {\n      newScope[key] = processScope((scope as Document)[key]);\n    }\n  }\n\n  return newScope;\n}\n\ndefineAspects(MapReduceOperation, [Aspect.EXPLAINABLE]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}