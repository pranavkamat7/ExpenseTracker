{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionsOperation = void 0;\nconst operation_1 = require(\"./operation\");\nconst error_1 = require(\"../error\");\n/** @internal */\nclass OptionsOperation extends operation_1.AbstractOperation {\n  constructor(collection, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    coll.s.db.listCollections({\n      name: coll.collectionName\n    }, {\n      ...this.options,\n      nameOnly: false,\n      readPreference: this.readPreference,\n      session\n    }).toArray((err, collections) => {\n      if (err || !collections) return callback(err);\n      if (collections.length === 0) {\n        return callback(new error_1.MongoDriverError(`collection ${coll.namespace} not found`));\n      }\n      callback(err, collections[0].options);\n    });\n  }\n}\nexports.OptionsOperation = OptionsOperation;","map":{"version":3,"names":["operation_1","require","error_1","OptionsOperation","AbstractOperation","constructor","collection","options","execute","server","session","callback","coll","s","db","listCollections","name","collectionName","nameOnly","readPreference","toArray","err","collections","length","MongoDriverError","namespace","exports"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\options_operation.ts"],"sourcesContent":["import { AbstractOperation, OperationOptions } from './operation';\nimport { MongoDriverError } from '../error';\nimport type { Callback } from '../utils';\nimport type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\n\n/** @internal */\nexport class OptionsOperation extends AbstractOperation<Document> {\n  options: OperationOptions;\n  collection: Collection;\n\n  constructor(collection: Collection, options: OperationOptions) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Document>): void {\n    const coll = this.collection;\n\n    coll.s.db\n      .listCollections(\n        { name: coll.collectionName },\n        { ...this.options, nameOnly: false, readPreference: this.readPreference, session }\n      )\n      .toArray((err, collections) => {\n        if (err || !collections) return callback(err);\n        if (collections.length === 0) {\n          return callback(new MongoDriverError(`collection ${coll.namespace} not found`));\n        }\n\n        callback(err, collections[0].options);\n      });\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAOA;AACA,MAAaE,gBAAiB,SAAQH,WAAA,CAAAI,iBAA2B;EAI/DC,YAAYC,UAAsB,EAAEC,OAAyB;IAC3D,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,UAAU,GAAGA,UAAU;EAC9B;EAEAE,OAAOA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAA4B;IAC1E,MAAMC,IAAI,GAAG,IAAI,CAACN,UAAU;IAE5BM,IAAI,CAACC,CAAC,CAACC,EAAE,CACNC,eAAe,CACd;MAAEC,IAAI,EAAEJ,IAAI,CAACK;IAAc,CAAE,EAC7B;MAAE,GAAG,IAAI,CAACV,OAAO;MAAEW,QAAQ,EAAE,KAAK;MAAEC,cAAc,EAAE,IAAI,CAACA,cAAc;MAAET;IAAO,CAAE,CACnF,CACAU,OAAO,CAAC,CAACC,GAAG,EAAEC,WAAW,KAAI;MAC5B,IAAID,GAAG,IAAI,CAACC,WAAW,EAAE,OAAOX,QAAQ,CAACU,GAAG,CAAC;MAC7C,IAAIC,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE;QAC5B,OAAOZ,QAAQ,CAAC,IAAIT,OAAA,CAAAsB,gBAAgB,CAAC,cAAcZ,IAAI,CAACa,SAAS,YAAY,CAAC,CAAC;;MAGjFd,QAAQ,CAACU,GAAG,EAAEC,WAAW,CAAC,CAAC,CAAC,CAACf,OAAO,CAAC;IACvC,CAAC,CAAC;EACN;;AA1BFmB,OAAA,CAAAvB,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}