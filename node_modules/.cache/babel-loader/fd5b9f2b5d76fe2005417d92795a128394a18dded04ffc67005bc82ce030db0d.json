{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n  /** @internal\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   */\n  constructor(chunks, files, readPreference, filter, options) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  _read() {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n  start(start = 0) {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n  end(end = 0) {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   *\n   * @param callback - called when the cursor is successfully closed or an error occurred.\n   */\n  abort(callback) {\n    this.push(null);\n    this.destroyed = true;\n    if (this.s.cursor) {\n      this.s.cursor.close(error => {\n        this.emit(GridFSBucketReadStream.CLOSE);\n        callback && callback(error);\n      });\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n      callback && callback();\n    }\n  }\n}\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * An error occurred\n * @event\n */\nGridFSBucketReadStream.ERROR = 'error';\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\n/**\n * Emitted when a chunk of data is available to be consumed.\n * @event\n */\nGridFSBucketReadStream.DATA = 'data';\n/**\n * Fired when the stream is exhausted (no more data events).\n * @event\n */\nGridFSBucketReadStream.END = 'end';\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n * @event\n */\nGridFSBucketReadStream.CLOSE = 'close';\nfunction throwIfInitialized(stream) {\n  if (stream.s.init) {\n    throw new error_1.MongoDriverError('Options cannot be changed after the stream is initialized');\n  }\n}\nfunction doRead(stream) {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n  stream.s.cursor.next((error, doc) => {\n    if (stream.destroyed) {\n      return;\n    }\n    if (error) {\n      return __handleError(stream, error);\n    }\n    if (!doc) {\n      stream.push(null);\n      process.nextTick(() => {\n        if (!stream.s.cursor) return;\n        stream.s.cursor.close(error => {\n          if (error) {\n            __handleError(stream, error);\n            return;\n          }\n          stream.emit(GridFSBucketReadStream.CLOSE);\n        });\n      });\n      return;\n    }\n    if (!stream.s.file) return;\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    let errmsg;\n    if (doc.n > expectedN) {\n      errmsg = 'ChunkIsMissing: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;\n      return __handleError(stream, new error_1.MongoDriverError(errmsg));\n    }\n    if (doc.n < expectedN) {\n      errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;\n      return __handleError(stream, new error_1.MongoDriverError(errmsg));\n    }\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n;\n        return __handleError(stream, new error_1.MongoDriverError(errmsg));\n      }\n      errmsg = 'ChunkIsWrongSize: Got unexpected length: ' + buf.byteLength + ', expected: ' + expectedLength;\n      return __handleError(stream, new error_1.MongoDriverError(errmsg));\n    }\n    stream.s.bytesRead += buf.byteLength;\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n    let sliceStart = null;\n    let sliceEnd = null;\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n    stream.push(buf);\n  });\n}\nfunction init(stream) {\n  const findOneOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n  stream.s.files.findOne(stream.s.filter, findOneOptions, (error, doc) => {\n    if (error) {\n      return __handleError(stream, error);\n    }\n    if (!doc) {\n      const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n      const errmsg = 'FileNotFound: file ' + identifier + ' was not found';\n      const err = new error_1.MongoDriverError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return __handleError(stream, err);\n    }\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return __handleError(stream, error);\n    }\n    const filter = {\n      files_id: doc._id\n    };\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = {\n          $gte: skip\n        };\n      }\n    }\n    stream.s.cursor = stream.s.chunks.find(filter).sort({\n      n: 1\n    });\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc;\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return __handleError(stream, error);\n    }\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n  });\n}\nfunction waitForFile(stream, callback) {\n  if (stream.s.file) {\n    return callback();\n  }\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n  stream.once('file', () => {\n    callback();\n  });\n}\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new error_1.MongoDriverError('Stream start (' + options.start + ') must not be ' + 'more than the length of the file (' + doc.length + ')');\n    }\n    if (options.start < 0) {\n      throw new error_1.MongoDriverError('Stream start (' + options.start + ') must not be ' + 'negative');\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new error_1.MongoDriverError('Stream start (' + options.start + ') must not be ' + 'greater than stream end (' + options.end + ')');\n    }\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n    return options.start - stream.s.bytesRead;\n  }\n  throw new error_1.MongoDriverError('No start option defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new error_1.MongoDriverError('Stream end (' + options.end + ') must not be ' + 'more than the length of the file (' + doc.length + ')');\n    }\n    if (options.start == null || options.start < 0) {\n      throw new error_1.MongoDriverError('Stream end (' + options.end + ') must not be ' + 'negative');\n    }\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new error_1.MongoDriverError('No end option defined');\n}\nfunction __handleError(stream, error) {\n  stream.emit(GridFSBucketReadStream.ERROR, error);\n}","map":{"version":3,"names":["stream_1","require","error_1","GridFSBucketReadStream","Readable","constructor","chunks","files","readPreference","filter","options","s","bytesToTrim","bytesToSkip","bytesRead","expected","init","expectedEnd","start","end","_read","destroyed","waitForFile","doRead","throwIfInitialized","abort","callback","push","cursor","close","error","emit","CLOSE","exports","ERROR","FILE","DATA","END","stream","MongoDriverError","file","next","doc","__handleError","process","nextTick","bytesRemaining","length","expectedN","expectedLength","Math","min","chunkSize","errmsg","n","buf","Buffer","isBuffer","data","buffer","byteLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","slice","findOneOptions","sort","skip","findOne","identifier","_id","toString","filename","err","code","handleStartOption","files_id","floor","$gte","find","withReadPreference","ceil","handleEndOption","once","limit"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\gridfs\\download.ts"],"sourcesContent":["import { Readable } from 'stream';\nimport { AnyError, MongoDriverError } from '../error';\nimport type { Document } from '../bson';\nimport type { FindOptions } from '../operations/find';\nimport type { Sort } from '../sort';\nimport type { Callback } from '../utils';\nimport type { Collection } from '../collection';\nimport type { ReadPreference } from '../read_preference';\nimport type { GridFSChunk } from './upload';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport type { ObjectId } from 'bson';\n\n/** @public */\nexport interface GridFSBucketReadStreamOptions {\n  sort?: Sort;\n  skip?: number;\n  /** 0-based offset in bytes to start streaming from */\n  start?: number;\n  /** 0-based offset in bytes to stop streaming before */\n  end?: number;\n}\n\n/** @public */\nexport interface GridFSBucketReadStreamOptionsWithRevision extends GridFSBucketReadStreamOptions {\n  /** The revision number relative to the oldest file with the given filename. 0\n   * gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the\n   * newest. */\n  revision?: number;\n}\n\n/** @public */\nexport interface GridFSFile {\n  _id: ObjectId;\n  length: number;\n  chunkSize: number;\n  filename: string;\n  contentType?: string;\n  aliases?: string[];\n  metadata?: Document;\n  uploadDate: Date;\n}\n\n/** @internal */\nexport interface GridFSBucketReadStreamPrivate {\n  bytesRead: number;\n  bytesToTrim: number;\n  bytesToSkip: number;\n  chunks: Collection<GridFSChunk>;\n  cursor?: FindCursor<GridFSChunk>;\n  expected: number;\n  files: Collection<GridFSFile>;\n  filter: Document;\n  init: boolean;\n  expectedEnd: number;\n  file?: GridFSFile;\n  options: {\n    sort?: Sort;\n    skip?: number;\n    start: number;\n    end: number;\n  };\n  readPreference?: ReadPreference;\n}\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nexport class GridFSBucketReadStream extends Readable {\n  /** @internal */\n  s: GridFSBucketReadStreamPrivate;\n\n  /**\n   * An error occurred\n   * @event\n   */\n  static readonly ERROR = 'error' as const;\n  /**\n   * Fires when the stream loaded the file document corresponding to the provided id.\n   * @event\n   */\n  static readonly FILE = 'file' as const;\n  /**\n   * Emitted when a chunk of data is available to be consumed.\n   * @event\n   */\n  static readonly DATA = 'data' as const;\n  /**\n   * Fired when the stream is exhausted (no more data events).\n   * @event\n   */\n  static readonly END = 'end' as const;\n  /**\n   * Fired when the stream is exhausted and the underlying cursor is killed\n   * @event\n   */\n  static readonly CLOSE = 'close' as const;\n\n  /** @internal\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   */\n  constructor(\n    chunks: Collection<GridFSChunk>,\n    files: Collection<GridFSFile>,\n    readPreference: ReadPreference | undefined,\n    filter: Document,\n    options?: GridFSBucketReadStreamOptions\n  ) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  _read(): void {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n  start(start = 0): this {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n  end(end = 0): this {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   *\n   * @param callback - called when the cursor is successfully closed or an error occurred.\n   */\n  abort(callback?: Callback<void>): void {\n    this.push(null);\n    this.destroyed = true;\n    if (this.s.cursor) {\n      this.s.cursor.close(error => {\n        this.emit(GridFSBucketReadStream.CLOSE);\n        callback && callback(error);\n      });\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n      callback && callback();\n    }\n  }\n}\n\nfunction throwIfInitialized(stream: GridFSBucketReadStream): void {\n  if (stream.s.init) {\n    throw new MongoDriverError('Options cannot be changed after the stream is initialized');\n  }\n}\n\nfunction doRead(stream: GridFSBucketReadStream): void {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n\n  stream.s.cursor.next((error, doc) => {\n    if (stream.destroyed) {\n      return;\n    }\n    if (error) {\n      return __handleError(stream, error);\n    }\n    if (!doc) {\n      stream.push(null);\n\n      process.nextTick(() => {\n        if (!stream.s.cursor) return;\n        stream.s.cursor.close(error => {\n          if (error) {\n            __handleError(stream, error);\n            return;\n          }\n\n          stream.emit(GridFSBucketReadStream.CLOSE);\n        });\n      });\n\n      return;\n    }\n\n    if (!stream.s.file) return;\n\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    let errmsg: string;\n    if (doc.n > expectedN) {\n      errmsg = 'ChunkIsMissing: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;\n      return __handleError(stream, new MongoDriverError(errmsg));\n    }\n\n    if (doc.n < expectedN) {\n      errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;\n      return __handleError(stream, new MongoDriverError(errmsg));\n    }\n\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n;\n        return __handleError(stream, new MongoDriverError(errmsg));\n      }\n\n      errmsg =\n        'ChunkIsWrongSize: Got unexpected length: ' +\n        buf.byteLength +\n        ', expected: ' +\n        expectedLength;\n      return __handleError(stream, new MongoDriverError(errmsg));\n    }\n\n    stream.s.bytesRead += buf.byteLength;\n\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n\n    let sliceStart = null;\n    let sliceEnd = null;\n\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n\n    stream.push(buf);\n  });\n}\n\nfunction init(stream: GridFSBucketReadStream): void {\n  const findOneOptions: FindOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n\n  stream.s.files.findOne(stream.s.filter, findOneOptions, (error, doc) => {\n    if (error) {\n      return __handleError(stream, error);\n    }\n\n    if (!doc) {\n      const identifier = stream.s.filter._id\n        ? stream.s.filter._id.toString()\n        : stream.s.filter.filename;\n      const errmsg = 'FileNotFound: file ' + identifier + ' was not found';\n      const err = new MongoDriverError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return __handleError(stream, err);\n    }\n\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return __handleError(stream, error);\n    }\n\n    const filter: Document = { files_id: doc._id };\n\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = { $gte: skip };\n      }\n    }\n    stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc as GridFSFile;\n\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return __handleError(stream, error);\n    }\n\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n  });\n}\n\nfunction waitForFile(stream: GridFSBucketReadStream, callback: Callback): void {\n  if (stream.s.file) {\n    return callback();\n  }\n\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n\n  stream.once('file', () => {\n    callback();\n  });\n}\n\nfunction handleStartOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  options: GridFSBucketReadStreamOptions\n): number {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new MongoDriverError(\n        'Stream start (' +\n          options.start +\n          ') must not be ' +\n          'more than the length of the file (' +\n          doc.length +\n          ')'\n      );\n    }\n    if (options.start < 0) {\n      throw new MongoDriverError('Stream start (' + options.start + ') must not be ' + 'negative');\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new MongoDriverError(\n        'Stream start (' +\n          options.start +\n          ') must not be ' +\n          'greater than stream end (' +\n          options.end +\n          ')'\n      );\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n\n    return options.start - stream.s.bytesRead;\n  }\n  throw new MongoDriverError('No start option defined');\n}\n\nfunction handleEndOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  cursor: FindCursor<GridFSChunk>,\n  options: GridFSBucketReadStreamOptions\n) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new MongoDriverError(\n        'Stream end (' +\n          options.end +\n          ') must not be ' +\n          'more than the length of the file (' +\n          doc.length +\n          ')'\n      );\n    }\n    if (options.start == null || options.start < 0) {\n      throw new MongoDriverError('Stream end (' + options.end + ') must not be ' + 'negative');\n    }\n\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new MongoDriverError('No end option defined');\n}\n\nfunction __handleError(stream: GridFSBucketReadStream, error?: AnyError): void {\n  stream.emit(GridFSBucketReadStream.ERROR, error);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}