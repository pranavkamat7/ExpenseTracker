{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GSSAPI = void 0;\nconst auth_provider_1 = require(\"./auth_provider\");\nconst error_1 = require(\"../../error\");\nconst deps_1 = require(\"../../deps\");\nconst utils_1 = require(\"../../utils\");\nconst dns = require(\"dns\");\nclass GSSAPI extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (credentials == null) return callback(new error_1.MongoDriverError('credentials required'));\n    const {\n      username\n    } = credentials;\n    function externalCommand(command, cb) {\n      return connection.command(utils_1.ns('$external.$cmd'), command, undefined, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new error_1.MongoDriverError('gssapi client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, result) => {\n          if (err) return callback(err);\n          if (result == null) return callback();\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n              if (err) return callback(err);\n              if (result == null) return callback();\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\nexports.GSSAPI = GSSAPI;\nfunction makeKerberosClient(authContext, callback) {\n  var _a;\n  const {\n    hostAddress\n  } = authContext.options;\n  const {\n    credentials\n  } = authContext;\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(new error_1.MongoDriverError('Connection must have host and port and credentials defined.'));\n  }\n  if ('kModuleError' in deps_1.Kerberos) {\n    return callback(deps_1.Kerberos['kModuleError']);\n  }\n  const {\n    initializeClient\n  } = deps_1.Kerberos;\n  const {\n    username,\n    password\n  } = credentials;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n  performGssapiCanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n      spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    initializeClient(spn, initOptions, (err, client) => {\n      if (err) return callback(new error_1.MongoDriverError(err));\n      callback(undefined, client);\n    });\n  });\n}\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n    // Wrap the response\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err);\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  if (!mechanismProperties.gssapiCanonicalizeHostName) return callback(undefined, host);\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err);\n    // Get the first resolve host id\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n    callback(undefined, host);\n  });\n}","map":{"version":3,"names":["auth_provider_1","require","error_1","deps_1","utils_1","dns","GSSAPI","AuthProvider","auth","authContext","callback","connection","credentials","MongoDriverError","username","externalCommand","command","cb","ns","undefined","makeKerberosClient","err","client","step","payload","saslStart","result","negotiate","saslContinue","conversationId","finalize","exports","hostAddress","options","host","Kerberos","initializeClient","password","mechanismProperties","serviceName","_a","SERVICE_NAME","performGssapiCanonicalizeHostName","initOptions","Object","assign","user","spn","process","platform","SERVICE_REALM","mechanism","autoAuthorize","retries","response","unwrap","wrap","wrapped","gssapiCanonicalizeHostName","resolveCname","r","Array","isArray","length"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\cmap\\auth\\gssapi.ts"],"sourcesContent":["import { AuthProvider, AuthContext } from './auth_provider';\nimport { MongoDriverError, MongoError } from '../../error';\nimport { Kerberos, KerberosClient } from '../../deps';\nimport { Callback, ns } from '../../utils';\nimport type { Document } from '../../bson';\n\ntype MechanismProperties = {\n  gssapiCanonicalizeHostName?: boolean;\n  SERVICE_NAME?: string;\n  SERVICE_REALM?: string;\n};\n\nimport * as dns from 'dns';\n\nexport class GSSAPI extends AuthProvider {\n  auth(authContext: AuthContext, callback: Callback): void {\n    const { connection, credentials } = authContext;\n    if (credentials == null) return callback(new MongoDriverError('credentials required'));\n    const { username } = credentials;\n    function externalCommand(\n      command: Document,\n      cb: Callback<{ payload: string; conversationId: any }>\n    ) {\n      return connection.command(ns('$external.$cmd'), command, undefined, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new MongoDriverError('gssapi client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n\n        externalCommand(saslStart(payload), (err, result) => {\n          if (err) return callback(err);\n          if (result == null) return callback();\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n\n            externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n              if (err) return callback(err);\n              if (result == null) return callback();\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n\n                externalCommand(\n                  {\n                    saslContinue: 1,\n                    conversationId: result.conversationId,\n                    payload\n                  },\n                  (err, result) => {\n                    if (err) return callback(err);\n\n                    callback(undefined, result);\n                  }\n                );\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\nfunction makeKerberosClient(authContext: AuthContext, callback: Callback<KerberosClient>): void {\n  const { hostAddress } = authContext.options;\n  const { credentials } = authContext;\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(\n      new MongoDriverError('Connection must have host and port and credentials defined.')\n    );\n  }\n\n  if ('kModuleError' in Kerberos) {\n    return callback(Kerberos['kModuleError']);\n  }\n  const { initializeClient } = Kerberos;\n\n  const { username, password } = credentials;\n  const mechanismProperties = credentials.mechanismProperties as MechanismProperties;\n\n  const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n\n  performGssapiCanonicalizeHostName(\n    hostAddress.host,\n    mechanismProperties,\n    (err?: Error | MongoError, host?: string) => {\n      if (err) return callback(err);\n\n      const initOptions = {};\n      if (password != null) {\n        Object.assign(initOptions, { user: username, password: password });\n      }\n\n      let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`;\n      if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n      }\n\n      initializeClient(spn, initOptions, (err: string, client: KerberosClient): void => {\n        if (err) return callback(new MongoDriverError(err));\n        callback(undefined, client);\n      });\n    }\n  );\n}\n\nfunction saslStart(payload?: string): Document {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload?: string, conversationId?: number): Document {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\n\nfunction negotiate(\n  client: KerberosClient,\n  retries: number,\n  payload: string,\n  callback: Callback<string>\n): void {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(\n  client: KerberosClient,\n  user: string,\n  payload: string,\n  callback: Callback<string>\n): void {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n\n    // Wrap the response\n    client.wrap(response || '', { user }, (err, wrapped) => {\n      if (err) return callback(err);\n\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGssapiCanonicalizeHostName(\n  host: string,\n  mechanismProperties: MechanismProperties,\n  callback: Callback<string>\n): void {\n  if (!mechanismProperties.gssapiCanonicalizeHostName) return callback(undefined, host);\n\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err);\n\n    // Get the first resolve host id\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}