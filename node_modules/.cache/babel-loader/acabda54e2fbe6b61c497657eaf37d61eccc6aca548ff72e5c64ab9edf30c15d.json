{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PromiseProvider = void 0;\nconst error_1 = require(\"./error\");\n/** @internal */\nconst kPromise = Symbol('promise');\nconst store = {\n  [kPromise]: undefined\n};\n/**\n * Global promise store allowing user-provided promises\n * @public\n */\nclass PromiseProvider {\n  /** Validates the passed in promise library */\n  static validate(lib) {\n    if (typeof lib !== 'function') throw new error_1.MongoDriverError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n  /** Sets the promise library */\n  static set(lib) {\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n    store[kPromise] = lib;\n  }\n  /** Get the stored promise library, or resolves passed in */\n  static get() {\n    return store[kPromise];\n  }\n}\nexports.PromiseProvider = PromiseProvider;\nPromiseProvider.set(global.Promise);","map":{"version":3,"names":["error_1","require","kPromise","Symbol","store","undefined","PromiseProvider","validate","lib","MongoDriverError","set","get","exports","global","Promise"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\promise_provider.ts"],"sourcesContent":["import { MongoDriverError } from './error';\n\n/** @internal */\nconst kPromise = Symbol('promise');\n\ninterface PromiseStore {\n  [kPromise]?: PromiseConstructor;\n}\n\nconst store: PromiseStore = {\n  [kPromise]: undefined\n};\n\n/**\n * Global promise store allowing user-provided promises\n * @public\n */\nexport class PromiseProvider {\n  /** Validates the passed in promise library */\n  static validate(lib: unknown): lib is PromiseConstructor {\n    if (typeof lib !== 'function')\n      throw new MongoDriverError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n\n  /** Sets the promise library */\n  static set(lib: PromiseConstructor): void {\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n    store[kPromise] = lib;\n  }\n\n  /** Get the stored promise library, or resolves passed in */\n  static get(): PromiseConstructor {\n    return store[kPromise] as PromiseConstructor;\n  }\n}\n\nPromiseProvider.set(global.Promise);\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAEA;AACA,MAAMC,QAAQ,GAAGC,MAAM,CAAC,SAAS,CAAC;AAMlC,MAAMC,KAAK,GAAiB;EAC1B,CAACF,QAAQ,GAAGG;CACb;AAED;;;;AAIA,MAAaC,eAAe;EAC1B;EACA,OAAOC,QAAQA,CAACC,GAAY;IAC1B,IAAI,OAAOA,GAAG,KAAK,UAAU,EAC3B,MAAM,IAAIR,OAAA,CAAAS,gBAAgB,CAAC,mCAAmCD,GAAG,EAAE,CAAC;IACtE,OAAO,CAAC,CAACA,GAAG;EACd;EAEA;EACA,OAAOE,GAAGA,CAACF,GAAuB;IAChC,IAAI,CAACF,eAAe,CAACC,QAAQ,CAACC,GAAG,CAAC,EAAE;MAClC;MACA;;IAEFJ,KAAK,CAACF,QAAQ,CAAC,GAAGM,GAAG;EACvB;EAEA;EACA,OAAOG,GAAGA,CAAA;IACR,OAAOP,KAAK,CAACF,QAAQ,CAAuB;EAC9C;;AApBFU,OAAA,CAAAN,eAAA,GAAAA,eAAA;AAuBAA,eAAe,CAACI,GAAG,CAACG,MAAM,CAACC,OAAO,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}