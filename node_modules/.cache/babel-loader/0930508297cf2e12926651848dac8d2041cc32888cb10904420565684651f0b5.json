{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CollectionsOperation = void 0;\nconst operation_1 = require(\"./operation\");\nconst collection_1 = require(\"../collection\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractOperation {\n  constructor(db, options) {\n    super(options);\n    this.options = options;\n    this.db = db;\n  }\n  execute(server, session, callback) {\n    const db = this.db;\n    // Let's get the collection names\n    db.listCollections({}, {\n      ...this.options,\n      nameOnly: true,\n      readPreference: this.readPreference,\n      session\n    }).toArray((err, documents) => {\n      if (err || !documents) return callback(err);\n      // Filter collections removing any illegal ones\n      documents = documents.filter(doc => doc.name.indexOf('$') === -1);\n      // Return the collection objects\n      callback(undefined, documents.map(d => {\n        return new collection_1.Collection(db, d.name, db.s.options);\n      }));\n    });\n  }\n}\nexports.CollectionsOperation = CollectionsOperation;","map":{"version":3,"names":["operation_1","require","collection_1","CollectionsOperation","AbstractOperation","constructor","db","options","execute","server","session","callback","listCollections","nameOnly","readPreference","toArray","err","documents","filter","doc","name","indexOf","undefined","map","d","Collection","s","exports"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\collections.ts"],"sourcesContent":["import { AbstractOperation, OperationOptions } from './operation';\nimport { Collection } from '../collection';\nimport type { Callback } from '../utils';\nimport type { Db } from '../db';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\n\nexport interface CollectionsOptions extends OperationOptions {\n  nameOnly?: boolean;\n}\n\n/** @internal */\nexport class CollectionsOperation extends AbstractOperation<Collection[]> {\n  options: CollectionsOptions;\n  db: Db;\n\n  constructor(db: Db, options: CollectionsOptions) {\n    super(options);\n    this.options = options;\n    this.db = db;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Collection[]>): void {\n    const db = this.db;\n\n    // Let's get the collection names\n    db.listCollections(\n      {},\n      { ...this.options, nameOnly: true, readPreference: this.readPreference, session }\n    ).toArray((err, documents) => {\n      if (err || !documents) return callback(err);\n      // Filter collections removing any illegal ones\n      documents = documents.filter(doc => doc.name.indexOf('$') === -1);\n\n      // Return the collection objects\n      callback(\n        undefined,\n        documents.map(d => {\n          return new Collection(db, d.name, db.s.options);\n        })\n      );\n    });\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AAUA;AACA,MAAaE,oBAAqB,SAAQH,WAAA,CAAAI,iBAA+B;EAIvEC,YAAYC,EAAM,EAAEC,OAA2B;IAC7C,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,EAAE,GAAGA,EAAE;EACd;EAEAE,OAAOA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAAgC;IAC9E,MAAML,EAAE,GAAG,IAAI,CAACA,EAAE;IAElB;IACAA,EAAE,CAACM,eAAe,CAChB,EAAE,EACF;MAAE,GAAG,IAAI,CAACL,OAAO;MAAEM,QAAQ,EAAE,IAAI;MAAEC,cAAc,EAAE,IAAI,CAACA,cAAc;MAAEJ;IAAO,CAAE,CAClF,CAACK,OAAO,CAAC,CAACC,GAAG,EAAEC,SAAS,KAAI;MAC3B,IAAID,GAAG,IAAI,CAACC,SAAS,EAAE,OAAON,QAAQ,CAACK,GAAG,CAAC;MAC3C;MACAC,SAAS,GAAGA,SAAS,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;MAEjE;MACAV,QAAQ,CACNW,SAAS,EACTL,SAAS,CAACM,GAAG,CAACC,CAAC,IAAG;QAChB,OAAO,IAAItB,YAAA,CAAAuB,UAAU,CAACnB,EAAE,EAAEkB,CAAC,CAACJ,IAAI,EAAEd,EAAE,CAACoB,CAAC,CAACnB,OAAO,CAAC;MACjD,CAAC,CAAC,CACH;IACH,CAAC,CAAC;EACJ;;AA9BFoB,OAAA,CAAAxB,oBAAA,GAAAA,oBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}