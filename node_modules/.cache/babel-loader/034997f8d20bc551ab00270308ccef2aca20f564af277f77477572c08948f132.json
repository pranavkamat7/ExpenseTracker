{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\nconst utils_1 = require(\"./utils\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst bson_1 = require(\"./bson\");\nconst read_preference_1 = require(\"./read_preference\");\nconst error_1 = require(\"./error\");\nconst collection_1 = require(\"./collection\");\nconst change_stream_1 = require(\"./change_stream\");\nconst CONSTANTS = require(\"./constants\");\nconst write_concern_1 = require(\"./write_concern\");\nconst read_concern_1 = require(\"./read_concern\");\nconst logger_1 = require(\"./logger\");\nconst add_user_1 = require(\"./operations/add_user\");\nconst collections_1 = require(\"./operations/collections\");\nconst stats_1 = require(\"./operations/stats\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst drop_1 = require(\"./operations/drop\");\nconst list_collections_1 = require(\"./operations/list_collections\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst admin_1 = require(\"./admin\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'loggerLevel', 'logger', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```js\n * const { MongoClient } = require('mongodb');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n * ```\n */\nclass Db {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client, databaseName, options) {\n    var _a;\n    options = options !== null && options !== void 0 ? options : {};\n    // Filter the options\n    options = utils_1.filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n    // Internal state of the db object\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new logger_1.Logger('Db', options),\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: bson_1.resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: (_a = options === null || options === void 0 ? void 0 : options.pkFactory) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n  }\n  get databaseName() {\n    return this.s.namespace.db;\n  }\n  // Options\n  get options() {\n    return this.s.options;\n  }\n  // slaveOk specified\n  get slaveOk() {\n    var _a;\n    return ((_a = this.s.readPreference) === null || _a === void 0 ? void 0 : _a.preference) !== 'primary' || false;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  // get the write Concern\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  createCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new create_collection_1.CreateCollectionOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n  }\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    // Intentionally, we do not inherit options from parent for this operation.\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new run_command_1.RunCommandOperation(this, command, options !== null && options !== void 0 ? options : {}), callback);\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate(pipeline = [], options) {\n    if (arguments.length > 2) {\n      throw new error_1.MongoDriverError('Third parameter to `db.aggregate()` must be undefined');\n    }\n    if (typeof pipeline === 'function') {\n      throw new error_1.MongoDriverError('`pipeline` parameter must not be function');\n    }\n    if (typeof options === 'function') {\n      throw new error_1.MongoDriverError('`options` parameter must not be function');\n    }\n    return new aggregation_cursor_1.AggregationCursor(this, utils_1.getTopology(this), this.s.namespace, pipeline, utils_1.resolveOptions(this, options));\n  }\n  /** Return the Admin db instance */\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  collection(name, options) {\n    if (!options) {\n      options = {};\n    } else if (typeof options === 'function') {\n      throw new error_1.MongoDriverError('The callback form of this helper has been removed.');\n    }\n    const finalOptions = utils_1.resolveOptions(this, options);\n    return new collection_1.Collection(this, name, finalOptions);\n  }\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new stats_1.DbStatsOperation(this, utils_1.resolveOptions(this, options)), callback);\n  }\n  listCollections(filter = {}, options = {}) {\n    return new list_collections_1.ListCollectionsCursor(this, filter, utils_1.resolveOptions(this, options));\n  }\n  renameCollection(fromCollection, toCollection, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    // Intentionally, we do not inherit options from parent for this operation.\n    options = {\n      ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    };\n    // Add return new collection\n    options.new_collection = true;\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new rename_1.RenameOperation(this.collection(fromCollection), toCollection, options), callback);\n  }\n  dropCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new drop_1.DropCollectionOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n  }\n  dropDatabase(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new drop_1.DropDatabaseOperation(this, utils_1.resolveOptions(this, options)), callback);\n  }\n  collections(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new collections_1.CollectionsOperation(this, utils_1.resolveOptions(this, options)), callback);\n  }\n  createIndex(name, indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new indexes_1.CreateIndexOperation(this, name, indexSpec, utils_1.resolveOptions(this, options)), callback);\n  }\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new add_user_1.AddUserOperation(this, username, password, utils_1.resolveOptions(this, options)), callback);\n  }\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new remove_user_1.RemoveUserOperation(this, username, utils_1.resolveOptions(this, options)), callback);\n  }\n  setProfilingLevel(level, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new set_profiling_level_1.SetProfilingLevelOperation(this, level, utils_1.resolveOptions(this, options)), callback);\n  }\n  profilingLevel(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new profiling_level_1.ProfilingLevelOperation(this, utils_1.resolveOptions(this, options)), callback);\n  }\n  indexInformation(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new indexes_1.IndexInformationOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n  }\n  /** Unref all sockets */\n  unref() {\n    utils_1.getTopology(this).unref();\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   */\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, utils_1.resolveOptions(this, options));\n  }\n  /** Return the db logger */\n  getLogger() {\n    return this.s.logger;\n  }\n  get logger() {\n    return this.s.logger;\n  }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoDriverError('database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoDriverError('database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoDriverError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"names":["utils_1","require","aggregation_cursor_1","bson_1","read_preference_1","error_1","collection_1","change_stream_1","CONSTANTS","write_concern_1","read_concern_1","logger_1","add_user_1","collections_1","stats_1","run_command_1","create_collection_1","indexes_1","drop_1","list_collections_1","profiling_level_1","remove_user_1","rename_1","set_profiling_level_1","execute_operation_1","admin_1","DB_OPTIONS_ALLOW_LIST","Db","constructor","client","databaseName","options","filterOptions","validateDatabaseName","s","logger","Logger","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","pkFactory","_a","DEFAULT_PK_FACTORY","readConcern","ReadConcern","writeConcern","WriteConcern","namespace","MongoDBNamespace","db","slaveOk","preference","toString","createCollection","name","callback","executeOperation","getTopology","CreateCollectionOperation","resolveOptions","command","RunCommandOperation","aggregate","pipeline","arguments","length","MongoDriverError","AggregationCursor","admin","Admin","collection","finalOptions","Collection","stats","DbStatsOperation","listCollections","filter","ListCollectionsCursor","renameCollection","fromCollection","toCollection","PRIMARY","new_collection","RenameOperation","dropCollection","DropCollectionOperation","dropDatabase","DropDatabaseOperation","collections","CollectionsOperation","createIndex","indexSpec","CreateIndexOperation","addUser","username","password","undefined","AddUserOperation","removeUser","RemoveUserOperation","setProfilingLevel","level","SetProfilingLevelOperation","profilingLevel","ProfilingLevelOperation","indexInformation","IndexInformationOperation","unref","watch","Array","isArray","ChangeStream","getLogger","exports","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","invalidChars","i","indexOf"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\db.ts"],"sourcesContent":["import {\n  Callback,\n  resolveOptions,\n  filterOptions,\n  MongoDBNamespace,\n  getTopology,\n  DEFAULT_PK_FACTORY\n} from './utils';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { Document, BSONSerializeOptions, resolveBSONOptions } from './bson';\nimport { ReadPreference, ReadPreferenceLike } from './read_preference';\nimport { MongoDriverError } from './error';\nimport { Collection, CollectionOptions } from './collection';\nimport { ChangeStream, ChangeStreamOptions } from './change_stream';\nimport * as CONSTANTS from './constants';\nimport { WriteConcern, WriteConcernOptions } from './write_concern';\nimport { ReadConcern } from './read_concern';\nimport { Logger, LoggerOptions } from './logger';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\nimport { CollectionsOperation } from './operations/collections';\nimport { DbStatsOperation, DbStatsOptions } from './operations/stats';\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\nimport { CreateCollectionOperation, CreateCollectionOptions } from './operations/create_collection';\nimport {\n  CreateIndexOperation,\n  IndexInformationOperation,\n  CreateIndexesOptions,\n  IndexSpecification\n} from './operations/indexes';\nimport {\n  DropCollectionOperation,\n  DropDatabaseOperation,\n  DropDatabaseOptions,\n  DropCollectionOptions\n} from './operations/drop';\nimport {\n  CollectionInfo,\n  ListCollectionsCursor,\n  ListCollectionsOptions\n} from './operations/list_collections';\nimport { ProfilingLevelOperation, ProfilingLevelOptions } from './operations/profiling_level';\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\nimport { RenameOperation, RenameOptions } from './operations/rename';\nimport {\n  SetProfilingLevelOperation,\n  SetProfilingLevelOptions,\n  ProfilingLevel\n} from './operations/set_profiling_level';\nimport { executeOperation } from './operations/execute_operation';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport type { MongoClient, PkFactory } from './mongo_client';\nimport { Admin } from './admin';\nimport type { TODO_NODE_3286 } from './mongo_types';\n\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n  'writeConcern',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'authSource',\n  'ignoreUndefined',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'loggerLevel',\n  'logger',\n  'promoteBuffers',\n  'promoteLongs',\n  'bsonRegExp',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/** @internal */\nexport interface DbPrivate {\n  client: MongoClient;\n  options?: DbOptions;\n  logger: Logger;\n  readPreference?: ReadPreference;\n  pkFactory: PkFactory;\n  readConcern?: ReadConcern;\n  bsonOptions: BSONSerializeOptions;\n  writeConcern?: WriteConcern;\n  namespace: MongoDBNamespace;\n}\n\n/** @public */\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions, LoggerOptions {\n  /** If the database authentication is dependent on another databaseName. */\n  authSource?: string;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n  /** A primary key factory object for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcern;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```js\n * const { MongoClient } = require('mongodb');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n * ```\n */\nexport class Db {\n  /** @internal */\n  s: DbPrivate;\n\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\n    options = options ?? {};\n\n    // Filter the options\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n\n    // Internal state of the db object\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new Logger('Db', options),\n      // Unpack read preference\n      readPreference: ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName(): string {\n    return this.s.namespace.db;\n  }\n\n  // Options\n  get options(): DbOptions | undefined {\n    return this.s.options;\n  }\n\n  // slaveOk specified\n  get slaveOk(): boolean {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference(): ReadPreference {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  // get the write Concern\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  createCollection<TSchema extends Document = Document>(name: string): Promise<Collection<TSchema>>;\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options: CreateCollectionOptions\n  ): Promise<Collection<TSchema>>;\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options: CreateCollectionOptions,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions | Callback<Collection>,\n    callback?: Callback<Collection>\n  ): Promise<Collection<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286,\n      callback\n    ) as TODO_NODE_3286;\n  }\n\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  command(command: Document): Promise<Document>;\n  command(command: Document, callback: Callback<Document>): void;\n  command(command: Document, options: RunCommandOptions): Promise<Document>;\n  command(command: Document, options: RunCommandOptions, callback: Callback<Document>): void;\n  command(\n    command: Document,\n    options?: RunCommandOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      getTopology(this),\n      new RunCommandOperation(this, command, options ?? {}),\n      callback\n    );\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate(pipeline: Document[] = [], options?: AggregateOptions): AggregationCursor {\n    if (arguments.length > 2) {\n      throw new MongoDriverError('Third parameter to `db.aggregate()` must be undefined');\n    }\n    if (typeof pipeline === 'function') {\n      throw new MongoDriverError('`pipeline` parameter must not be function');\n    }\n    if (typeof options === 'function') {\n      throw new MongoDriverError('`options` parameter must not be function');\n    }\n\n    return new AggregationCursor(\n      this,\n      getTopology(this),\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /** Return the Admin db instance */\n  admin(): Admin {\n    return new Admin(this);\n  }\n\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection<TSchema extends Document = Document>(name: string): Collection<TSchema>;\n  collection<TSchema extends Document = Document>(\n    name: string,\n    options?: CollectionOptions\n  ): Collection<TSchema> {\n    if (!options) {\n      options = {};\n    } else if (typeof options === 'function') {\n      throw new MongoDriverError('The callback form of this helper has been removed.');\n    }\n    const finalOptions = resolveOptions(this, options);\n    return new Collection<TSchema>(this, name, finalOptions);\n  }\n\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  stats(): Promise<Document>;\n  stats(callback: Callback<Document>): void;\n  stats(options: DbStatsOptions): Promise<Document>;\n  stats(options: DbStatsOptions, callback: Callback<Document>): void;\n  stats(\n    options?: DbStatsOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    return executeOperation(\n      getTopology(this),\n      new DbStatsOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * List all collections of this database with optional filter\n   *\n   * @param filter - Query to filter collections by\n   * @param options - Optional settings for the command\n   */\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true }\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false }\n  ): ListCollectionsCursor<CollectionInfo>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter?: Document, options?: ListCollectionsOptions): ListCollectionsCursor<T>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter: Document = {}, options: ListCollectionsOptions = {}): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\n  }\n\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string\n  ): Promise<Collection<TSchema>>;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options: RenameOptions\n  ): Promise<Collection<TSchema>>;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options: RenameOptions,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options?: RenameOptions | Callback<Collection<TSchema>>,\n    callback?: Callback<Collection<TSchema>>\n  ): Promise<Collection<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    // Intentionally, we do not inherit options from parent for this operation.\n    options = { ...options, readPreference: ReadPreference.PRIMARY };\n\n    // Add return new collection\n    options.new_collection = true;\n\n    return executeOperation(\n      getTopology(this),\n      new RenameOperation(\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\n        toCollection,\n        options\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropCollection(name: string): Promise<boolean>;\n  dropCollection(name: string, callback: Callback<boolean>): void;\n  dropCollection(name: string, options: DropCollectionOptions): Promise<boolean>;\n  dropCollection(name: string, options: DropCollectionOptions, callback: Callback<boolean>): void;\n  dropCollection(\n    name: string,\n    options?: DropCollectionOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new DropCollectionOperation(this, name, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropDatabase(): Promise<boolean>;\n  dropDatabase(callback: Callback<boolean>): void;\n  dropDatabase(options: DropDatabaseOptions): Promise<boolean>;\n  dropDatabase(options: DropDatabaseOptions, callback: Callback<boolean>): void;\n  dropDatabase(\n    options?: DropDatabaseOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new DropDatabaseOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  collections(): Promise<Collection[]>;\n  collections(callback: Callback<Collection[]>): void;\n  collections(options: ListCollectionsOptions): Promise<Collection[]>;\n  collections(options: ListCollectionsOptions, callback: Callback<Collection[]>): void;\n  collections(\n    options?: ListCollectionsOptions | Callback<Collection[]>,\n    callback?: Callback<Collection[]>\n  ): Promise<Collection[]> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new CollectionsOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  createIndex(name: string, indexSpec: IndexSpecification): Promise<string>;\n  createIndex(name: string, indexSpec: IndexSpecification, callback?: Callback<string>): void;\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions\n  ): Promise<string>;\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions,\n    callback: Callback<string>\n  ): void;\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions | Callback<string>,\n    callback?: Callback<string>\n  ): Promise<string> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new CreateIndexOperation(this, name, indexSpec, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param password - An optional password for the new user\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  addUser(username: string): Promise<Document>;\n  addUser(username: string, callback: Callback<Document>): void;\n  addUser(username: string, password: string): Promise<Document>;\n  addUser(username: string, password: string, callback: Callback<Document>): void;\n  addUser(username: string, options: AddUserOptions): Promise<Document>;\n  addUser(username: string, options: AddUserOptions, callback: Callback<Document>): void;\n  addUser(username: string, password: string, options: AddUserOptions): Promise<Document>;\n  addUser(\n    username: string,\n    password: string,\n    options: AddUserOptions,\n    callback: Callback<Document>\n  ): void;\n  addUser(\n    username: string,\n    password?: string | AddUserOptions | Callback<Document>,\n    options?: AddUserOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof password === 'function') {\n      (callback = password), (password = undefined), (options = {});\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        (callback = options), (options = password), (password = undefined);\n      } else {\n        (options = password), (callback = undefined), (password = undefined);\n      }\n    } else {\n      if (typeof options === 'function') (callback = options), (options = {});\n    }\n\n    return executeOperation(\n      getTopology(this),\n      new AddUserOperation(this, username, password, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  removeUser(username: string): Promise<boolean>;\n  removeUser(username: string, callback: Callback<boolean>): void;\n  removeUser(username: string, options: RemoveUserOptions): Promise<boolean>;\n  removeUser(username: string, options: RemoveUserOptions, callback: Callback<boolean>): void;\n  removeUser(\n    username: string,\n    options?: RemoveUserOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new RemoveUserOperation(this, username, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  setProfilingLevel(level: ProfilingLevel): Promise<ProfilingLevel>;\n  setProfilingLevel(level: ProfilingLevel, callback: Callback<ProfilingLevel>): void;\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options: SetProfilingLevelOptions\n  ): Promise<ProfilingLevel>;\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options: SetProfilingLevelOptions,\n    callback: Callback<ProfilingLevel>\n  ): void;\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options?: SetProfilingLevelOptions | Callback<ProfilingLevel>,\n    callback?: Callback<ProfilingLevel>\n  ): Promise<ProfilingLevel> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  profilingLevel(): Promise<string>;\n  profilingLevel(callback: Callback<string>): void;\n  profilingLevel(options: ProfilingLevelOptions): Promise<string>;\n  profilingLevel(options: ProfilingLevelOptions, callback: Callback<string>): void;\n  profilingLevel(\n    options?: ProfilingLevelOptions | Callback<string>,\n    callback?: Callback<string>\n  ): Promise<string> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new ProfilingLevelOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexInformation(name: string): Promise<Document>;\n  indexInformation(name: string, callback: Callback<Document>): void;\n  indexInformation(name: string, options: IndexInformationOptions): Promise<Document>;\n  indexInformation(\n    name: string,\n    options: IndexInformationOptions,\n    callback: Callback<Document>\n  ): void;\n  indexInformation(\n    name: string,\n    options?: IndexInformationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new IndexInformationOperation(this, name, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /** Unref all sockets */\n  unref(): void {\n    getTopology(this).unref();\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   */\n  watch<TSchema = Document>(\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ): ChangeStream<TSchema> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TSchema>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /** Return the db logger */\n  getLogger(): Logger {\n    return this.s.logger;\n  }\n\n  get logger(): Logger {\n    return this.s.logger;\n  }\n}\n\n// Validate the database name\nfunction validateDatabaseName(databaseName: string) {\n  if (typeof databaseName !== 'string')\n    throw new MongoDriverError('database name must be a string');\n  if (databaseName.length === 0)\n    throw new MongoDriverError('database name cannot be the empty string');\n  if (databaseName === '$external') return;\n\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\n      throw new MongoDriverError(\n        `database names cannot contain the character '${invalidChars[i]}'`\n      );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}