{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeOperation = void 0;\nconst read_preference_1 = require(\"../read_preference\");\nconst error_1 = require(\"../error\");\nconst operation_1 = require(\"./operation\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"../sdam/common\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\nfunction executeOperation(topology, operation, callback) {\n  if (!(operation instanceof operation_1.AbstractOperation)) {\n    throw new error_1.MongoDriverError('This method requires a valid operation instance');\n  }\n  return utils_1.maybePromise(callback, cb => {\n    if (topology.shouldCheckForSessionSupport()) {\n      return topology.selectServer(read_preference_1.ReadPreference.primaryPreferred, err => {\n        if (err) return cb(err);\n        executeOperation(topology, operation, cb);\n      });\n    }\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (topology.hasSessionSupport()) {\n      if (session == null) {\n        owner = Symbol();\n        session = topology.startSession({\n          owner,\n          explicit: false\n        });\n      } else if (session.hasEnded) {\n        return cb(new error_1.MongoDriverError('Use of expired sessions is not permitted'));\n      } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        return cb(new error_1.MongoDriverError('Snapshot reads require MongoDB 5.0 or later'));\n      }\n    } else if (session) {\n      // If the user passed an explicit session and we are still, after server selection,\n      // trying to run against a topology that doesn't support sessions we error out.\n      return cb(new error_1.MongoDriverError('Current topology does not support sessions'));\n    }\n    try {\n      executeWithServerSelection(topology, session, operation, (err, result) => {\n        if (session && session.owner && session.owner === owner) {\n          return session.endSession(err2 => cb(err2 || err, result));\n        }\n        cb(err, result);\n      });\n    } catch (e) {\n      if (session && session.owner && session.owner === owner) {\n        session.endSession();\n      }\n      throw e;\n    }\n  });\n}\nexports.executeOperation = executeOperation;\nfunction supportsRetryableReads(server) {\n  return utils_1.maxWireVersion(server) >= 6;\n}\nfunction executeWithServerSelection(topology, session, operation, callback) {\n  const readPreference = operation.readPreference || read_preference_1.ReadPreference.primary;\n  const inTransaction = session && session.inTransaction();\n  if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n    callback(new error_1.MongoDriverError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`));\n    return;\n  }\n  const serverSelectionOptions = {\n    session\n  };\n  function callbackWithRetry(err, result) {\n    if (err == null) {\n      return callback(undefined, result);\n    }\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const itShouldRetryWrite = shouldRetryWrite(err);\n    if (hasReadAspect && !error_1.isRetryableError(err) || hasWriteAspect && !itShouldRetryWrite) {\n      return callback(err);\n    }\n    if (hasWriteAspect && itShouldRetryWrite && err.code === MMAPv1_RETRY_WRITES_ERROR_CODE && err.errmsg.match(/Transaction numbers/)) {\n      callback(new error_1.MongoServerError({\n        message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n        errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n        originalError: err\n      }));\n      return;\n    }\n    // select a new server, and attempt to retry the operation\n    topology.selectServer(readPreference, serverSelectionOptions, (err, server) => {\n      if (err || operation.hasAspect(operation_1.Aspect.READ_OPERATION) && !supportsRetryableReads(server) || operation.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !supportsRetryableWrites(server)) {\n        callback(err);\n        return;\n      }\n      operation.execute(server, session, callback);\n    });\n  }\n  if (readPreference && !readPreference.equals(read_preference_1.ReadPreference.primary) && session && session.inTransaction()) {\n    callback(new error_1.MongoDriverError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`));\n    return;\n  }\n  // select a server, and execute the operation against it\n  topology.selectServer(readPreference, serverSelectionOptions, (err, server) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (session && operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n      const willRetryRead = topology.s.options.retryReads !== false && !inTransaction && supportsRetryableReads(server) && operation.canRetryRead;\n      const willRetryWrite = topology.s.options.retryWrites === true && !inTransaction && supportsRetryableWrites(server) && operation.canRetryWrite;\n      const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n      const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n      if (hasReadAspect && willRetryRead || hasWriteAspect && willRetryWrite) {\n        if (hasWriteAspect && willRetryWrite) {\n          operation.options.willRetryWrite = true;\n          session.incrementTransactionNumber();\n        }\n        operation.execute(server, session, callbackWithRetry);\n        return;\n      }\n    }\n    operation.execute(server, session, callback);\n  });\n}\nfunction shouldRetryWrite(err) {\n  return err instanceof error_1.MongoError && err.hasErrorLabel('RetryableWriteError');\n}\nfunction supportsRetryableWrites(server) {\n  return server.description.maxWireVersion >= 6 && server.description.logicalSessionTimeoutMinutes && server.description.type !== common_1.ServerType.Standalone;\n}","map":{"version":3,"names":["read_preference_1","require","error_1","operation_1","utils_1","common_1","MMAPv1_RETRY_WRITES_ERROR_CODE","MONGODB_ERROR_CODES","IllegalOperation","MMAPv1_RETRY_WRITES_ERROR_MESSAGE","executeOperation","topology","operation","callback","AbstractOperation","MongoDriverError","maybePromise","cb","shouldCheckForSessionSupport","selectServer","ReadPreference","primaryPreferred","err","session","owner","hasSessionSupport","Symbol","startSession","explicit","hasEnded","snapshotEnabled","capabilities","supportsSnapshotReads","executeWithServerSelection","result","endSession","err2","e","exports","supportsRetryableReads","server","maxWireVersion","readPreference","primary","inTransaction","equals","mode","serverSelectionOptions","callbackWithRetry","undefined","hasReadAspect","hasAspect","Aspect","READ_OPERATION","hasWriteAspect","WRITE_OPERATION","itShouldRetryWrite","shouldRetryWrite","isRetryableError","code","errmsg","match","MongoServerError","message","originalError","supportsRetryableWrites","execute","RETRYABLE","willRetryRead","s","options","retryReads","canRetryRead","willRetryWrite","retryWrites","canRetryWrite","incrementTransactionNumber","MongoError","hasErrorLabel","description","logicalSessionTimeoutMinutes","type","ServerType","Standalone"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\execute_operation.ts"],"sourcesContent":["import { ReadPreference } from '../read_preference';\nimport {\n  MongoError,\n  isRetryableError,\n  MONGODB_ERROR_CODES,\n  MongoDriverError,\n  MongoServerError\n} from '../error';\nimport { Aspect, AbstractOperation } from './operation';\nimport { maxWireVersion, maybePromise, Callback } from '../utils';\nimport { ServerType } from '../sdam/common';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport type { Document } from '../bson';\n\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE =\n  'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n\ntype ResultTypeFromOperation<TOperation> = TOperation extends AbstractOperation<infer K>\n  ? K\n  : never;\n\n/** @internal */\nexport interface ExecutionResult {\n  /** The server selected for the operation */\n  server: Server;\n  /** The session used for this operation, may be implicitly created */\n  session?: ClientSession;\n  /** The raw server response for the operation */\n  response: Document;\n}\n\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @param topology - The topology to execute this operation on\n * @param operation - The operation to execute\n * @param callback - The command result callback\n */\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(topology: Topology, operation: T): Promise<TResult>;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(topology: Topology, operation: T, callback: Callback<TResult>): void;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(topology: Topology, operation: T, callback?: Callback<TResult>): Promise<TResult> | void;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(topology: Topology, operation: T, callback?: Callback<TResult>): Promise<TResult> | void {\n  if (!(operation instanceof AbstractOperation)) {\n    throw new MongoDriverError('This method requires a valid operation instance');\n  }\n\n  return maybePromise(callback, cb => {\n    if (topology.shouldCheckForSessionSupport()) {\n      return topology.selectServer(ReadPreference.primaryPreferred, err => {\n        if (err) return cb(err);\n\n        executeOperation<T, TResult>(topology, operation, cb);\n      });\n    }\n\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session: ClientSession | undefined = operation.session;\n    let owner: symbol | undefined;\n    if (topology.hasSessionSupport()) {\n      if (session == null) {\n        owner = Symbol();\n        session = topology.startSession({ owner, explicit: false });\n      } else if (session.hasEnded) {\n        return cb(new MongoDriverError('Use of expired sessions is not permitted'));\n      } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        return cb(new MongoDriverError('Snapshot reads require MongoDB 5.0 or later'));\n      }\n    } else if (session) {\n      // If the user passed an explicit session and we are still, after server selection,\n      // trying to run against a topology that doesn't support sessions we error out.\n      return cb(new MongoDriverError('Current topology does not support sessions'));\n    }\n\n    try {\n      executeWithServerSelection(topology, session, operation, (err, result) => {\n        if (session && session.owner && session.owner === owner) {\n          return session.endSession(err2 => cb(err2 || err, result));\n        }\n\n        cb(err, result);\n      });\n    } catch (e) {\n      if (session && session.owner && session.owner === owner) {\n        session.endSession();\n      }\n\n      throw e;\n    }\n  });\n}\n\nfunction supportsRetryableReads(server: Server) {\n  return maxWireVersion(server) >= 6;\n}\n\nfunction executeWithServerSelection(\n  topology: Topology,\n  session: ClientSession,\n  operation: AbstractOperation,\n  callback: Callback\n) {\n  const readPreference = operation.readPreference || ReadPreference.primary;\n  const inTransaction = session && session.inTransaction();\n\n  if (inTransaction && !readPreference.equals(ReadPreference.primary)) {\n    callback(\n      new MongoDriverError(\n        `Read preference in a transaction must be primary, not: ${readPreference.mode}`\n      )\n    );\n\n    return;\n  }\n\n  const serverSelectionOptions = { session };\n  function callbackWithRetry(err?: any, result?: any) {\n    if (err == null) {\n      return callback(undefined, result);\n    }\n\n    const hasReadAspect = operation.hasAspect(Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(Aspect.WRITE_OPERATION);\n    const itShouldRetryWrite = shouldRetryWrite(err);\n\n    if ((hasReadAspect && !isRetryableError(err)) || (hasWriteAspect && !itShouldRetryWrite)) {\n      return callback(err);\n    }\n\n    if (\n      hasWriteAspect &&\n      itShouldRetryWrite &&\n      err.code === MMAPv1_RETRY_WRITES_ERROR_CODE &&\n      err.errmsg.match(/Transaction numbers/)\n    ) {\n      callback(\n        new MongoServerError({\n          message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n          errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n          originalError: err\n        })\n      );\n\n      return;\n    }\n\n    // select a new server, and attempt to retry the operation\n    topology.selectServer(readPreference, serverSelectionOptions, (err?: any, server?: any) => {\n      if (\n        err ||\n        (operation.hasAspect(Aspect.READ_OPERATION) && !supportsRetryableReads(server)) ||\n        (operation.hasAspect(Aspect.WRITE_OPERATION) && !supportsRetryableWrites(server))\n      ) {\n        callback(err);\n        return;\n      }\n\n      operation.execute(server, session, callback);\n    });\n  }\n\n  if (\n    readPreference &&\n    !readPreference.equals(ReadPreference.primary) &&\n    session &&\n    session.inTransaction()\n  ) {\n    callback(\n      new MongoDriverError(\n        `Read preference in a transaction must be primary, not: ${readPreference.mode}`\n      )\n    );\n\n    return;\n  }\n\n  // select a server, and execute the operation against it\n  topology.selectServer(readPreference, serverSelectionOptions, (err?: any, server?: any) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (session && operation.hasAspect(Aspect.RETRYABLE)) {\n      const willRetryRead =\n        topology.s.options.retryReads !== false &&\n        !inTransaction &&\n        supportsRetryableReads(server) &&\n        operation.canRetryRead;\n\n      const willRetryWrite =\n        topology.s.options.retryWrites === true &&\n        !inTransaction &&\n        supportsRetryableWrites(server) &&\n        operation.canRetryWrite;\n\n      const hasReadAspect = operation.hasAspect(Aspect.READ_OPERATION);\n      const hasWriteAspect = operation.hasAspect(Aspect.WRITE_OPERATION);\n\n      if ((hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite)) {\n        if (hasWriteAspect && willRetryWrite) {\n          operation.options.willRetryWrite = true;\n          session.incrementTransactionNumber();\n        }\n\n        operation.execute(server, session, callbackWithRetry);\n        return;\n      }\n    }\n\n    operation.execute(server, session, callback);\n  });\n}\n\nfunction shouldRetryWrite(err: any) {\n  return err instanceof MongoError && err.hasErrorLabel('RetryableWriteError');\n}\n\nfunction supportsRetryableWrites(server: Server) {\n  return (\n    server.description.maxWireVersion >= 6 &&\n    server.description.logicalSessionTimeoutMinutes &&\n    server.description.type !== ServerType.Standalone\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}