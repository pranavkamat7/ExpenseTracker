{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst defaultAuthProviders_1 = require(\"./cmap/auth/defaultAuthProviders\");\nconst read_preference_1 = require(\"./read_preference\");\nconst read_concern_1 = require(\"./read_concern\");\nconst write_concern_1 = require(\"./write_concern\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst logger_1 = require(\"./logger\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst encrypter_1 = require(\"./encrypter\");\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoParseError('Cannot resolve empty srv string'));\n  }\n  if (options.srvHost.split('.').length < 3) {\n    return callback(new error_1.MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoParseError('No addresses found at host'));\n    }\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new error_1.MongoParseError('Server record does not share hostname with parent URI'));\n      }\n    }\n    const hostAddresses = addresses.map(r => {\n      var _a;\n      return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n    });\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      var _a, _b;\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n        const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => key !== 'authSource' && key !== 'replicaSet')) {\n          return callback(new error_1.MongoParseError('Text record must only set `authSource` or `replicaSet`'));\n        }\n        const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        if (source === '' || replicaSet === '') {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n        if (!options.userSpecifiedAuthSource && source) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n          });\n        }\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n      }\n      callback(undefined, hostAddresses);\n    });\n  });\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nfunction checkTLSOptions(options) {\n  if (!options) return;\n  const check = (a, b) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) return true;\n  if (FALSEHOODS.has(valueString)) return false;\n  throw new error_1.MongoParseError(`For ${name} Expected stringified boolean value, got: ${value}`);\n}\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUint(name, value) {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction toRecord(value) {\n  const record = Object.create(null);\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (typeof value === 'undefined') {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    try {\n      // try to get a boolean\n      record[key] = getBoolean('', value);\n    } catch {\n      try {\n        // try to get a number\n        record[key] = getInt('', value);\n      } catch {\n        // keep value as a string\n        record[key] = value;\n      }\n    }\n  }\n  return record;\n}\nclass CaseInsensitiveMap extends Map {\n  constructor(entries = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n  var _a, _b;\n  if (typeof mongoClient !== 'undefined' && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (!url.searchParams.has('tls') && !url.searchParams.has('ssl')) {\n      options.tls = true;\n    }\n  }\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n    if (values.includes('')) {\n      throw new error_1.MongoParseError('URI cannot contain options with no value');\n    }\n    if (key.toLowerCase() === 'serverapi') {\n      throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    if (key.toLowerCase() === 'authsource' && urlOptions.has('authSource')) {\n      // If authSource is an explicit key in the urlOptions we need to remove the implicit dbName\n      urlOptions.delete('authSource');\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => (v !== null && v !== void 0 ? v : null) !== null));\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n  for (const key of allKeys) {\n    const values = [];\n    if (objectOptions.has(key)) {\n      values.push(objectOptions.get(key));\n    }\n    if (urlOptions.has(key)) {\n      values.push(...urlOptions.get(key));\n    }\n    if (exports.DEFAULT_OPTIONS.has(key)) {\n      values.push(exports.DEFAULT_OPTIONS.get(key));\n    }\n    allOptions.set(key, values);\n  }\n  const unsupportedOptions = utils_1.setDifference(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS;\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    mongoOptions.credentials.validate();\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  if (allOptions.has('tls')) {\n    if (new Set((_a = allOptions.get('tls')) === null || _a === void 0 ? void 0 : _a.map(getBoolean)).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls must be the same.');\n    }\n  }\n  if (allOptions.has('ssl')) {\n    if (new Set((_b = allOptions.get('ssl')) === null || _b === void 0 ? void 0 : _b.map(getBoolean)).size !== 1) {\n      throw new error_1.MongoParseError('All values of ssl must be the same.');\n    }\n  }\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  if (mongoOptions.directConnection && typeof mongoOptions.srvHost === 'string') {\n    throw new error_1.MongoParseError('directConnection not supported with SRV URI');\n  }\n  // Potential SRV Overrides\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    utils_1.emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] === undefined) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!utils_1.isRecord(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({\n      options,\n      values: [value]\n    }) {\n      return utils_1.makeClientMetadata({\n        ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      if (!utils_1.isRecord(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      var _a, _b;\n      const mechanisms = Object.values(defaultAuthProviders_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      if (typeof value === 'string') {\n        value = toRecord(value);\n      }\n      if (!utils_1.isRecord(value)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: value\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({\n      values: [version]\n    }) {\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({\n      values\n    }) {\n      const compressionList = new Set();\n      for (const compVal of values) {\n        for (const c of compVal.split(',')) {\n          if (['none', 'snappy', 'zlib'].includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoParseError(`${c} is not a valid compression mechanism`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: utils_1.makeClientMetadata(),\n    transform({\n      options,\n      values: [value]\n    }) {\n      var _a, _b;\n      if (!utils_1.isRecord(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return utils_1.makeClientMetadata({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n  },\n  family: {\n    transform({\n      name,\n      values: [value]\n    }) {\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n    transform({\n      values: [value]\n    }) {\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n      utils_1.emitWarning('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n    }\n  },\n\n  loggerLevel: {\n    target: 'logger',\n    transform({\n      values: [value]\n    }) {\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: true,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({\n      values: [value],\n      options\n    }) {\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform({\n      values: [value]\n    }) {\n      if (utils_1.isRecord(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_concern_1.ReadConcern || utils_1.isRecord(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({\n      values: [level],\n      options\n    }) {\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform({\n      values: [value],\n      options\n    }) {\n      var _a, _b, _c;\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if (utils_1.isRecord(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }) {\n      const readPreferenceTags = [];\n      for (const tag of values) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of Object.entries(toRecord(tag))) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (utils_1.isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      if (utils_1.isRecord(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor]) => typeof descriptor.default !== 'undefined').map(([k, d]) => [k, d.default]));","map":{"version":3,"names":["dns","require","fs","mongodb_connection_string_url_1","url_1","defaultAuthProviders_1","read_preference_1","read_concern_1","write_concern_1","error_1","utils_1","mongo_client_1","mongo_credentials_1","logger_1","promise_provider_1","encrypter_1","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","resolveSRVRecord","options","callback","srvHost","MongoParseError","split","length","lookupAddress","resolveSrv","err","addresses","name","hostAddresses","map","r","_a","HostAddress","fromString","port","resolveTxt","record","code","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","source","get","undefined","replicaSet","_b","userSpecifiedAuthSource","credentials","MongoCredentials","merge","userSpecifiedReplicaSet","exports","checkTLSOptions","check","a","b","Reflect","has","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","getInt","Math","trunc","parsedValue","Number","parseInt","isNaN","getUint","toRecord","Object","create","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","parseOptions","uri","mongoClient","MongoClient","url","default","hosts","isSRV","mongoOptions","searchParams","tls","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","values","getAll","includes","objectOptions","filter","allOptions","allKeys","DEFAULT_OPTIONS","push","unsupportedOptions","setDifference","Array","from","OPTIONS","s","size","optionWord","isOrAre","descriptor","setOption","isGssapi","mechanism","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","validate","promiseLibrary","PromiseProvider","directConnection","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","target","type","transform","deprecated","deprecatedMsg","emitWarning","isRecord","transformValue","appName","makeClientMetadata","driverInfo","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","mechanismProperties","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","compressionList","compVal","c","add","connectTimeoutMS","metadata","application","family","fieldsAsRaw","forceServerObjectId","fsync","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","logger","Logger","loggerLevel","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","DEFAULT_PK_FACTORY","createPk","promoteBuffers","promoteLongs","promoteValues","readConcern","ReadConcern","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","_c","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport * as fs from 'fs';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\nimport { AuthMechanism } from './cmap/auth/defaultAuthProviders';\nimport { ReadPreference, ReadPreferenceMode } from './read_preference';\nimport { ReadConcern, ReadConcernLevel } from './read_concern';\nimport { W, WriteConcern } from './write_concern';\nimport { MongoParseError } from './error';\nimport {\n  AnyOptions,\n  Callback,\n  DEFAULT_PK_FACTORY,\n  isRecord,\n  makeClientMetadata,\n  setDifference,\n  HostAddress,\n  emitWarning\n} from './utils';\nimport type { Document } from './bson';\nimport {\n  DriverInfo,\n  MongoClient,\n  MongoClientOptions,\n  MongoOptions,\n  PkFactory,\n  ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport type { TagSet } from './sdam/server_description';\nimport { Logger, LoggerLevel } from './logger';\nimport { PromiseProvider } from './promise_provider';\nimport { Encrypter } from './encrypter';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport function resolveSRVRecord(options: MongoOptions, callback: Callback<HostAddress[]>): void {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new MongoParseError('Cannot resolve empty srv string'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoParseError('No addresses found at host'));\n    }\n\n    for (const { name } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(\n          new MongoParseError('Server record does not share hostname with parent URI')\n        );\n      }\n    }\n\n    const hostAddresses = addresses.map(r =>\n      HostAddress.fromString(`${r.name}:${r.port ?? 27017}`)\n    );\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => key !== 'authSource' && key !== 'replicaSet')) {\n          return callback(\n            new MongoParseError('Text record must only set `authSource` or `replicaSet`')\n          );\n        }\n\n        const source = txtRecordOptions.get('authSource') ?? undefined;\n        const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n\n        if (source === '' || replicaSet === '') {\n          return callback(new MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        if (!options.userSpecifiedAuthSource && source) {\n          options.credentials = MongoCredentials.merge(options.credentials, { source });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nexport function checkTLSOptions(options: AnyOptions): void {\n  if (!options) return;\n  const check = (a: string, b: string) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) return true;\n  if (FALSEHOODS.has(valueString)) return false;\n  throw new MongoParseError(`For ${name} Expected stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name: string, value: unknown): number {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name: string, value: unknown): number {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction toRecord(value: string): Record<string, any> {\n  const record = Object.create(null);\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (typeof value === 'undefined') {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    try {\n      // try to get a boolean\n      record[key] = getBoolean('', value);\n    } catch {\n      try {\n        // try to get a number\n        record[key] = getInt('', value);\n      } catch {\n        // keep value as a string\n        record[key] = value;\n      }\n    }\n  }\n  return record;\n}\n\nclass CaseInsensitiveMap extends Map<string, any> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (typeof mongoClient !== 'undefined' && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (!url.searchParams.has('tls') && !url.searchParams.has('ssl')) {\n      options.tls = true;\n    }\n  }\n\n  const urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new MongoParseError('URI cannot contain options with no value');\n    }\n\n    if (key.toLowerCase() === 'serverapi') {\n      throw new MongoParseError(\n        'URI cannot contain `serverApi`, it can only be passed to the client'\n      );\n    }\n\n    if (key.toLowerCase() === 'authsource' && urlOptions.has('authSource')) {\n      // If authSource is an explicit key in the urlOptions we need to remove the implicit dbName\n      urlOptions.delete('authSource');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(\n    Object.entries(options).filter(([, v]) => (v ?? null) !== null)\n  );\n\n  const allOptions = new CaseInsensitiveMap();\n\n  const allKeys = new Set<string>([\n    ...urlOptions.keys(),\n    ...objectOptions.keys(),\n    ...DEFAULT_OPTIONS.keys()\n  ]);\n\n  for (const key of allKeys) {\n    const values = [];\n    if (objectOptions.has(key)) {\n      values.push(objectOptions.get(key));\n    }\n    if (urlOptions.has(key)) {\n      values.push(...urlOptions.get(key));\n    }\n    if (DEFAULT_OPTIONS.has(key)) {\n      values.push(DEFAULT_OPTIONS.get(key));\n    }\n    allOptions.set(key, values);\n  }\n\n  const unsupportedOptions = setDifference(\n    allKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    if (\n      (isGssapi || isX509) &&\n      allOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `${mongoOptions.credentials} can only have authSource set to '$external'`\n      );\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate();\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  if (allOptions.has('tls')) {\n    if (new Set(allOptions.get('tls')?.map(getBoolean)).size !== 1) {\n      throw new MongoParseError('All values of tls must be the same.');\n    }\n  }\n\n  if (allOptions.has('ssl')) {\n    if (new Set(allOptions.get('ssl')?.map(getBoolean)).size !== 1) {\n      throw new MongoParseError('All values of ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(mongoOptions);\n\n  if (options.promiseLibrary) PromiseProvider.set(options.promiseLibrary);\n\n  if (mongoOptions.directConnection && typeof mongoOptions.srvHost === 'string') {\n    throw new MongoParseError('directConnection not supported with SRV URI');\n  }\n\n  // Potential SRV Overrides\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  return mongoOptions;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform, deprecated } = descriptor;\n  const name = target ?? key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] === undefined) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({ options, values: [value] }): DriverInfo {\n      return makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        mechanism === AuthMechanism.MONGODB_GSSAPI ||\n        mechanism === AuthMechanism.MONGODB_AWS ||\n        mechanism === AuthMechanism.MONGODB_X509\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      if (typeof value === 'string') {\n        value = toRecord(value);\n      }\n      if (!isRecord(value)) {\n        throw new MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return MongoCredentials.merge(options.credentials, { mechanismProperties: value });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as string[]) {\n        for (const c of compVal.split(',')) {\n          if (['none', 'snappy', 'zlib'].includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoParseError(`${c} is not a valid compression mechanism`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: makeClientMetadata(),\n    transform({ options, values: [value] }) {\n      if (!isRecord(value)) throw new MongoParseError('DriverInfo must be an object');\n      return makeClientMetadata({\n        driverInfo: value,\n        appName: options.metadata?.application?.name\n      });\n    }\n  },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new Logger('MongoClient'),\n    transform({ values: [value] }) {\n      if (value instanceof Logger) {\n        return value;\n      }\n      emitWarning('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform({ values: [value] }) {\n      return new Logger('MongoClient', { loggerLevel: value as LoggerLevel });\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: true,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({ values, options }) {\n      const readPreferenceTags = [];\n      for (const tag of values) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of Object.entries(toRecord(tag))) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  } as OptionDescriptor,\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => typeof descriptor.default !== 'undefined')\n    .map(([k, d]) => [k, d.default])\n);\n"],"mappings":";;;;;;AAAA,MAAAA,GAAA,GAAAC,OAAA;AACA,MAAAC,EAAA,GAAAD,OAAA;AACA,MAAAE,+BAAA,GAAAF,OAAA;AACA,MAAAG,KAAA,GAAAH,OAAA;AACA,MAAAI,sBAAA,GAAAJ,OAAA;AACA,MAAAK,iBAAA,GAAAL,OAAA;AACA,MAAAM,cAAA,GAAAN,OAAA;AACA,MAAAO,eAAA,GAAAP,OAAA;AACA,MAAAQ,OAAA,GAAAR,OAAA;AACA,MAAAS,OAAA,GAAAT,OAAA;AAWA,MAAAU,cAAA,GAAAV,OAAA;AASA,MAAAW,mBAAA,GAAAX,OAAA;AAEA,MAAAY,QAAA,GAAAZ,OAAA;AACA,MAAAa,kBAAA,GAAAb,OAAA;AACA,MAAAc,WAAA,GAAAd,OAAA;AAEA;;;;;;;;AAQA,SAASe,mBAAmBA,CAACC,UAAkB,EAAEC,YAAoB;EACnE,MAAMC,KAAK,GAAG,QAAQ;EACtB,MAAMC,GAAG,GAAG,IAAIH,UAAU,CAACI,OAAO,CAACF,KAAK,EAAE,EAAE,CAAC,EAAE;EAC/C,MAAMG,MAAM,GAAG,IAAIJ,YAAY,CAACG,OAAO,CAACF,KAAK,EAAE,EAAE,CAAC,EAAE;EACpD,OAAOC,GAAG,CAACG,QAAQ,CAACD,MAAM,CAAC;AAC7B;AAEA;;;;;;;AAOA,SAAgBE,gBAAgBA,CAACC,OAAqB,EAAEC,QAAiC;EACvF,IAAI,OAAOD,OAAO,CAACE,OAAO,KAAK,QAAQ,EAAE;IACvC,OAAOD,QAAQ,CAAC,IAAIjB,OAAA,CAAAmB,eAAe,CAAC,iCAAiC,CAAC,CAAC;;EAGzE,IAAIH,OAAO,CAACE,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;IACzC,OAAOJ,QAAQ,CAAC,IAAIjB,OAAA,CAAAmB,eAAe,CAAC,iDAAiD,CAAC,CAAC;;EAGzF;EACA,MAAMG,aAAa,GAAGN,OAAO,CAACE,OAAO;EACrC3B,GAAG,CAACgC,UAAU,CAAC,iBAAiBD,aAAa,EAAE,EAAE,CAACE,GAAG,EAAEC,SAAS,KAAI;IAClE,IAAID,GAAG,EAAE,OAAOP,QAAQ,CAACO,GAAG,CAAC;IAE7B,IAAIC,SAAS,CAACJ,MAAM,KAAK,CAAC,EAAE;MAC1B,OAAOJ,QAAQ,CAAC,IAAIjB,OAAA,CAAAmB,eAAe,CAAC,4BAA4B,CAAC,CAAC;;IAGpE,KAAK,MAAM;MAAEO;IAAI,CAAE,IAAID,SAAS,EAAE;MAChC,IAAI,CAAClB,mBAAmB,CAACmB,IAAI,EAAEJ,aAAa,CAAC,EAAE;QAC7C,OAAOL,QAAQ,CACb,IAAIjB,OAAA,CAAAmB,eAAe,CAAC,uDAAuD,CAAC,CAC7E;;;IAIL,MAAMQ,aAAa,GAAGF,SAAS,CAACG,GAAG,CAACC,CAAC,IAAG;MAAA,IAAAC,EAAA;MACtC,OAAA7B,OAAA,CAAA8B,WAAW,CAACC,UAAU,CAAC,GAAGH,CAAC,CAACH,IAAI,IAAI,CAAAI,EAAA,GAAAD,CAAC,CAACI,IAAI,cAAAH,EAAA,cAAAA,EAAA,GAAI,KAAK,EAAE,CAAC;IAAA,EACvD;IAED;IACAvC,GAAG,CAAC2C,UAAU,CAACZ,aAAa,EAAE,CAACE,GAAG,EAAEW,MAAM,KAAI;;MAC5C,IAAIX,GAAG,EAAE;QACP,IAAIA,GAAG,CAACY,IAAI,KAAK,SAAS,IAAIZ,GAAG,CAACY,IAAI,KAAK,WAAW,EAAE;UACtD,OAAOnB,QAAQ,CAACO,GAAG,CAAC;;OAEvB,MAAM;QACL,IAAIW,MAAM,CAACd,MAAM,GAAG,CAAC,EAAE;UACrB,OAAOJ,QAAQ,CAAC,IAAIjB,OAAA,CAAAmB,eAAe,CAAC,mCAAmC,CAAC,CAAC;;QAG3E,MAAMkB,gBAAgB,GAAG,IAAI1C,KAAA,CAAA2C,eAAe,CAACH,MAAM,CAAC,CAAC,CAAC,CAACI,IAAI,CAAC,EAAE,CAAC,CAAC;QAChE,MAAMC,mBAAmB,GAAG,CAAC,GAAGH,gBAAgB,CAACI,IAAI,EAAE,CAAC;QACxD,IAAID,mBAAmB,CAACE,IAAI,CAACC,GAAG,IAAIA,GAAG,KAAK,YAAY,IAAIA,GAAG,KAAK,YAAY,CAAC,EAAE;UACjF,OAAO1B,QAAQ,CACb,IAAIjB,OAAA,CAAAmB,eAAe,CAAC,wDAAwD,CAAC,CAC9E;;QAGH,MAAMyB,MAAM,GAAG,CAAAd,EAAA,GAAAO,gBAAgB,CAACQ,GAAG,CAAC,YAAY,CAAC,cAAAf,EAAA,cAAAA,EAAA,GAAIgB,SAAS;QAC9D,MAAMC,UAAU,GAAG,CAAAC,EAAA,GAAAX,gBAAgB,CAACQ,GAAG,CAAC,YAAY,CAAC,cAAAG,EAAA,cAAAA,EAAA,GAAIF,SAAS;QAElE,IAAIF,MAAM,KAAK,EAAE,IAAIG,UAAU,KAAK,EAAE,EAAE;UACtC,OAAO9B,QAAQ,CAAC,IAAIjB,OAAA,CAAAmB,eAAe,CAAC,gDAAgD,CAAC,CAAC;;QAGxF,IAAI,CAACH,OAAO,CAACiC,uBAAuB,IAAIL,MAAM,EAAE;UAC9C5B,OAAO,CAACkC,WAAW,GAAG/C,mBAAA,CAAAgD,gBAAgB,CAACC,KAAK,CAACpC,OAAO,CAACkC,WAAW,EAAE;YAAEN;UAAM,CAAE,CAAC;;QAG/E,IAAI,CAAC5B,OAAO,CAACqC,uBAAuB,IAAIN,UAAU,EAAE;UAClD/B,OAAO,CAAC+B,UAAU,GAAGA,UAAU;;;MAInC9B,QAAQ,CAAC6B,SAAS,EAAEnB,aAAa,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AApEA2B,OAAA,CAAAvC,gBAAA,GAAAA,gBAAA;AAsEA;;;;;;AAMA,SAAgBwC,eAAeA,CAACvC,OAAmB;EACjD,IAAI,CAACA,OAAO,EAAE;EACd,MAAMwC,KAAK,GAAGA,CAACC,CAAS,EAAEC,CAAS,KAAI;IACrC,IAAIC,OAAO,CAACC,GAAG,CAAC5C,OAAO,EAAEyC,CAAC,CAAC,IAAIE,OAAO,CAACC,GAAG,CAAC5C,OAAO,EAAE0C,CAAC,CAAC,EAAE;MACtD,MAAM,IAAI1D,OAAA,CAAAmB,eAAe,CAAC,QAAQsC,CAAC,iCAAiCC,CAAC,GAAG,CAAC;;EAE7E,CAAC;EACDF,KAAK,CAAC,aAAa,EAAE,6BAA6B,CAAC;EACnDA,KAAK,CAAC,aAAa,EAAE,0BAA0B,CAAC;EAChDA,KAAK,CAAC,aAAa,EAAE,sCAAsC,CAAC;EAC5DA,KAAK,CAAC,aAAa,EAAE,6BAA6B,CAAC;EACnDA,KAAK,CAAC,6BAA6B,EAAE,sCAAsC,CAAC;EAC5EA,KAAK,CAAC,6BAA6B,EAAE,6BAA6B,CAAC;EACnEA,KAAK,CAAC,sCAAsC,EAAE,6BAA6B,CAAC;AAC9E;AAdAF,OAAA,CAAAC,eAAA,GAAAA,eAAA;AAgBA,MAAMM,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;AACtD,MAAMC,UAAU,GAAG,IAAID,GAAG,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAChE,SAASE,UAAUA,CAACtC,IAAY,EAAEuC,KAAc;EAC9C,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE,OAAOA,KAAK;EAC5C,MAAMC,WAAW,GAAGC,MAAM,CAACF,KAAK,CAAC,CAACG,WAAW,EAAE;EAC/C,IAAIP,MAAM,CAACD,GAAG,CAACM,WAAW,CAAC,EAAE,OAAO,IAAI;EACxC,IAAIH,UAAU,CAACH,GAAG,CAACM,WAAW,CAAC,EAAE,OAAO,KAAK;EAC7C,MAAM,IAAIlE,OAAA,CAAAmB,eAAe,CAAC,OAAOO,IAAI,6CAA6CuC,KAAK,EAAE,CAAC;AAC5F;AAEA,SAASI,MAAMA,CAAC3C,IAAY,EAAEuC,KAAc;EAC1C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAOK,IAAI,CAACC,KAAK,CAACN,KAAK,CAAC;EACvD,MAAMO,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACP,MAAM,CAACF,KAAK,CAAC,EAAE,EAAE,CAAC;EACtD,IAAI,CAACQ,MAAM,CAACE,KAAK,CAACH,WAAW,CAAC,EAAE,OAAOA,WAAW;EAClD,MAAM,IAAIxE,OAAA,CAAAmB,eAAe,CAAC,YAAYO,IAAI,sCAAsCuC,KAAK,EAAE,CAAC;AAC1F;AAEA,SAASW,OAAOA,CAAClD,IAAY,EAAEuC,KAAc;EAC3C,MAAMO,WAAW,GAAGH,MAAM,CAAC3C,IAAI,EAAEuC,KAAK,CAAC;EACvC,IAAIO,WAAW,GAAG,CAAC,EAAE;IACnB,MAAM,IAAIxE,OAAA,CAAAmB,eAAe,CAAC,GAAGO,IAAI,2CAA2CuC,KAAK,EAAE,CAAC;;EAEtF,OAAOO,WAAW;AACpB;AAEA,SAASK,QAAQA,CAACZ,KAAa;EAC7B,MAAM9B,MAAM,GAAG2C,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMC,aAAa,GAAGf,KAAK,CAAC7C,KAAK,CAAC,GAAG,CAAC;EACtC,KAAK,MAAM6D,QAAQ,IAAID,aAAa,EAAE;IACpC,MAAM,CAACrC,GAAG,EAAEsB,KAAK,CAAC,GAAGgB,QAAQ,CAAC7D,KAAK,CAAC,GAAG,CAAC;IACxC,IAAI,OAAO6C,KAAK,KAAK,WAAW,EAAE;MAChC,MAAM,IAAIjE,OAAA,CAAAmB,eAAe,CAAC,iDAAiD,CAAC;;IAE9E,IAAI;MACF;MACAgB,MAAM,CAACQ,GAAG,CAAC,GAAGqB,UAAU,CAAC,EAAE,EAAEC,KAAK,CAAC;KACpC,CAAC,MAAM;MACN,IAAI;QACF;QACA9B,MAAM,CAACQ,GAAG,CAAC,GAAG0B,MAAM,CAAC,EAAE,EAAEJ,KAAK,CAAC;OAChC,CAAC,MAAM;QACN;QACA9B,MAAM,CAACQ,GAAG,CAAC,GAAGsB,KAAK;;;;EAIzB,OAAO9B,MAAM;AACf;AAEA,MAAM+C,kBAAmB,SAAQC,GAAgB;EAC/CC,YAAYC,OAAA,GAAgC,EAAE;IAC5C,KAAK,CAACA,OAAO,CAACzD,GAAG,CAAC,CAAC,CAAC0D,CAAC,EAAEC,CAAC,CAAC,KAAK,CAACD,CAAC,CAAClB,WAAW,EAAE,EAAEmB,CAAC,CAAC,CAAC,CAAC;EACtD;EACA3B,GAAGA,CAAC0B,CAAS;IACX,OAAO,KAAK,CAAC1B,GAAG,CAAC0B,CAAC,CAAClB,WAAW,EAAE,CAAC;EACnC;EACAvB,GAAGA,CAACyC,CAAS;IACX,OAAO,KAAK,CAACzC,GAAG,CAACyC,CAAC,CAAClB,WAAW,EAAE,CAAC;EACnC;EACAoB,GAAGA,CAACF,CAAS,EAAEC,CAAM;IACnB,OAAO,KAAK,CAACC,GAAG,CAACF,CAAC,CAAClB,WAAW,EAAE,EAAEmB,CAAC,CAAC;EACtC;EACAE,MAAMA,CAACH,CAAS;IACd,OAAO,KAAK,CAACG,MAAM,CAACH,CAAC,CAAClB,WAAW,EAAE,CAAC;EACtC;;AAGF,SAAgBsB,YAAYA,CAC1BC,GAAW,EACXC,WAAA,GAA4D9C,SAAS,EACrE9B,OAAA,GAA8B,EAAE;;EAEhC,IAAI,OAAO4E,WAAW,KAAK,WAAW,IAAI,EAAEA,WAAW,YAAY1F,cAAA,CAAA2F,WAAW,CAAC,EAAE;IAC/E7E,OAAO,GAAG4E,WAAW;IACrBA,WAAW,GAAG9C,SAAS;;EAGzB,MAAMgD,GAAG,GAAG,IAAIpG,+BAAA,CAAAqG,OAAgB,CAACJ,GAAG,CAAC;EACrC,MAAM;IAAEK,KAAK;IAAEC;EAAK,CAAE,GAAGH,GAAG;EAE5B,MAAMI,YAAY,GAAGpB,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACxCmB,YAAY,CAACF,KAAK,GAAGC,KAAK,GAAG,EAAE,GAAGD,KAAK,CAACpE,GAAG,CAAC3B,OAAA,CAAA8B,WAAW,CAACC,UAAU,CAAC;EACnE,IAAIiE,KAAK,EAAE;IACT;IACAC,YAAY,CAAChF,OAAO,GAAG8E,KAAK,CAAC,CAAC,CAAC;IAC/B,IAAI,CAACF,GAAG,CAACK,YAAY,CAACvC,GAAG,CAAC,KAAK,CAAC,IAAI,CAACkC,GAAG,CAACK,YAAY,CAACvC,GAAG,CAAC,KAAK,CAAC,EAAE;MAChE5C,OAAO,CAACoF,GAAG,GAAG,IAAI;;;EAItB,MAAMC,UAAU,GAAG,IAAInB,kBAAkB,EAAE;EAE3C,IAAIY,GAAG,CAACQ,QAAQ,KAAK,GAAG,IAAIR,GAAG,CAACQ,QAAQ,KAAK,EAAE,EAAE;IAC/C,MAAMC,MAAM,GAAGC,kBAAkB,CAC/BV,GAAG,CAACQ,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGR,GAAG,CAACQ,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,GAAGX,GAAG,CAACQ,QAAQ,CAC/D;IACD,IAAIC,MAAM,EAAE;MACVF,UAAU,CAACb,GAAG,CAAC,QAAQ,EAAE,CAACe,MAAM,CAAC,CAAC;;;EAItC,IAAIT,GAAG,CAACY,QAAQ,KAAK,EAAE,EAAE;IACvB,MAAMC,IAAI,GAAa;MACrBD,QAAQ,EAAEF,kBAAkB,CAACV,GAAG,CAACY,QAAQ;KAC1C;IAED,IAAI,OAAOZ,GAAG,CAACc,QAAQ,KAAK,QAAQ,EAAE;MACpCD,IAAI,CAACC,QAAQ,GAAGJ,kBAAkB,CAACV,GAAG,CAACc,QAAQ,CAAC;;IAGlDP,UAAU,CAACb,GAAG,CAAC,MAAM,EAAE,CAACmB,IAAI,CAAC,CAAC;;EAGhC,KAAK,MAAMhE,GAAG,IAAImD,GAAG,CAACK,YAAY,CAAC1D,IAAI,EAAE,EAAE;IACzC,MAAMoE,MAAM,GAAG,CAAC,GAAGf,GAAG,CAACK,YAAY,CAACW,MAAM,CAACnE,GAAG,CAAC,CAAC;IAEhD,IAAIkE,MAAM,CAACE,QAAQ,CAAC,EAAE,CAAC,EAAE;MACvB,MAAM,IAAI/G,OAAA,CAAAmB,eAAe,CAAC,0CAA0C,CAAC;;IAGvE,IAAIwB,GAAG,CAACyB,WAAW,EAAE,KAAK,WAAW,EAAE;MACrC,MAAM,IAAIpE,OAAA,CAAAmB,eAAe,CACvB,qEAAqE,CACtE;;IAGH,IAAIwB,GAAG,CAACyB,WAAW,EAAE,KAAK,YAAY,IAAIiC,UAAU,CAACzC,GAAG,CAAC,YAAY,CAAC,EAAE;MACtE;MACAyC,UAAU,CAACZ,MAAM,CAAC,YAAY,CAAC;;IAGjC,IAAI,CAACY,UAAU,CAACzC,GAAG,CAACjB,GAAG,CAAC,EAAE;MACxB0D,UAAU,CAACb,GAAG,CAAC7C,GAAG,EAAEkE,MAAM,CAAC;;;EAI/B,MAAMG,aAAa,GAAG,IAAI9B,kBAAkB,CAC1CJ,MAAM,CAACO,OAAO,CAACrE,OAAO,CAAC,CAACiG,MAAM,CAAC,CAAC,GAAG1B,CAAC,CAAC,KAAK,CAACA,CAAC,aAADA,CAAC,cAADA,CAAC,GAAI,IAAI,MAAM,IAAI,CAAC,CAChE;EAED,MAAM2B,UAAU,GAAG,IAAIhC,kBAAkB,EAAE;EAE3C,MAAMiC,OAAO,GAAG,IAAIrD,GAAG,CAAS,CAC9B,GAAGuC,UAAU,CAAC5D,IAAI,EAAE,EACpB,GAAGuE,aAAa,CAACvE,IAAI,EAAE,EACvB,GAAGa,OAAA,CAAA8D,eAAe,CAAC3E,IAAI,EAAE,CAC1B,CAAC;EAEF,KAAK,MAAME,GAAG,IAAIwE,OAAO,EAAE;IACzB,MAAMN,MAAM,GAAG,EAAE;IACjB,IAAIG,aAAa,CAACpD,GAAG,CAACjB,GAAG,CAAC,EAAE;MAC1BkE,MAAM,CAACQ,IAAI,CAACL,aAAa,CAACnE,GAAG,CAACF,GAAG,CAAC,CAAC;;IAErC,IAAI0D,UAAU,CAACzC,GAAG,CAACjB,GAAG,CAAC,EAAE;MACvBkE,MAAM,CAACQ,IAAI,CAAC,GAAGhB,UAAU,CAACxD,GAAG,CAACF,GAAG,CAAC,CAAC;;IAErC,IAAIW,OAAA,CAAA8D,eAAe,CAACxD,GAAG,CAACjB,GAAG,CAAC,EAAE;MAC5BkE,MAAM,CAACQ,IAAI,CAAC/D,OAAA,CAAA8D,eAAe,CAACvE,GAAG,CAACF,GAAG,CAAC,CAAC;;IAEvCuE,UAAU,CAAC1B,GAAG,CAAC7C,GAAG,EAAEkE,MAAM,CAAC;;EAG7B,MAAMS,kBAAkB,GAAGrH,OAAA,CAAAsH,aAAa,CACtCJ,OAAO,EACPK,KAAK,CAACC,IAAI,CAAC3C,MAAM,CAACrC,IAAI,CAACa,OAAA,CAAAoE,OAAO,CAAC,CAAC,CAAC9F,GAAG,CAAC+F,CAAC,IAAIA,CAAC,CAACvD,WAAW,EAAE,CAAC,CAC3D;EACD,IAAIkD,kBAAkB,CAACM,IAAI,KAAK,CAAC,EAAE;IACjC,MAAMC,UAAU,GAAGP,kBAAkB,CAACM,IAAI,GAAG,CAAC,GAAG,SAAS,GAAG,QAAQ;IACrE,MAAME,OAAO,GAAGR,kBAAkB,CAACM,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI;IAC1D,MAAM,IAAI5H,OAAA,CAAAmB,eAAe,CACvB,GAAG0G,UAAU,IAAIL,KAAK,CAACC,IAAI,CAACH,kBAAkB,CAAC,CAAC/E,IAAI,CAAC,IAAI,CAAC,IAAIuF,OAAO,gBAAgB,CACtF;;EAGH,KAAK,MAAM,CAACnF,GAAG,EAAEoF,UAAU,CAAC,IAAIjD,MAAM,CAACO,OAAO,CAAC/B,OAAA,CAAAoE,OAAO,CAAC,EAAE;IACvD,MAAMb,MAAM,GAAGK,UAAU,CAACrE,GAAG,CAACF,GAAG,CAAC;IAClC,IAAI,CAACkE,MAAM,IAAIA,MAAM,CAACxF,MAAM,KAAK,CAAC,EAAE;IACpC2G,SAAS,CAAC9B,YAAY,EAAEvD,GAAG,EAAEoF,UAAU,EAAElB,MAAM,CAAC;;EAGlD,IAAIX,YAAY,CAAChD,WAAW,EAAE;IAC5B,MAAM+E,QAAQ,GAAG/B,YAAY,CAAChD,WAAW,CAACgF,SAAS,KAAKtI,sBAAA,CAAAuI,aAAa,CAACC,cAAc;IACpF,MAAMC,MAAM,GAAGnC,YAAY,CAAChD,WAAW,CAACgF,SAAS,KAAKtI,sBAAA,CAAAuI,aAAa,CAACG,YAAY;IAChF,MAAMC,KAAK,GAAGrC,YAAY,CAAChD,WAAW,CAACgF,SAAS,KAAKtI,sBAAA,CAAAuI,aAAa,CAACK,WAAW;IAC9E,IACE,CAACP,QAAQ,IAAII,MAAM,KACnBnB,UAAU,CAACtD,GAAG,CAAC,YAAY,CAAC,IAC5BsC,YAAY,CAAChD,WAAW,CAACN,MAAM,KAAK,WAAW,EAC/C;MACA;MACA,MAAM,IAAI5C,OAAA,CAAAmB,eAAe,CACvB,GAAG+E,YAAY,CAAChD,WAAW,8CAA8C,CAC1E;;IAGH,IAAI,EAAE+E,QAAQ,IAAII,MAAM,IAAIE,KAAK,CAAC,IAAIrC,YAAY,CAACK,MAAM,IAAI,CAACW,UAAU,CAACtD,GAAG,CAAC,YAAY,CAAC,EAAE;MAC1F;MACA;MACAsC,YAAY,CAAChD,WAAW,GAAG/C,mBAAA,CAAAgD,gBAAgB,CAACC,KAAK,CAAC8C,YAAY,CAAChD,WAAW,EAAE;QAC1EN,MAAM,EAAEsD,YAAY,CAACK;OACtB,CAAC;;IAGJL,YAAY,CAAChD,WAAW,CAACuF,QAAQ,EAAE;;EAGrC,IAAI,CAACvC,YAAY,CAACK,MAAM,EAAE;IACxB;IACAL,YAAY,CAACK,MAAM,GAAG,MAAM;;EAG9B,IAAIW,UAAU,CAACtD,GAAG,CAAC,KAAK,CAAC,EAAE;IACzB,IAAI,IAAIE,GAAG,CAAC,CAAAhC,EAAA,GAAAoF,UAAU,CAACrE,GAAG,CAAC,KAAK,CAAC,cAAAf,EAAA,uBAAAA,EAAA,CAAEF,GAAG,CAACoC,UAAU,CAAC,CAAC,CAAC4D,IAAI,KAAK,CAAC,EAAE;MAC9D,MAAM,IAAI5H,OAAA,CAAAmB,eAAe,CAAC,qCAAqC,CAAC;;;EAIpE,IAAI+F,UAAU,CAACtD,GAAG,CAAC,KAAK,CAAC,EAAE;IACzB,IAAI,IAAIE,GAAG,CAAC,CAAAd,EAAA,GAAAkE,UAAU,CAACrE,GAAG,CAAC,KAAK,CAAC,cAAAG,EAAA,uBAAAA,EAAA,CAAEpB,GAAG,CAACoC,UAAU,CAAC,CAAC,CAAC4D,IAAI,KAAK,CAAC,EAAE;MAC9D,MAAM,IAAI5H,OAAA,CAAAmB,eAAe,CAAC,qCAAqC,CAAC;;;EAIpEoC,eAAe,CAAC2C,YAAY,CAAC;EAE7B,IAAIlF,OAAO,CAAC0H,cAAc,EAAErI,kBAAA,CAAAsI,eAAe,CAACnD,GAAG,CAACxE,OAAO,CAAC0H,cAAc,CAAC;EAEvE,IAAIxC,YAAY,CAAC0C,gBAAgB,IAAI,OAAO1C,YAAY,CAAChF,OAAO,KAAK,QAAQ,EAAE;IAC7E,MAAM,IAAIlB,OAAA,CAAAmB,eAAe,CAAC,6CAA6C,CAAC;;EAG1E;EACA+E,YAAY,CAACjD,uBAAuB,GAClC+D,aAAa,CAACpD,GAAG,CAAC,YAAY,CAAC,IAAIyC,UAAU,CAACzC,GAAG,CAAC,YAAY,CAAC;EACjEsC,YAAY,CAAC7C,uBAAuB,GAClC2D,aAAa,CAACpD,GAAG,CAAC,YAAY,CAAC,IAAIyC,UAAU,CAACzC,GAAG,CAAC,YAAY,CAAC;EAEjE,IAAIgC,WAAW,IAAIM,YAAY,CAAC2C,cAAc,EAAE;IAC9CvI,WAAA,CAAAwI,SAAS,CAACC,kBAAkB,EAAE;IAC9B7C,YAAY,CAAC8C,SAAS,GAAG,IAAI1I,WAAA,CAAAwI,SAAS,CAAClD,WAAW,EAAED,GAAG,EAAE3E,OAAO,CAAC;IACjEkF,YAAY,CAAC+C,aAAa,GAAG/C,YAAY,CAAC8C,SAAS,CAACC,aAAa;;EAGnE,OAAO/C,YAAY;AACrB;AAjLA5C,OAAA,CAAAoC,YAAA,GAAAA,YAAA;AAmLA,SAASsC,SAASA,CAChB9B,YAAiB,EACjBvD,GAAW,EACXoF,UAA4B,EAC5BlB,MAAiB;EAEjB,MAAM;IAAEqC,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAEC;EAAU,CAAE,GAAGtB,UAAU;EAC1D,MAAMrG,IAAI,GAAGwH,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIvG,GAAG;EAE1B,IAAI0G,UAAU,EAAE;IACd,MAAMC,aAAa,GAAG,OAAOD,UAAU,KAAK,QAAQ,GAAG,KAAKA,UAAU,EAAE,GAAG,EAAE;IAC7EpJ,OAAA,CAAAsJ,WAAW,CAAC,GAAG5G,GAAG,0BAA0B2G,aAAa,EAAE,CAAC;;EAG9D,QAAQH,IAAI;IACV,KAAK,SAAS;MACZjD,YAAY,CAACxE,IAAI,CAAC,GAAGsC,UAAU,CAACtC,IAAI,EAAEmF,MAAM,CAAC,CAAC,CAAC,CAAC;MAChD;IACF,KAAK,KAAK;MACRX,YAAY,CAACxE,IAAI,CAAC,GAAG2C,MAAM,CAAC3C,IAAI,EAAEmF,MAAM,CAAC,CAAC,CAAC,CAAC;MAC5C;IACF,KAAK,MAAM;MACTX,YAAY,CAACxE,IAAI,CAAC,GAAGkD,OAAO,CAAClD,IAAI,EAAEmF,MAAM,CAAC,CAAC,CAAC,CAAC;MAC7C;IACF,KAAK,QAAQ;MACX,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK/D,SAAS,EAAE;QAC3B;;MAEFoD,YAAY,CAACxE,IAAI,CAAC,GAAGyC,MAAM,CAAC0C,MAAM,CAAC,CAAC,CAAC,CAAC;MACtC;IACF,KAAK,QAAQ;MACX,IAAI,CAAC5G,OAAA,CAAAuJ,QAAQ,CAAC3C,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACxB,MAAM,IAAI7G,OAAA,CAAAmB,eAAe,CAAC,GAAGO,IAAI,oBAAoB,CAAC;;MAExDwE,YAAY,CAACxE,IAAI,CAAC,GAAGmF,MAAM,CAAC,CAAC,CAAC;MAC9B;IACF,KAAK,KAAK;MACRX,YAAY,CAACxE,IAAI,CAAC,GAAGmF,MAAM,CAAC,CAAC,CAAC;MAC9B;IACF;MAAS;QACP,IAAI,CAACuC,SAAS,EAAE;UACd,MAAM,IAAIpJ,OAAA,CAAAmB,eAAe,CAAC,oDAAoD,CAAC;;QAEjF,MAAMsI,cAAc,GAAGL,SAAS,CAAC;UAAE1H,IAAI;UAAEV,OAAO,EAAEkF,YAAY;UAAEW;QAAM,CAAE,CAAC;QACzEX,YAAY,CAACxE,IAAI,CAAC,GAAG+H,cAAc;QACnC;;;AAGN;AAgBanG,OAAA,CAAAoE,OAAO,GAAG;EACrBgC,OAAO,EAAE;IACPR,MAAM,EAAE,UAAU;IAClBE,SAASA,CAAC;MAAEpI,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACpC,OAAOhE,OAAA,CAAA0J,kBAAkB,CAAC;QAAE,GAAG3I,OAAO,CAAC4I,UAAU;QAAEF,OAAO,EAAEvF,MAAM,CAACF,KAAK;MAAC,CAAE,CAAC;IAC9E;GACD;EACD0C,IAAI,EAAE;IACJuC,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAE1H,IAAI;MAAEV,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,IAAI,CAAChE,OAAA,CAAAuJ,QAAQ,CAACvF,KAAK,EAAE,CAAC,UAAU,EAAE,UAAU,CAAU,CAAC,EAAE;QACvD,MAAM,IAAIjE,OAAA,CAAAmB,eAAe,CACvB,GAAGO,IAAI,8DAA8D,CACtE;;MAEH,OAAOvB,mBAAA,CAAAgD,gBAAgB,CAACC,KAAK,CAACpC,OAAO,CAACkC,WAAW,EAAE;QACjDwD,QAAQ,EAAEzC,KAAK,CAACyC,QAAQ;QACxBE,QAAQ,EAAE3C,KAAK,CAAC2C;OACjB,CAAC;IACJ;GACD;EACDiD,aAAa,EAAE;IACbX,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAEpI,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;;MACpC,MAAM6F,UAAU,GAAGhF,MAAM,CAAC+B,MAAM,CAACjH,sBAAA,CAAAuI,aAAa,CAAC;MAC/C,MAAM,CAACD,SAAS,CAAC,GAAG4B,UAAU,CAAC7C,MAAM,CAAC8C,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACC,MAAM,CAAC9F,MAAM,CAAC+F,GAAG,KAAKjG,KAAK,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;MAC1F,IAAI,CAACiE,SAAS,EAAE;QACd,MAAM,IAAIlI,OAAA,CAAAmB,eAAe,CAAC,wBAAwB2I,UAAU,SAAS7F,KAAK,EAAE,CAAC;;MAE/E,IAAIrB,MAAM,GAAG,CAAAd,EAAA,GAAAd,OAAO,CAACkC,WAAW,cAAApB,EAAA,uBAAAA,EAAA,CAAEc,MAAM;MACxC,IACEsF,SAAS,KAAKtI,sBAAA,CAAAuI,aAAa,CAACgC,aAAa,IACzCjC,SAAS,KAAKtI,sBAAA,CAAAuI,aAAa,CAACC,cAAc,IAC1CF,SAAS,KAAKtI,sBAAA,CAAAuI,aAAa,CAACK,WAAW,IACvCN,SAAS,KAAKtI,sBAAA,CAAAuI,aAAa,CAACG,YAAY,EACxC;QACA;QACA1F,MAAM,GAAG,WAAW;;MAGtB,IAAIgE,QAAQ,GAAG,CAAA5D,EAAA,GAAAhC,OAAO,CAACkC,WAAW,cAAAF,EAAA,uBAAAA,EAAA,CAAE4D,QAAQ;MAC5C,IAAIsB,SAAS,KAAKtI,sBAAA,CAAAuI,aAAa,CAACG,YAAY,IAAI1B,QAAQ,KAAK,EAAE,EAAE;QAC/DA,QAAQ,GAAG9D,SAAS;;MAEtB,OAAO3C,mBAAA,CAAAgD,gBAAgB,CAACC,KAAK,CAACpC,OAAO,CAACkC,WAAW,EAAE;QACjDgF,SAAS;QACTtF,MAAM;QACNgE;OACD,CAAC;IACJ;GACD;EACDwD,uBAAuB,EAAE;IACvBlB,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAEpI,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACpC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7BA,KAAK,GAAGY,QAAQ,CAACZ,KAAK,CAAC;;MAEzB,IAAI,CAAChE,OAAA,CAAAuJ,QAAQ,CAACvF,KAAK,CAAC,EAAE;QACpB,MAAM,IAAIjE,OAAA,CAAAmB,eAAe,CAAC,2CAA2C,CAAC;;MAExE,OAAOhB,mBAAA,CAAAgD,gBAAgB,CAACC,KAAK,CAACpC,OAAO,CAACkC,WAAW,EAAE;QAAEmH,mBAAmB,EAAEpG;MAAK,CAAE,CAAC;IACpF;GACD;EACDqG,UAAU,EAAE;IACVpB,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAEpI,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACpC,MAAMrB,MAAM,GAAGuB,MAAM,CAACF,KAAK,CAAC;MAC5B,OAAO9D,mBAAA,CAAAgD,gBAAgB,CAACC,KAAK,CAACpC,OAAO,CAACkC,WAAW,EAAE;QAAEN;MAAM,CAAE,CAAC;IAChE;GACD;EACDiG,cAAc,EAAE;IACdM,IAAI,EAAE;GACP;EACDoB,UAAU,EAAE;IACVpB,IAAI,EAAE;GACP;EACDqB,SAAS,EAAE;IACTtB,MAAM,EAAE,WAAW;IACnBE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC4D,OAAO;IAAC,CAAE;MAC7B,MAAMC,mBAAmB,GACvB,OAAOD,OAAO,KAAK,QAAQ,GAAI;QAAEA;MAAO,CAAgB,GAAIA,OAAqB;MACnF,MAAME,iBAAiB,GAAGD,mBAAmB,IAAIA,mBAAmB,CAACD,OAAO;MAC5E,IAAI,CAACE,iBAAiB,EAAE;QACtB,MAAM,IAAI3K,OAAA,CAAAmB,eAAe,CACvB,qFAAqF2D,MAAM,CAAC+B,MAAM,CAChG3G,cAAA,CAAA0K,gBAAgB,CACjB,CAACrI,IAAI,CAAC,MAAM,CAAC,IAAI,CACnB;;MAEH,IAAI,CAACuC,MAAM,CAAC+B,MAAM,CAAC3G,cAAA,CAAA0K,gBAAgB,CAAC,CAAClI,IAAI,CAAC6C,CAAC,IAAIA,CAAC,KAAKoF,iBAAiB,CAAC,EAAE;QACvE,MAAM,IAAI3K,OAAA,CAAAmB,eAAe,CACvB,8BAA8BwJ,iBAAiB,sCAAsC7F,MAAM,CAAC+B,MAAM,CAChG3G,cAAA,CAAA0K,gBAAgB,CACjB,CAACrI,IAAI,CAAC,MAAM,CAAC,IAAI,CACnB;;MAEH,OAAOmI,mBAAmB;IAC5B;GACD;EACDG,SAAS,EAAE;IACT1B,IAAI,EAAE;GACP;EACD2B,WAAW,EAAE;IACX/E,OAAO,EAAE,MAAM;IACfmD,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAEvC;IAAM,CAAE;MAClB,MAAMkE,eAAe,GAAG,IAAIjH,GAAG,EAAE;MACjC,KAAK,MAAMkH,OAAO,IAAInE,MAAkB,EAAE;QACxC,KAAK,MAAMoE,CAAC,IAAID,OAAO,CAAC5J,KAAK,CAAC,GAAG,CAAC,EAAE;UAClC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC2F,QAAQ,CAAC5C,MAAM,CAAC8G,CAAC,CAAC,CAAC,EAAE;YAClDF,eAAe,CAACG,GAAG,CAAC/G,MAAM,CAAC8G,CAAC,CAAC,CAAC;WAC/B,MAAM;YACL,MAAM,IAAIjL,OAAA,CAAAmB,eAAe,CAAC,GAAG8J,CAAC,uCAAuC,CAAC;;;;MAI5E,OAAO,CAAC,GAAGF,eAAe,CAAC;IAC7B;GACD;EACDI,gBAAgB,EAAE;IAChBpF,OAAO,EAAE,KAAK;IACdoD,IAAI,EAAE;GACP;EACD5C,MAAM,EAAE;IACN4C,IAAI,EAAE;GACP;EACDP,gBAAgB,EAAE;IAChB7C,OAAO,EAAE,KAAK;IACdoD,IAAI,EAAE;GACP;EACDS,UAAU,EAAE;IACVV,MAAM,EAAE,UAAU;IAClBnD,OAAO,EAAE9F,OAAA,CAAA0J,kBAAkB,EAAE;IAC7BP,SAASA,CAAC;MAAEpI,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;;MACpC,IAAI,CAAChE,OAAA,CAAAuJ,QAAQ,CAACvF,KAAK,CAAC,EAAE,MAAM,IAAIjE,OAAA,CAAAmB,eAAe,CAAC,8BAA8B,CAAC;MAC/E,OAAOlB,OAAA,CAAA0J,kBAAkB,CAAC;QACxBC,UAAU,EAAE3F,KAAK;QACjByF,OAAO,EAAE,CAAA1G,EAAA,IAAAlB,EAAA,GAAAd,OAAO,CAACoK,QAAQ,cAAAtJ,EAAA,uBAAAA,EAAA,CAAEuJ,WAAW,cAAArI,EAAA,uBAAAA,EAAA,CAAEtB;OACzC,CAAC;IACJ;GACD;EACD4J,MAAM,EAAE;IACNlC,SAASA,CAAC;MAAE1H,IAAI;MAAEmF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC,MAAMwF,cAAc,GAAGpF,MAAM,CAAC3C,IAAI,EAAEuC,KAAK,CAAC;MAC1C,IAAIwF,cAAc,KAAK,CAAC,IAAIA,cAAc,KAAK,CAAC,EAAE;QAChD,OAAOA,cAAc;;MAEvB,MAAM,IAAIzJ,OAAA,CAAAmB,eAAe,CAAC,sCAAsCsI,cAAc,GAAG,CAAC;IACpF;GACD;EACD8B,WAAW,EAAE;IACXpC,IAAI,EAAE;GACP;EACDqC,mBAAmB,EAAE;IACnBzF,OAAO,EAAE,KAAK;IACdoD,IAAI,EAAE;GACP;EACDsC,KAAK,EAAE;IACLpC,UAAU,EAAE,4BAA4B;IACxCH,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAE1H,IAAI;MAAEV,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAMyH,EAAE,GAAG3L,eAAA,CAAA4L,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAG7K,OAAO,CAAC6K,YAAY;UACvBJ,KAAK,EAAEzH,UAAU,CAACtC,IAAI,EAAEuC,KAAK;;OAEhC,CAAC;MACF,IAAI,CAACyH,EAAE,EAAE,MAAM,IAAI1L,OAAA,CAAAmB,eAAe,CAAC,4CAA4C8C,KAAK,EAAE,CAAC;MACvF,OAAOyH,EAAE;IACX;GACmB;EACrBI,oBAAoB,EAAE;IACpB/F,OAAO,EAAE,KAAK;IACdoD,IAAI,EAAE;GACP;EACD4C,eAAe,EAAE;IACf5C,IAAI,EAAE;GACP;EACD6C,CAAC,EAAE;IACD3C,UAAU,EAAE,4BAA4B;IACxCH,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAE1H,IAAI;MAAEV,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAMyH,EAAE,GAAG3L,eAAA,CAAA4L,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAG7K,OAAO,CAAC6K,YAAY;UACvBI,OAAO,EAAEjI,UAAU,CAACtC,IAAI,EAAEuC,KAAK;;OAElC,CAAC;MACF,IAAI,CAACyH,EAAE,EAAE,MAAM,IAAI1L,OAAA,CAAAmB,eAAe,CAAC,8CAA8C8C,KAAK,EAAE,CAAC;MACzF,OAAOyH,EAAE;IACX;GACmB;EACrBO,OAAO,EAAE;IACP/C,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAE1H,IAAI;MAAEV,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAMyH,EAAE,GAAG3L,eAAA,CAAA4L,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAG7K,OAAO,CAAC6K,YAAY;UACvBI,OAAO,EAAEjI,UAAU,CAACtC,IAAI,EAAEuC,KAAK;;OAElC,CAAC;MACF,IAAI,CAACyH,EAAE,EAAE,MAAM,IAAI1L,OAAA,CAAAmB,eAAe,CAAC,8CAA8C8C,KAAK,EAAE,CAAC;MACzF,OAAOyH,EAAE;IACX;GACD;EACDQ,SAAS,EAAE;IACTnG,OAAO,EAAE,IAAI;IACboD,IAAI,EAAE;GACP;EACDgD,qBAAqB,EAAE;IACrBpG,OAAO,EAAE,MAAM;IACfoD,IAAI,EAAE;GACP;EACDiD,gBAAgB,EAAE;IAChBrG,OAAO,EAAE,EAAE;IACXoD,IAAI,EAAE;GACP;EACDkD,MAAM,EAAE;IACNtG,OAAO,EAAE,IAAI3F,QAAA,CAAAkM,MAAM,CAAC,aAAa,CAAC;IAClClD,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,IAAIA,KAAK,YAAY7D,QAAA,CAAAkM,MAAM,EAAE;QAC3B,OAAOrI,KAAK;;MAEdhE,OAAA,CAAAsJ,WAAW,CAAC,4CAA4C,CAAC;MACzD;MACA;IACF;GACD;;EACDgD,WAAW,EAAE;IACXrD,MAAM,EAAE,QAAQ;IAChBE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAO,IAAI7D,QAAA,CAAAkM,MAAM,CAAC,aAAa,EAAE;QAAEC,WAAW,EAAEtI;MAAoB,CAAE,CAAC;IACzE;GACD;EACDuI,aAAa,EAAE;IACbzG,OAAO,EAAE,CAAC;IACVoD,IAAI,EAAE;GACP;EACDsD,WAAW,EAAE;IACX1G,OAAO,EAAE,GAAG;IACZoD,IAAI,EAAE;GACP;EACDuD,mBAAmB,EAAE;IACnBxD,MAAM,EAAE,gBAAgB;IACxBE,SAASA,CAAC;MAAE1H,IAAI;MAAEV,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAMyI,mBAAmB,GAAG9H,OAAO,CAAClD,IAAI,EAAEuC,KAAK,CAAC;MAChD,IAAIjD,OAAO,CAAC2L,cAAc,EAAE;QAC1B,OAAO9M,iBAAA,CAAA+M,cAAc,CAAChB,WAAW,CAAC;UAChCe,cAAc,EAAE;YAAE,GAAG3L,OAAO,CAAC2L,cAAc;YAAED;UAAmB;SACjE,CAAC;OACH,MAAM;QACL,OAAO,IAAI7M,iBAAA,CAAA+M,cAAc,CAAC,WAAW,EAAE9J,SAAS,EAAE;UAAE4J;QAAmB,CAAE,CAAC;;IAE9E;GACD;EACDG,qBAAqB,EAAE;IACrB1D,IAAI,EAAE;GACP;EACD2D,WAAW,EAAE;IACX/G,OAAO,EAAE,CAAC;IACVoD,IAAI,EAAE;GACP;EACD4D,uBAAuB,EAAE;IACvBhH,OAAO,EAAE,GAAG;IACZoD,IAAI,EAAE;GACP;EACD6D,eAAe,EAAE;IACfjH,OAAO,EAAE,IAAI;IACboD,IAAI,EAAE;GACP;EACDzH,IAAI,EAAE;IACJwH,MAAM,EAAE,YAAY;IACpBE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAEjD;IAAO,CAAE;MACpC,OAAO;QAAE,GAAGA,OAAO,CAAC4I,UAAU;QAAElI,IAAI,EAAEyC,MAAM,CAACF,KAAK;MAAC,CAAE;IACvD;GACmB;EACrBgJ,OAAO,EAAE;IACPlH,OAAO,EAAE,IAAI;IACboD,IAAI,EAAE;GACP;EACD+D,SAAS,EAAE;IACTnH,OAAO,EAAE9F,OAAA,CAAAkN,kBAAkB;IAC3B/D,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,IAAIhE,OAAA,CAAAuJ,QAAQ,CAACvF,KAAK,EAAE,CAAC,UAAU,CAAU,CAAC,IAAI,OAAOA,KAAK,CAACmJ,QAAQ,KAAK,UAAU,EAAE;QAClF,OAAOnJ,KAAkB;;MAE3B,MAAM,IAAIjE,OAAA,CAAAmB,eAAe,CACvB,oEAAoE8C,KAAK,EAAE,CAC5E;IACH;GACD;EACDyE,cAAc,EAAE;IACdW,UAAU,EAAE,IAAI;IAChBF,IAAI,EAAE;GACP;EACDkE,cAAc,EAAE;IACdlE,IAAI,EAAE;GACP;EACDmE,YAAY,EAAE;IACZnE,IAAI,EAAE;GACP;EACDoE,aAAa,EAAE;IACbpE,IAAI,EAAE;GACP;EACDe,GAAG,EAAE;IACHnE,OAAO,EAAE,KAAK;IACdoD,IAAI,EAAE;GACP;EACDqE,WAAW,EAAE;IACXpE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAEjD;IAAO,CAAE;MACpC,IAAIiD,KAAK,YAAYnE,cAAA,CAAA2N,WAAW,IAAIxN,OAAA,CAAAuJ,QAAQ,CAACvF,KAAK,EAAE,CAAC,OAAO,CAAU,CAAC,EAAE;QACvE,OAAOnE,cAAA,CAAA2N,WAAW,CAAC7B,WAAW,CAAC;UAAE,GAAG5K,OAAO,CAACwM,WAAW;UAAE,GAAGvJ;QAAK,CAAS,CAAC;;MAE7E,MAAM,IAAIjE,OAAA,CAAAmB,eAAe,CAAC,sCAAsCuM,IAAI,CAACC,SAAS,CAAC1J,KAAK,CAAC,EAAE,CAAC;IAC1F;GACD;EACD2J,gBAAgB,EAAE;IAChB1E,MAAM,EAAE,aAAa;IACrBE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAACgH,KAAK,CAAC;MAAE7M;IAAO,CAAE;MACpC,OAAOlB,cAAA,CAAA2N,WAAW,CAAC7B,WAAW,CAAC;QAC7B,GAAG5K,OAAO,CAACwM,WAAW;QACtBK,KAAK,EAAEA;OACR,CAAC;IACJ;GACD;EACDlB,cAAc,EAAE;IACd5G,OAAO,EAAElG,iBAAA,CAAA+M,cAAc,CAACkB,OAAO;IAC/B1E,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAEjD;IAAO,CAAE;;MACpC,IAAIiD,KAAK,YAAYpE,iBAAA,CAAA+M,cAAc,EAAE;QACnC,OAAO/M,iBAAA,CAAA+M,cAAc,CAAChB,WAAW,CAAC;UAChCe,cAAc,EAAE;YAAE,GAAG3L,OAAO,CAAC2L,cAAc;YAAE,GAAG1I;UAAK,CAAE;UACvD,GAAGA;SACG,CAAC;;MAEX,IAAIhE,OAAA,CAAAuJ,QAAQ,CAACvF,KAAK,EAAE,CAAC,MAAM,CAAU,CAAC,EAAE;QACtC,MAAM8J,EAAE,GAAGlO,iBAAA,CAAA+M,cAAc,CAAChB,WAAW,CAAC;UACpCe,cAAc,EAAE;YAAE,GAAG3L,OAAO,CAAC2L,cAAc;YAAE,GAAG1I;UAAK,CAAE;UACvD,GAAGA;SACG,CAAC;QACT,IAAI8J,EAAE,EAAE,OAAOA,EAAE,CAAC,KACb,MAAM,IAAI/N,OAAA,CAAAmB,eAAe,CAAC,oCAAoCuM,IAAI,CAACC,SAAS,CAAC1J,KAAK,CAAC,EAAE,CAAC;;MAE7F,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM+J,MAAM,GAAG;UACbC,KAAK,EAAE,CAAAnM,EAAA,GAAAd,OAAO,CAAC2L,cAAc,cAAA7K,EAAA,uBAAAA,EAAA,CAAEmM,KAAK;UACpCvB,mBAAmB,EAAE,CAAA1J,EAAA,GAAAhC,OAAO,CAAC2L,cAAc,cAAA3J,EAAA,uBAAAA,EAAA,CAAE0J;SAC9C;QACD,OAAO,IAAI7M,iBAAA,CAAA+M,cAAc,CACvB3I,KAA2B,EAC3B,CAAAiK,EAAA,GAAAlN,OAAO,CAAC2L,cAAc,cAAAuB,EAAA,uBAAAA,EAAA,CAAEC,IAAI,EAC5BH,MAAM,CACP;;IAEL;GACD;EACDI,kBAAkB,EAAE;IAClBlF,MAAM,EAAE,gBAAgB;IACxBE,SAASA,CAAC;MAAEvC,MAAM;MAAE7F;IAAO,CAAE;MAC3B,MAAMoN,kBAAkB,GAAG,EAAE;MAC7B,KAAK,MAAMC,GAAG,IAAIxH,MAAM,EAAE;QACxB,MAAMyH,iBAAiB,GAAWxJ,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACrD,IAAI,OAAOsJ,GAAG,KAAK,QAAQ,EAAE;UAC3B,KAAK,MAAM,CAAC/I,CAAC,EAAEC,CAAC,CAAC,IAAIT,MAAM,CAACO,OAAO,CAACR,QAAQ,CAACwJ,GAAG,CAAC,CAAC,EAAE;YAClDC,iBAAiB,CAAChJ,CAAC,CAAC,GAAGC,CAAC;;;QAG5B,IAAItF,OAAA,CAAAuJ,QAAQ,CAAC6E,GAAG,CAAC,EAAE;UACjB,KAAK,MAAM,CAAC/I,CAAC,EAAEC,CAAC,CAAC,IAAIT,MAAM,CAACO,OAAO,CAACgJ,GAAG,CAAC,EAAE;YACxCC,iBAAiB,CAAChJ,CAAC,CAAC,GAAGC,CAAC;;;QAG5B6I,kBAAkB,CAAC/G,IAAI,CAACiH,iBAAiB,CAAC;;MAE5C,OAAOzO,iBAAA,CAAA+M,cAAc,CAAChB,WAAW,CAAC;QAChCe,cAAc,EAAE3L,OAAO,CAAC2L,cAAc;QACtCyB;OACD,CAAC;IACJ;GACD;EACDrL,UAAU,EAAE;IACVoG,IAAI,EAAE;GACP;EACDoF,UAAU,EAAE;IACVxI,OAAO,EAAE,IAAI;IACboD,IAAI,EAAE;GACP;EACDqF,WAAW,EAAE;IACXzI,OAAO,EAAE,IAAI;IACboD,IAAI,EAAE;GACP;EACDsF,kBAAkB,EAAE;IAClBtF,IAAI,EAAE;GACP;EACDuF,wBAAwB,EAAE;IACxB3I,OAAO,EAAE,KAAK;IACdoD,IAAI,EAAE;GACP;EACDwF,UAAU,EAAE;IACVxF,IAAI,EAAE;GACP;EACDyF,eAAe,EAAE;IACf7I,OAAO,EAAE,CAAC;IACVoD,IAAI,EAAE;GACP;EACD0F,GAAG,EAAE;IACH3F,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE;GACP;EACD2F,KAAK,EAAE;IACL5F,MAAM,EAAE,IAAI;IACZE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAOxE,EAAE,CAACsP,YAAY,CAAC5K,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE+K,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDC,MAAM,EAAE;IACN/F,MAAM,EAAE,KAAK;IACbE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAOxE,EAAE,CAACsP,YAAY,CAAC5K,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE+K,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDE,OAAO,EAAE;IACPhG,MAAM,EAAE,MAAM;IACdE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAOxE,EAAE,CAACsP,YAAY,CAAC5K,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE+K,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDG,MAAM,EAAE;IACNjG,MAAM,EAAE,KAAK;IACbE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAOxE,EAAE,CAACsP,YAAY,CAAC5K,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE+K,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDI,OAAO,EAAE;IACP/F,UAAU,EAAE,IAAI;IAChBH,MAAM,EAAE,YAAY;IACpBC,IAAI,EAAE;GACP;EACDkG,WAAW,EAAE;IACXnG,MAAM,EAAE,oBAAoB;IAC5BC,IAAI,EAAE;GACP;EACD/C,GAAG,EAAE;IACH+C,IAAI,EAAE;GACP;EACDmG,2BAA2B,EAAE;IAC3BpG,MAAM,EAAE,oBAAoB;IAC5BE,SAASA,CAAC;MAAE1H,IAAI;MAAEmF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC;MACA,OAAO,CAACD,UAAU,CAACtC,IAAI,EAAEuC,KAAK,CAAC;IACjC;GACD;EACDsL,wBAAwB,EAAE;IACxBrG,MAAM,EAAE,qBAAqB;IAC7BE,SAASA,CAAC;MAAE1H,IAAI;MAAEmF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC;MACA,OAAOD,UAAU,CAACtC,IAAI,EAAEuC,KAAK,CAAC,GAAG,MAAMnB,SAAS,GAAGA,SAAS;IAC9D;GACD;EACD0M,SAAS,EAAE;IACTtG,MAAM,EAAE,IAAI;IACZE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAOxE,EAAE,CAACsP,YAAY,CAAC5K,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE+K,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDS,kBAAkB,EAAE;IAClBvG,MAAM,EAAE,MAAM;IACdE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAOxE,EAAE,CAACsP,YAAY,CAAC5K,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE+K,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDU,qBAAqB,EAAE;IACrBxG,MAAM,EAAE,KAAK;IACbE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAOxE,EAAE,CAACsP,YAAY,CAAC5K,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE+K,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDW,6BAA6B,EAAE;IAC7BzG,MAAM,EAAE,YAAY;IACpBC,IAAI,EAAE;GACP;EACDyG,WAAW,EAAE;IACXxG,SAASA,CAAC;MAAE1H,IAAI;MAAEV,OAAO;MAAE6F,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAM2L,WAAW,GAAG5L,UAAU,CAACtC,IAAI,EAAEuC,KAAK,CAAC;MAC3C,IAAI2L,WAAW,EAAE;QACf5O,OAAO,CAAC6O,mBAAmB,GAAG,MAAM/M,SAAS;QAC7C9B,OAAO,CAAC8O,kBAAkB,GAAG,KAAK;OACnC,MAAM;QACL9O,OAAO,CAAC6O,mBAAmB,GAAG7O,OAAO,CAACuO,wBAAwB,GAC1D,MAAMzM,SAAS,GACfA,SAAS;QACb9B,OAAO,CAAC8O,kBAAkB,GAAG9O,OAAO,CAACsO,2BAA2B,GAAG,KAAK,GAAG,IAAI;;MAEjF,OAAOM,WAAW;IACpB;GACD;EACDG,CAAC,EAAE;IACD7G,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAEjD;IAAO,CAAE;MACpC,OAAOjB,eAAA,CAAA4L,YAAY,CAACC,WAAW,CAAC;QAAEC,YAAY,EAAE;UAAE,GAAG7K,OAAO,CAAC6K,YAAY;UAAEkE,CAAC,EAAE9L;QAAU;MAAE,CAAE,CAAC;IAC/F;GACD;EACD+L,kBAAkB,EAAE;IAClBjK,OAAO,EAAE,CAAC;IACVoD,IAAI,EAAE;GACP;EACD0C,YAAY,EAAE;IACZ3C,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAEjD;IAAO,CAAE;MACpC,IAAIf,OAAA,CAAAuJ,QAAQ,CAACvF,KAAK,CAAC,IAAIA,KAAK,YAAYlE,eAAA,CAAA4L,YAAY,EAAE;QACpD,OAAO5L,eAAA,CAAA4L,YAAY,CAACC,WAAW,CAAC;UAC9BC,YAAY,EAAE;YACZ,GAAG7K,OAAO,CAAC6K,YAAY;YACvB,GAAG5H;;SAEN,CAAC;OACH,MAAM,IAAIA,KAAK,KAAK,UAAU,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC5D,OAAOlE,eAAA,CAAA4L,YAAY,CAACC,WAAW,CAAC;UAC9BC,YAAY,EAAE;YACZ,GAAG7K,OAAO,CAAC6K,YAAY;YACvBkE,CAAC,EAAE9L;;SAEN,CAAC;;MAGJ,MAAM,IAAIjE,OAAA,CAAAmB,eAAe,CAAC,sCAAsCuM,IAAI,CAACC,SAAS,CAAC1J,KAAK,CAAC,EAAE,CAAC;IAC1F;GACmB;EACrBgM,QAAQ,EAAE;IACR5G,UAAU,EAAE,+BAA+B;IAC3CH,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAEjD;IAAO,CAAE;MACpC,MAAM0K,EAAE,GAAG3L,eAAA,CAAA4L,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAG7K,OAAO,CAAC6K,YAAY;UACvBoE,QAAQ,EAAErL,OAAO,CAAC,UAAU,EAAEX,KAAK;;OAEtC,CAAC;MACF,IAAIyH,EAAE,EAAE,OAAOA,EAAE;MACjB,MAAM,IAAI1L,OAAA,CAAAmB,eAAe,CAAC,wCAAwC,CAAC;IACrE;GACmB;EACrB+O,UAAU,EAAE;IACVhH,MAAM,EAAE,cAAc;IACtBE,SAASA,CAAC;MAAEvC,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAEjD;IAAO,CAAE;MACpC,MAAM0K,EAAE,GAAG3L,eAAA,CAAA4L,YAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAG7K,OAAO,CAAC6K,YAAY;UACvBqE,UAAU,EAAEtL,OAAO,CAAC,YAAY,EAAEX,KAAK;;OAE1C,CAAC;MACF,IAAIyH,EAAE,EAAE,OAAOA,EAAE;MACjB,MAAM,IAAI1L,OAAA,CAAAmB,eAAe,CAAC,wCAAwC,CAAC;IACrE;GACD;EACDgP,oBAAoB,EAAE;IACpBpK,OAAO,EAAE,CAAC;IACVoD,IAAI,EAAE;GACP;EACD;EACAiH,cAAc,EAAE;IAAEjH,IAAI,EAAE;EAAK,CAAE;EAC/BkH,SAAS,EAAE;IAAElH,IAAI,EAAE;EAAK,CAAE;EAC1B;EACAmH,SAAS,EAAE;IAAEnH,IAAI,EAAE;EAAK,CAAE;EAC1BoH,WAAW,EAAE;IAAEpH,IAAI,EAAE;EAAK,CAAE;EAC5BqH,aAAa,EAAE;IAAErH,IAAI,EAAE;EAAK,CAAE;EAC9BsH,WAAW,EAAE;IAAEtH,IAAI,EAAE;EAAK,CAAE;EAC5BuH,WAAW,EAAE;IAAEvH,IAAI,EAAE;EAAK,CAAE;EAC5B2G,kBAAkB,EAAE;IAAE3G,IAAI,EAAE;EAAK,CAAE;EACnC0G,mBAAmB,EAAE;IAAE1G,IAAI,EAAE;EAAK,CAAE;EACpCwH,aAAa,EAAE;IAAExH,IAAI,EAAE;EAAK,CAAE;EAC9ByH,WAAW,EAAE;IAAEzH,IAAI,EAAE;EAAK,CAAE;EAC5B0H,OAAO,EAAE;IAAE1H,IAAI,EAAE;EAAK,CAAE;EACxB2H,WAAW,EAAE;IAAE3H,IAAI,EAAE;EAAK,CAAE;EAC5B4H,YAAY,EAAE;IAAE5H,IAAI,EAAE;EAAK,CAAE;EAC7B6H,SAAS,EAAE;IAAE7H,IAAI,EAAE;EAAK,CAAE;EAC1B8H,KAAK,EAAE;IAAE9H,IAAI,EAAE;EAAK,CAAE;EACtB+H,MAAM,EAAE;IAAE/H,IAAI,EAAE;EAAK,CAAE;EACvBgI,EAAE,EAAE;IAAEhI,IAAI,EAAE;EAAK,CAAE;EACnBiI,IAAI,EAAE;IAAEjI,IAAI,EAAE;EAAK,CAAE;EACrBkI,OAAO,EAAE;IAAElI,IAAI,EAAE;EAAK,CAAE;EACxBmI,GAAG,EAAE;IAAEnI,IAAI,EAAE;EAAK,CAAE;EACpBoI,SAAS,EAAE;IAAEpI,IAAI,EAAE;EAAK,CAAE;EAC1BxG,GAAG,EAAE;IAAEwG,IAAI,EAAE;EAAK,CAAE;EACpBqI,UAAU,EAAE;IAAErI,IAAI,EAAE;EAAK,CAAE;EAC3BsI,GAAG,EAAE;IAAEtI,IAAI,EAAE;EAAK,CAAE;EACpBuI,cAAc,EAAE;IAAEvI,IAAI,EAAE;EAAK,CAAE;EAC/BwI,KAAK,EAAE;IAAExI,IAAI,EAAE;EAAK,CAAE;EACtB;EACAyI,eAAe,EAAE;IAAEzI,IAAI,EAAE;EAAS,CAAsB;EACxD0I,kBAAkB,EAAE;IAAE1I,IAAI,EAAE;EAAS;CACgB;AAE1C7F,OAAA,CAAA8D,eAAe,GAAG,IAAIlC,kBAAkB,CACnDJ,MAAM,CAACO,OAAO,CAAC/B,OAAA,CAAAoE,OAAO,CAAC,CACpBT,MAAM,CAAC,CAAC,GAAGc,UAAU,CAAC,KAAK,OAAOA,UAAU,CAAChC,OAAO,KAAK,WAAW,CAAC,CACrEnE,GAAG,CAAC,CAAC,CAAC0D,CAAC,EAAEwM,CAAC,CAAC,KAAK,CAACxM,CAAC,EAAEwM,CAAC,CAAC/L,OAAO,CAAC,CAAC,CACnC"},"metadata":{},"sourceType":"script","externalDependencies":[]}