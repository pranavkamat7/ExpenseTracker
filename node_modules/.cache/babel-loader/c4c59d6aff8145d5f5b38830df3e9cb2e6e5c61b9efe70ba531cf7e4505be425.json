{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareDocs = exports.indexInformation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nfunction indexInformation(db, name, _optionsOrCallback, _callback) {\n  let options = _optionsOrCallback;\n  let callback = _callback;\n  if ('function' === typeof _optionsOrCallback) {\n    callback = _optionsOrCallback;\n    options = {};\n  }\n  // If we specified full information\n  const full = options.full == null ? false : options.full;\n  // Did the user destroy the topology\n  if (utils_1.getTopology(db).isDestroyed()) return callback(new error_1.MongoDriverError('topology was destroyed'));\n  // Process all the results from the index command and collection\n  function processResults(indexes) {\n    // Contains all the information\n    const info = {};\n    // Process all the indexes\n    for (let i = 0; i < indexes.length; i++) {\n      const index = indexes[i];\n      // Let's unpack the object\n      info[index.name] = [];\n      for (const name in index.key) {\n        info[index.name].push([name, index.key[name]]);\n      }\n    }\n    return info;\n  }\n  // Get the list of indexes of the specified collection\n  db.collection(name).listIndexes(options).toArray((err, indexes) => {\n    if (err) return callback(err);\n    if (!Array.isArray(indexes)) return callback(undefined, []);\n    if (full) return callback(undefined, indexes);\n    callback(undefined, processResults(indexes));\n  });\n}\nexports.indexInformation = indexInformation;\nfunction prepareDocs(coll, docs, options) {\n  var _a;\n  const forceServerObjectId = typeof options.forceServerObjectId === 'boolean' ? options.forceServerObjectId : (_a = coll.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId;\n  // no need to modify the docs if server sets the ObjectId\n  if (forceServerObjectId === true) {\n    return docs;\n  }\n  return docs.map(doc => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n    return doc;\n  });\n}\nexports.prepareDocs = prepareDocs;","map":{"version":3,"names":["error_1","require","utils_1","indexInformation","db","name","_optionsOrCallback","_callback","options","callback","full","getTopology","isDestroyed","MongoDriverError","processResults","indexes","info","i","length","index","key","push","collection","listIndexes","toArray","err","Array","isArray","undefined","exports","prepareDocs","coll","docs","forceServerObjectId","_a","s","map","doc","_id","pkFactory","createPk"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\common_functions.ts"],"sourcesContent":["import { MongoDriverError } from '../error';\nimport { Callback, getTopology } from '../utils';\nimport type { Document } from '../bson';\nimport type { Db } from '../db';\nimport type { ClientSession } from '../sessions';\nimport type { ReadPreference } from '../read_preference';\nimport type { Collection } from '../collection';\n\n/** @public */\nexport interface IndexInformationOptions {\n  full?: boolean;\n  readPreference?: ReadPreference;\n  session?: ClientSession;\n}\n/**\n * Retrieves this collections index info.\n *\n * @param db - The Db instance on which to retrieve the index info.\n * @param name - The name of the collection.\n */\nexport function indexInformation(db: Db, name: string, callback: Callback): void;\nexport function indexInformation(\n  db: Db,\n  name: string,\n  options: IndexInformationOptions,\n  callback?: Callback\n): void;\nexport function indexInformation(\n  db: Db,\n  name: string,\n  _optionsOrCallback: IndexInformationOptions | Callback,\n  _callback?: Callback\n): void {\n  let options = _optionsOrCallback as IndexInformationOptions;\n  let callback = _callback as Callback;\n  if ('function' === typeof _optionsOrCallback) {\n    callback = _optionsOrCallback as Callback;\n    options = {};\n  }\n  // If we specified full information\n  const full = options.full == null ? false : options.full;\n\n  // Did the user destroy the topology\n  if (getTopology(db).isDestroyed())\n    return callback(new MongoDriverError('topology was destroyed'));\n  // Process all the results from the index command and collection\n  function processResults(indexes: any) {\n    // Contains all the information\n    const info: any = {};\n    // Process all the indexes\n    for (let i = 0; i < indexes.length; i++) {\n      const index = indexes[i];\n      // Let's unpack the object\n      info[index.name] = [];\n      for (const name in index.key) {\n        info[index.name].push([name, index.key[name]]);\n      }\n    }\n\n    return info;\n  }\n\n  // Get the list of indexes of the specified collection\n  db.collection(name)\n    .listIndexes(options)\n    .toArray((err, indexes) => {\n      if (err) return callback(err);\n      if (!Array.isArray(indexes)) return callback(undefined, []);\n      if (full) return callback(undefined, indexes);\n      callback(undefined, processResults(indexes));\n    });\n}\n\nexport function prepareDocs(\n  coll: Collection,\n  docs: Document[],\n  options: { forceServerObjectId?: boolean }\n): Document[] {\n  const forceServerObjectId =\n    typeof options.forceServerObjectId === 'boolean'\n      ? options.forceServerObjectId\n      : coll.s.db.options?.forceServerObjectId;\n\n  // no need to modify the docs if server sets the ObjectId\n  if (forceServerObjectId === true) {\n    return docs;\n  }\n\n  return docs.map(doc => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n\n    return doc;\n  });\n}\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AA0BA,SAAgBE,gBAAgBA,CAC9BC,EAAM,EACNC,IAAY,EACZC,kBAAsD,EACtDC,SAAoB;EAEpB,IAAIC,OAAO,GAAGF,kBAA6C;EAC3D,IAAIG,QAAQ,GAAGF,SAAqB;EACpC,IAAI,UAAU,KAAK,OAAOD,kBAAkB,EAAE;IAC5CG,QAAQ,GAAGH,kBAA8B;IACzCE,OAAO,GAAG,EAAE;;EAEd;EACA,MAAME,IAAI,GAAGF,OAAO,CAACE,IAAI,IAAI,IAAI,GAAG,KAAK,GAAGF,OAAO,CAACE,IAAI;EAExD;EACA,IAAIR,OAAA,CAAAS,WAAW,CAACP,EAAE,CAAC,CAACQ,WAAW,EAAE,EAC/B,OAAOH,QAAQ,CAAC,IAAIT,OAAA,CAAAa,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;EACjE;EACA,SAASC,cAAcA,CAACC,OAAY;IAClC;IACA,MAAMC,IAAI,GAAQ,EAAE;IACpB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAME,KAAK,GAAGJ,OAAO,CAACE,CAAC,CAAC;MACxB;MACAD,IAAI,CAACG,KAAK,CAACd,IAAI,CAAC,GAAG,EAAE;MACrB,KAAK,MAAMA,IAAI,IAAIc,KAAK,CAACC,GAAG,EAAE;QAC5BJ,IAAI,CAACG,KAAK,CAACd,IAAI,CAAC,CAACgB,IAAI,CAAC,CAAChB,IAAI,EAAEc,KAAK,CAACC,GAAG,CAACf,IAAI,CAAC,CAAC,CAAC;;;IAIlD,OAAOW,IAAI;EACb;EAEA;EACAZ,EAAE,CAACkB,UAAU,CAACjB,IAAI,CAAC,CAChBkB,WAAW,CAACf,OAAO,CAAC,CACpBgB,OAAO,CAAC,CAACC,GAAG,EAAEV,OAAO,KAAI;IACxB,IAAIU,GAAG,EAAE,OAAOhB,QAAQ,CAACgB,GAAG,CAAC;IAC7B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACZ,OAAO,CAAC,EAAE,OAAON,QAAQ,CAACmB,SAAS,EAAE,EAAE,CAAC;IAC3D,IAAIlB,IAAI,EAAE,OAAOD,QAAQ,CAACmB,SAAS,EAAEb,OAAO,CAAC;IAC7CN,QAAQ,CAACmB,SAAS,EAAEd,cAAc,CAACC,OAAO,CAAC,CAAC;EAC9C,CAAC,CAAC;AACN;AA5CAc,OAAA,CAAA1B,gBAAA,GAAAA,gBAAA;AA8CA,SAAgB2B,WAAWA,CACzBC,IAAgB,EAChBC,IAAgB,EAChBxB,OAA0C;;EAE1C,MAAMyB,mBAAmB,GACvB,OAAOzB,OAAO,CAACyB,mBAAmB,KAAK,SAAS,GAC5CzB,OAAO,CAACyB,mBAAmB,GAC3B,CAAAC,EAAA,GAAAH,IAAI,CAACI,CAAC,CAAC/B,EAAE,CAACI,OAAO,cAAA0B,EAAA,uBAAAA,EAAA,CAAED,mBAAmB;EAE5C;EACA,IAAIA,mBAAmB,KAAK,IAAI,EAAE;IAChC,OAAOD,IAAI;;EAGb,OAAOA,IAAI,CAACI,GAAG,CAACC,GAAG,IAAG;IACpB,IAAIA,GAAG,CAACC,GAAG,IAAI,IAAI,EAAE;MACnBD,GAAG,CAACC,GAAG,GAAGP,IAAI,CAACI,CAAC,CAACI,SAAS,CAACC,QAAQ,EAAE;;IAGvC,OAAOH,GAAG;EACZ,CAAC,CAAC;AACJ;AAtBAR,OAAA,CAAAC,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}