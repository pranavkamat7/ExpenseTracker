{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveClusterTime = exports.clearAndRemoveTimerFrom = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** @internal */\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\nexports.clearAndRemoveTimerFrom = clearAndRemoveTimerFrom;\n/** Shared function to determine clusterTime for a given topology */\nfunction resolveClusterTime(topology, $clusterTime) {\n  if (topology.clusterTime == null) {\n    topology.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(topology.clusterTime.clusterTime)) {\n      topology.clusterTime = $clusterTime;\n    }\n  }\n}\nexports.resolveClusterTime = resolveClusterTime;","map":{"version":3,"names":["exports","STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","TopologyType","Object","freeze","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","ServerType","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","drainTimerQueue","queue","forEach","clearTimeout","clear","clearAndRemoveTimerFrom","timer","timers","delete","resolveClusterTime","topology","$clusterTime","clusterTime","greaterThan"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\sdam\\common.ts"],"sourcesContent":["import type { Timestamp, Binary, Long } from '../bson';\nimport type { Topology } from './topology';\nimport type { ClientSession } from '../sessions';\n\n// shared state names\nexport const STATE_CLOSING = 'closing';\nexport const STATE_CLOSED = 'closed';\nexport const STATE_CONNECTING = 'connecting';\nexport const STATE_CONNECTED = 'connected';\n\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexport const TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n} as const);\n\n/** @public */\nexport type TopologyType = typeof TopologyType[keyof typeof TopologyType];\n\n/**\n * An enumeration of server types we know about\n * @public\n */\nexport const ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n} as const);\n\n/** @public */\nexport type ServerType = typeof ServerType[keyof typeof ServerType];\n\n/** @internal */\nexport type TimerQueue = Set<NodeJS.Timeout>;\n\n/** @internal */\nexport function drainTimerQueue(queue: TimerQueue): void {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\n/** @internal */\nexport function clearAndRemoveTimerFrom(timer: NodeJS.Timeout, timers: TimerQueue): boolean {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\n\n/** @public */\nexport interface ClusterTime {\n  clusterTime: Timestamp;\n  signature: {\n    hash: Binary;\n    keyId: Long;\n  };\n}\n\n/** Shared function to determine clusterTime for a given topology */\nexport function resolveClusterTime(\n  topology: Topology | ClientSession,\n  $clusterTime: ClusterTime\n): void {\n  if (topology.clusterTime == null) {\n    topology.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(topology.clusterTime.clusterTime)) {\n      topology.clusterTime = $clusterTime;\n    }\n  }\n}\n"],"mappings":";;;;;;AAIA;AACaA,OAAA,CAAAC,aAAa,GAAG,SAAS;AACzBD,OAAA,CAAAE,YAAY,GAAG,QAAQ;AACvBF,OAAA,CAAAG,gBAAgB,GAAG,YAAY;AAC/BH,OAAA,CAAAI,eAAe,GAAG,WAAW;AAE1C;;;;AAIaJ,OAAA,CAAAK,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC;EACxCC,MAAM,EAAE,QAAQ;EAChBC,mBAAmB,EAAE,qBAAqB;EAC1CC,qBAAqB,EAAE,uBAAuB;EAC9CC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE;CACD,CAAC;AAKX;;;;AAIaZ,OAAA,CAAAa,UAAU,GAAGP,MAAM,CAACC,MAAM,CAAC;EACtCO,UAAU,EAAE,YAAY;EACxBC,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,iBAAiB;EAClCC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBT,OAAO,EAAE;CACD,CAAC;AAQX;AACA,SAAgBU,eAAeA,CAACC,KAAiB;EAC/CA,KAAK,CAACC,OAAO,CAACC,YAAY,CAAC;EAC3BF,KAAK,CAACG,KAAK,EAAE;AACf;AAHA1B,OAAA,CAAAsB,eAAA,GAAAA,eAAA;AAKA;AACA,SAAgBK,uBAAuBA,CAACC,KAAqB,EAAEC,MAAkB;EAC/EJ,YAAY,CAACG,KAAK,CAAC;EACnB,OAAOC,MAAM,CAACC,MAAM,CAACF,KAAK,CAAC;AAC7B;AAHA5B,OAAA,CAAA2B,uBAAA,GAAAA,uBAAA;AAcA;AACA,SAAgBI,kBAAkBA,CAChCC,QAAkC,EAClCC,YAAyB;EAEzB,IAAID,QAAQ,CAACE,WAAW,IAAI,IAAI,EAAE;IAChCF,QAAQ,CAACE,WAAW,GAAGD,YAAY;GACpC,MAAM;IACL,IAAIA,YAAY,CAACC,WAAW,CAACC,WAAW,CAACH,QAAQ,CAACE,WAAW,CAACA,WAAW,CAAC,EAAE;MAC1EF,QAAQ,CAACE,WAAW,GAAGD,YAAY;;;AAGzC;AAXAjC,OAAA,CAAA+B,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}