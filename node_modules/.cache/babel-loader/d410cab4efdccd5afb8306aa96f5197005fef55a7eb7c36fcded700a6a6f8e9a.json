{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = exports.LoggerLevel = void 0;\nconst util_1 = require(\"util\");\nconst error_1 = require(\"./error\");\n// Filters for classes\nconst classFilters = {};\nlet filteredClasses = {};\nlet level;\n// Save the process id\nconst pid = process.pid;\n// current logger\n// eslint-disable-next-line no-console\nlet currentLogger = console.warn;\n/** @public */\nexports.LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n});\n/**\n * @public\n */\nclass Logger {\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  constructor(className, options) {\n    options = options !== null && options !== void 0 ? options : {};\n    // Current reference\n    this.className = className;\n    // Current logger\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      currentLogger = options.logger;\n    }\n    // Set level of logging, default is error\n    if (options.loggerLevel) {\n      level = options.loggerLevel || exports.LoggerLevel.ERROR;\n    }\n    // Add all class names\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  debug(message, object) {\n    if (this.isDebug() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = util_1.format('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.DEBUG,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the warn level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  warn(message, object) {\n    if (this.isWarn() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = util_1.format('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.WARN,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the info level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  info(message, object) {\n    if (this.isInfo() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = util_1.format('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.INFO,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the error level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  error(message, object) {\n    if (this.isError() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = util_1.format('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.ERROR,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /** Is the logger set at info level */\n  isInfo() {\n    return level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n  isError() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n  isWarn() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.WARN || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at debug level */\n  isDebug() {\n    return level === exports.LoggerLevel.DEBUG;\n  }\n  /** Resets the logger to default settings, error and no filtered classes */\n  static reset() {\n    level = exports.LoggerLevel.ERROR;\n    filteredClasses = {};\n  }\n  /** Get the current logger function */\n  static currentLogger() {\n    return currentLogger;\n  }\n  /**\n   * Set the current logger function\n   *\n   * @param logger - Custom logging function\n   */\n  static setCurrentLogger(logger) {\n    if (typeof logger !== 'function') {\n      throw new error_1.MongoDriverError('current logger must be a function');\n    }\n    currentLogger = logger;\n  }\n  /**\n   * Filter log messages for a particular class\n   *\n   * @param type - The type of filter (currently only class)\n   * @param values - The filters to apply\n   */\n  static filter(type, values) {\n    if (type === 'class' && Array.isArray(values)) {\n      filteredClasses = {};\n      values.forEach(x => filteredClasses[x] = true);\n    }\n  }\n  /**\n   * Set the current log level\n   *\n   * @param newLevel - Set current log level (debug, warn, info, error)\n   */\n  static setLevel(newLevel) {\n    if (newLevel !== exports.LoggerLevel.INFO && newLevel !== exports.LoggerLevel.ERROR && newLevel !== exports.LoggerLevel.DEBUG && newLevel !== exports.LoggerLevel.WARN) {\n      throw new error_1.MongoDriverError(`${newLevel} is an illegal logging level`);\n    }\n    level = newLevel;\n  }\n}\nexports.Logger = Logger;","map":{"version":3,"names":["util_1","require","error_1","classFilters","filteredClasses","level","pid","process","currentLogger","console","warn","exports","LoggerLevel","Object","freeze","ERROR","WARN","INFO","DEBUG","error","info","debug","Logger","constructor","className","options","logger","loggerLevel","message","object","isDebug","keys","length","dateTime","Date","getTime","msg","format","state","type","date","meta","isWarn","isInfo","isError","reset","setCurrentLogger","MongoDriverError","filter","values","Array","isArray","forEach","x","setLevel","newLevel"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\logger.ts"],"sourcesContent":["import { format } from 'util';\nimport { MongoDriverError } from './error';\n\n// Filters for classes\nconst classFilters: any = {};\nlet filteredClasses: any = {};\nlet level: LoggerLevel;\n\n// Save the process id\nconst pid = process.pid;\n\n// current logger\n// eslint-disable-next-line no-console\nlet currentLogger: LoggerFunction = console.warn;\n\n/** @public */\nexport const LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n} as const);\n\n/** @public */\nexport type LoggerLevel = typeof LoggerLevel[keyof typeof LoggerLevel];\n\n/** @public */\nexport type LoggerFunction = (message?: any, ...optionalParams: any[]) => void;\n\n/** @public */\nexport interface LoggerOptions {\n  logger?: LoggerFunction;\n  loggerLevel?: LoggerLevel;\n}\n\n/**\n * @public\n */\nexport class Logger {\n  className: string;\n\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  constructor(className: string, options?: LoggerOptions) {\n    options = options ?? {};\n\n    // Current reference\n    this.className = className;\n\n    // Current logger\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      currentLogger = options.logger;\n    }\n\n    // Set level of logging, default is error\n    if (options.loggerLevel) {\n      level = options.loggerLevel || LoggerLevel.ERROR;\n    }\n\n    // Add all class names\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  debug(message: string, object?: unknown): void {\n    if (\n      this.isDebug() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.DEBUG,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the warn level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  warn(message: string, object?: unknown): void {\n    if (\n      this.isWarn() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.WARN,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the info level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  info(message: string, object?: unknown): void {\n    if (\n      this.isInfo() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.INFO,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /**\n   * Log a message at the error level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  error(message: string, object?: unknown): void {\n    if (\n      this.isError() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      const dateTime = new Date().getTime();\n      const msg = format('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      const state = {\n        type: LoggerLevel.ERROR,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      } as any;\n\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n\n  /** Is the logger set at info level */\n  isInfo(): boolean {\n    return level === LoggerLevel.INFO || level === LoggerLevel.DEBUG;\n  }\n\n  /** Is the logger set at error level */\n  isError(): boolean {\n    return level === LoggerLevel.ERROR || level === LoggerLevel.INFO || level === LoggerLevel.DEBUG;\n  }\n\n  /** Is the logger set at error level */\n  isWarn(): boolean {\n    return (\n      level === LoggerLevel.ERROR ||\n      level === LoggerLevel.WARN ||\n      level === LoggerLevel.INFO ||\n      level === LoggerLevel.DEBUG\n    );\n  }\n\n  /** Is the logger set at debug level */\n  isDebug(): boolean {\n    return level === LoggerLevel.DEBUG;\n  }\n\n  /** Resets the logger to default settings, error and no filtered classes */\n  static reset(): void {\n    level = LoggerLevel.ERROR;\n    filteredClasses = {};\n  }\n\n  /** Get the current logger function */\n  static currentLogger(): LoggerFunction {\n    return currentLogger;\n  }\n\n  /**\n   * Set the current logger function\n   *\n   * @param logger - Custom logging function\n   */\n  static setCurrentLogger(logger: LoggerFunction): void {\n    if (typeof logger !== 'function') {\n      throw new MongoDriverError('current logger must be a function');\n    }\n\n    currentLogger = logger;\n  }\n\n  /**\n   * Filter log messages for a particular class\n   *\n   * @param type - The type of filter (currently only class)\n   * @param values - The filters to apply\n   */\n  static filter(type: string, values: string[]): void {\n    if (type === 'class' && Array.isArray(values)) {\n      filteredClasses = {};\n      values.forEach(x => (filteredClasses[x] = true));\n    }\n  }\n\n  /**\n   * Set the current log level\n   *\n   * @param newLevel - Set current log level (debug, warn, info, error)\n   */\n  static setLevel(newLevel: LoggerLevel): void {\n    if (\n      newLevel !== LoggerLevel.INFO &&\n      newLevel !== LoggerLevel.ERROR &&\n      newLevel !== LoggerLevel.DEBUG &&\n      newLevel !== LoggerLevel.WARN\n    ) {\n      throw new MongoDriverError(`${newLevel} is an illegal logging level`);\n    }\n\n    level = newLevel;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}