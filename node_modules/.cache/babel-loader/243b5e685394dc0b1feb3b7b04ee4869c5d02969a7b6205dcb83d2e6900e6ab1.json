{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\nconst crypto = require(\"crypto\");\nconst operation_1 = require(\"./operation\");\nconst command_1 = require(\"./command\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\n/** @internal */\nclass AddUserOperation extends command_1.CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options !== null && options !== void 0 ? options : {};\n  }\n  execute(server, session, callback) {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n    // Error out if digestPassword set\n    if (options.digestPassword != null) {\n      return callback(new error_1.MongoDriverError('The digestPassword option is not supported via add_user. ' + \"Please use db.command('createUser', ...) instead for this option.\"));\n    }\n    let roles;\n    if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n      utils_1.emitWarningOnce('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n    const digestPassword = utils_1.getTopology(db).lastIsMaster().maxWireVersion >= 7;\n    let userPassword = password;\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(username + ':mongo:' + password);\n      userPassword = md5.digest('hex');\n    }\n    // Build the command to execute\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.AddUserOperation = AddUserOperation;\noperation_1.defineAspects(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["crypto","require","operation_1","command_1","error_1","utils_1","AddUserOperation","CommandOperation","constructor","db","username","password","options","execute","server","session","callback","digestPassword","MongoDriverError","roles","Array","isArray","length","emitWarningOnce","databaseName","toLowerCase","getTopology","lastIsMaster","maxWireVersion","userPassword","md5","createHash","update","digest","command","createUser","customData","pwd","executeCommand","exports","defineAspects","Aspect","WRITE_OPERATION"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\add_user.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport { Aspect, defineAspects } from './operation';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { MongoDriverError } from '../error';\nimport { Callback, emitWarningOnce, getTopology } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Db } from '../db';\nimport type { ClientSession } from '../sessions';\n\n/** @public */\nexport interface RoleSpecification {\n  /**\n   * A role grants privileges to perform sets of actions on defined resources.\n   * A given role applies to the database on which it is defined and can grant access down to a collection level of granularity.\n   */\n  role: string;\n  /** The database this user's role should effect. */\n  db: string;\n}\n\n/** @public */\nexport interface AddUserOptions extends CommandOperationOptions {\n  /** @deprecated Please use db.command('createUser', ...) instead for this option */\n  digestPassword?: null;\n  /** Roles associated with the created user */\n  roles?: string | string[] | RoleSpecification | RoleSpecification[];\n  /** Custom data associated with the user (only Mongodb 2.6 or higher) */\n  customData?: Document;\n}\n\n/** @internal */\nexport class AddUserOperation extends CommandOperation<Document> {\n  options: AddUserOptions;\n  db: Db;\n  username: string;\n  password?: string;\n\n  constructor(db: Db, username: string, password: string | undefined, options?: AddUserOptions) {\n    super(db, options);\n\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options ?? {};\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Document>): void {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n\n    // Error out if digestPassword set\n    if (options.digestPassword != null) {\n      return callback(\n        new MongoDriverError(\n          'The digestPassword option is not supported via add_user. ' +\n            \"Please use db.command('createUser', ...) instead for this option.\"\n        )\n      );\n    }\n\n    let roles;\n    if (!options.roles || (Array.isArray(options.roles) && options.roles.length === 0)) {\n      emitWarningOnce(\n        'Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise'\n      );\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n\n    const digestPassword = getTopology(db).lastIsMaster().maxWireVersion >= 7;\n\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(username + ':mongo:' + password);\n      userPassword = md5.digest('hex');\n    }\n\n    // Build the command to execute\n    const command: Document = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\ndefineAspects(AddUserOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AACA,MAAAI,OAAA,GAAAJ,OAAA;AA2BA;AACA,MAAaK,gBAAiB,SAAQH,SAAA,CAAAI,gBAA0B;EAM9DC,YAAYC,EAAM,EAAEC,QAAgB,EAAEC,QAA4B,EAAEC,OAAwB;IAC1F,KAAK,CAACH,EAAE,EAAEG,OAAO,CAAC;IAElB,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;EAC9B;EAEAC,OAAOA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAA4B;IAC1E,MAAMP,EAAE,GAAG,IAAI,CAACA,EAAE;IAClB,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B;IACA,IAAIA,OAAO,CAACK,cAAc,IAAI,IAAI,EAAE;MAClC,OAAOD,QAAQ,CACb,IAAIZ,OAAA,CAAAc,gBAAgB,CAClB,2DAA2D,GACzD,mEAAmE,CACtE,CACF;;IAGH,IAAIC,KAAK;IACT,IAAI,CAACP,OAAO,CAACO,KAAK,IAAKC,KAAK,CAACC,OAAO,CAACT,OAAO,CAACO,KAAK,CAAC,IAAIP,OAAO,CAACO,KAAK,CAACG,MAAM,KAAK,CAAE,EAAE;MAClFjB,OAAA,CAAAkB,eAAe,CACb,yGAAyG,CAC1G;MACD,IAAId,EAAE,CAACe,YAAY,CAACC,WAAW,EAAE,KAAK,OAAO,EAAE;QAC7CN,KAAK,GAAG,CAAC,MAAM,CAAC;OACjB,MAAM;QACLA,KAAK,GAAG,CAAC,SAAS,CAAC;;KAEtB,MAAM;MACLA,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACT,OAAO,CAACO,KAAK,CAAC,GAAGP,OAAO,CAACO,KAAK,GAAG,CAACP,OAAO,CAACO,KAAK,CAAC;;IAGxE,MAAMF,cAAc,GAAGZ,OAAA,CAAAqB,WAAW,CAACjB,EAAE,CAAC,CAACkB,YAAY,EAAE,CAACC,cAAc,IAAI,CAAC;IAEzE,IAAIC,YAAY,GAAGlB,QAAQ;IAE3B,IAAI,CAACM,cAAc,EAAE;MACnB;MACA,MAAMa,GAAG,GAAG9B,MAAM,CAAC+B,UAAU,CAAC,KAAK,CAAC;MACpC;MACAD,GAAG,CAACE,MAAM,CAACtB,QAAQ,GAAG,SAAS,GAAGC,QAAQ,CAAC;MAC3CkB,YAAY,GAAGC,GAAG,CAACG,MAAM,CAAC,KAAK,CAAC;;IAGlC;IACA,MAAMC,OAAO,GAAa;MACxBC,UAAU,EAAEzB,QAAQ;MACpB0B,UAAU,EAAExB,OAAO,CAACwB,UAAU,IAAI,EAAE;MACpCjB,KAAK,EAAEA,KAAK;MACZF;KACD;IAED;IACA,IAAI,OAAON,QAAQ,KAAK,QAAQ,EAAE;MAChCuB,OAAO,CAACG,GAAG,GAAGR,YAAY;;IAG5B,KAAK,CAACS,cAAc,CAACxB,MAAM,EAAEC,OAAO,EAAEmB,OAAO,EAAElB,QAAQ,CAAC;EAC1D;;AAvEFuB,OAAA,CAAAjC,gBAAA,GAAAA,gBAAA;AA0EAJ,WAAA,CAAAsC,aAAa,CAAClC,gBAAgB,EAAE,CAACJ,WAAA,CAAAuC,MAAM,CAACC,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}