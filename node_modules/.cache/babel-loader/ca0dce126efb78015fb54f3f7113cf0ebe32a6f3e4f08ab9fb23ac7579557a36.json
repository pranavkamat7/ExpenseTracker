{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListDatabasesOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\nconst utils_1 = require(\"../utils\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n  }\n  execute(server, session, callback) {\n    const cmd = {\n      listDatabases: 1\n    };\n    if (this.options.nameOnly) {\n      cmd.nameOnly = Number(cmd.nameOnly);\n    }\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    }\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\noperation_1.defineAspects(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);","map":{"version":3,"names":["command_1","require","operation_1","utils_1","ListDatabasesOperation","CommandOperation","constructor","db","options","ns","MongoDBNamespace","execute","server","session","callback","cmd","listDatabases","nameOnly","Number","filter","authorizedDatabases","executeCommand","exports","defineAspects","Aspect","READ_OPERATION","RETRYABLE"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\list_databases.ts"],"sourcesContent":["import { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\nimport { MongoDBNamespace, Callback } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Db } from '../db';\nimport type { ClientSession } from '../sessions';\n\n/** @public */\nexport type ListDatabasesResult = string[] | Document[];\n\n/** @public */\nexport interface ListDatabasesOptions extends CommandOperationOptions {\n  /** A query predicate that determines which databases are listed */\n  filter?: Document;\n  /** A flag to indicate whether the command should return just the database names, or return both database names and size information */\n  nameOnly?: boolean;\n  /** A flag that determines which databases are returned based on the user privileges when access control is enabled */\n  authorizedDatabases?: boolean;\n}\n\n/** @internal */\nexport class ListDatabasesOperation extends CommandOperation<ListDatabasesResult> {\n  options: ListDatabasesOptions;\n\n  constructor(db: Db, options?: ListDatabasesOptions) {\n    super(db, options);\n    this.options = options ?? {};\n    this.ns = new MongoDBNamespace('admin', '$cmd');\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<ListDatabasesResult>): void {\n    const cmd: Document = { listDatabases: 1 };\n    if (this.options.nameOnly) {\n      cmd.nameOnly = Number(cmd.nameOnly);\n    }\n\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    }\n\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\n\ndefineAspects(ListDatabasesOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE]);\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AAmBA;AACA,MAAaG,sBAAuB,SAAQJ,SAAA,CAAAK,gBAAqC;EAG/EC,YAAYC,EAAM,EAAEC,OAA8B;IAChD,KAAK,CAACD,EAAE,EAAEC,OAAO,CAAC;IAClB,IAAI,CAACA,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAC5B,IAAI,CAACC,EAAE,GAAG,IAAIN,OAAA,CAAAO,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC;EACjD;EAEAC,OAAOA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAAuC;IACrF,MAAMC,GAAG,GAAa;MAAEC,aAAa,EAAE;IAAC,CAAE;IAC1C,IAAI,IAAI,CAACR,OAAO,CAACS,QAAQ,EAAE;MACzBF,GAAG,CAACE,QAAQ,GAAGC,MAAM,CAACH,GAAG,CAACE,QAAQ,CAAC;;IAGrC,IAAI,IAAI,CAACT,OAAO,CAACW,MAAM,EAAE;MACvBJ,GAAG,CAACI,MAAM,GAAG,IAAI,CAACX,OAAO,CAACW,MAAM;;IAGlC,IAAI,OAAO,IAAI,CAACX,OAAO,CAACY,mBAAmB,KAAK,SAAS,EAAE;MACzDL,GAAG,CAACK,mBAAmB,GAAG,IAAI,CAACZ,OAAO,CAACY,mBAAmB;;IAG5D,KAAK,CAACC,cAAc,CAACT,MAAM,EAAEC,OAAO,EAAEE,GAAG,EAAED,QAAQ,CAAC;EACtD;;AAxBFQ,OAAA,CAAAlB,sBAAA,GAAAA,sBAAA;AA2BAF,WAAA,CAAAqB,aAAa,CAACnB,sBAAsB,EAAE,CAACF,WAAA,CAAAsB,MAAM,CAACC,cAAc,EAAEvB,WAAA,CAAAsB,MAAM,CAACE,SAAS,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}