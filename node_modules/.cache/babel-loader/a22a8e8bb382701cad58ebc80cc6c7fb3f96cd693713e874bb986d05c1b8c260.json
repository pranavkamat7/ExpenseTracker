{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.X509 = void 0;\nconst auth_provider_1 = require(\"./auth_provider\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nclass X509 extends auth_provider_1.AuthProvider {\n  prepare(handshakeDoc, authContext, callback) {\n    const {\n      credentials\n    } = authContext;\n    if (!credentials) {\n      return callback(new error_1.MongoDriverError('AuthContext must provide credentials.'));\n    }\n    Object.assign(handshakeDoc, {\n      speculativeAuthenticate: x509AuthenticateCommand(credentials)\n    });\n    callback(undefined, handshakeDoc);\n  }\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      return callback(new error_1.MongoDriverError('AuthContext must provide credentials.'));\n    }\n    const response = authContext.response;\n    if (response && response.speculativeAuthenticate) {\n      return callback();\n    }\n    connection.command(utils_1.ns('$external.$cmd'), x509AuthenticateCommand(credentials), undefined, callback);\n  }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n  const command = {\n    authenticate: 1,\n    mechanism: 'MONGODB-X509'\n  };\n  if (credentials.username) {\n    command.user = credentials.username;\n  }\n  return command;\n}","map":{"version":3,"names":["auth_provider_1","require","error_1","utils_1","X509","AuthProvider","prepare","handshakeDoc","authContext","callback","credentials","MongoDriverError","Object","assign","speculativeAuthenticate","x509AuthenticateCommand","undefined","auth","connection","response","command","ns","exports","authenticate","mechanism","username","user"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\cmap\\auth\\x509.ts"],"sourcesContent":["import { AuthProvider, AuthContext } from './auth_provider';\nimport { MongoDriverError } from '../../error';\nimport type { Document } from '../../bson';\nimport { Callback, ns } from '../../utils';\nimport type { MongoCredentials } from './mongo_credentials';\nimport type { HandshakeDocument } from '../connect';\n\nexport class X509 extends AuthProvider {\n  prepare(handshakeDoc: HandshakeDocument, authContext: AuthContext, callback: Callback): void {\n    const { credentials } = authContext;\n    if (!credentials) {\n      return callback(new MongoDriverError('AuthContext must provide credentials.'));\n    }\n    Object.assign(handshakeDoc, {\n      speculativeAuthenticate: x509AuthenticateCommand(credentials)\n    });\n\n    callback(undefined, handshakeDoc);\n  }\n\n  auth(authContext: AuthContext, callback: Callback): void {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      return callback(new MongoDriverError('AuthContext must provide credentials.'));\n    }\n    const response = authContext.response;\n\n    if (response && response.speculativeAuthenticate) {\n      return callback();\n    }\n\n    connection.command(\n      ns('$external.$cmd'),\n      x509AuthenticateCommand(credentials),\n      undefined,\n      callback\n    );\n  }\n}\n\nfunction x509AuthenticateCommand(credentials: MongoCredentials) {\n  const command: Document = { authenticate: 1, mechanism: 'MONGODB-X509' };\n  if (credentials.username) {\n    command.user = credentials.username;\n  }\n\n  return command;\n}\n"],"mappings":";;;;;;AAAA,MAAAA,eAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAAE,OAAA,GAAAF,OAAA;AAIA,MAAaG,IAAK,SAAQJ,eAAA,CAAAK,YAAY;EACpCC,OAAOA,CAACC,YAA+B,EAAEC,WAAwB,EAAEC,QAAkB;IACnF,MAAM;MAAEC;IAAW,CAAE,GAAGF,WAAW;IACnC,IAAI,CAACE,WAAW,EAAE;MAChB,OAAOD,QAAQ,CAAC,IAAIP,OAAA,CAAAS,gBAAgB,CAAC,uCAAuC,CAAC,CAAC;;IAEhFC,MAAM,CAACC,MAAM,CAACN,YAAY,EAAE;MAC1BO,uBAAuB,EAAEC,uBAAuB,CAACL,WAAW;KAC7D,CAAC;IAEFD,QAAQ,CAACO,SAAS,EAAET,YAAY,CAAC;EACnC;EAEAU,IAAIA,CAACT,WAAwB,EAAEC,QAAkB;IAC/C,MAAMS,UAAU,GAAGV,WAAW,CAACU,UAAU;IACzC,MAAMR,WAAW,GAAGF,WAAW,CAACE,WAAW;IAC3C,IAAI,CAACA,WAAW,EAAE;MAChB,OAAOD,QAAQ,CAAC,IAAIP,OAAA,CAAAS,gBAAgB,CAAC,uCAAuC,CAAC,CAAC;;IAEhF,MAAMQ,QAAQ,GAAGX,WAAW,CAACW,QAAQ;IAErC,IAAIA,QAAQ,IAAIA,QAAQ,CAACL,uBAAuB,EAAE;MAChD,OAAOL,QAAQ,EAAE;;IAGnBS,UAAU,CAACE,OAAO,CAChBjB,OAAA,CAAAkB,EAAE,CAAC,gBAAgB,CAAC,EACpBN,uBAAuB,CAACL,WAAW,CAAC,EACpCM,SAAS,EACTP,QAAQ,CACT;EACH;;AA/BFa,OAAA,CAAAlB,IAAA,GAAAA,IAAA;AAkCA,SAASW,uBAAuBA,CAACL,WAA6B;EAC5D,MAAMU,OAAO,GAAa;IAAEG,YAAY,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAc,CAAE;EACxE,IAAId,WAAW,CAACe,QAAQ,EAAE;IACxBL,OAAO,CAACM,IAAI,GAAGhB,WAAW,CAACe,QAAQ;;EAGrC,OAAOL,OAAO;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}