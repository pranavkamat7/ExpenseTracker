{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connect = exports.MONGO_CLIENT_EVENTS = void 0;\nconst error_1 = require(\"../error\");\nconst topology_1 = require(\"../sdam/topology\");\nconst connection_string_1 = require(\"../connection_string\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst connection_1 = require(\"../cmap/connection\");\nconst server_1 = require(\"../sdam/server\");\n/** @public */\nexports.MONGO_CLIENT_EVENTS = [...connection_pool_1.CMAP_EVENTS, ...connection_1.APM_EVENTS, ...topology_1.TOPOLOGY_EVENTS, ...server_1.HEARTBEAT_EVENTS];\nfunction connect(mongoClient, options, callback) {\n  if (!callback) {\n    throw new error_1.MongoDriverError('no callback function provided');\n  }\n  // If a connection already been established, we can terminate early\n  if (mongoClient.topology && mongoClient.topology.isConnected()) {\n    return callback(undefined, mongoClient);\n  }\n  const logger = mongoClient.logger;\n  const connectCallback = err => {\n    const warningMessage = 'seed list contains no mongos proxies, replicaset connections requires ' + 'the parameter replicaSet to be supplied in the URI or options object, ' + 'mongodb://server:port/db?replicaSet=name';\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(warningMessage);\n      }\n      // Return a more specific error message for MongoClient.connect\n      return callback(new error_1.MongoDriverError(warningMessage));\n    }\n    callback(err, mongoClient);\n  };\n  if (typeof options.srvHost === 'string') {\n    return connection_string_1.resolveSRVRecord(options, (err, hosts) => {\n      if (err || !hosts) return callback(err);\n      for (const [index, host] of hosts.entries()) {\n        options.hosts[index] = host;\n      }\n      return createTopology(mongoClient, options, connectCallback);\n    });\n  }\n  return createTopology(mongoClient, options, connectCallback);\n}\nexports.connect = connect;\nfunction createTopology(mongoClient, options, callback) {\n  // Create the topology\n  const topology = new topology_1.Topology(options.hosts, options);\n  // Events can be emitted before initialization is complete so we have to\n  // save the reference to the topology on the client ASAP if the event handlers need to access it\n  mongoClient.topology = topology;\n  topology.once(topology_1.Topology.OPEN, () => mongoClient.emit('open', mongoClient));\n  for (const event of exports.MONGO_CLIENT_EVENTS) {\n    topology.on(event, (...args) => mongoClient.emit(event, ...args));\n  }\n  // initialize CSFLE if requested\n  if (mongoClient.autoEncrypter) {\n    mongoClient.autoEncrypter.init(err => {\n      if (err) {\n        return callback(err);\n      }\n      topology.connect(options, err => {\n        if (err) {\n          topology.close({\n            force: true\n          });\n          return callback(err);\n        }\n        options.encrypter.connectInternalClient(error => {\n          if (error) return callback(error);\n          callback(undefined, topology);\n        });\n      });\n    });\n    return;\n  }\n  // otherwise connect normally\n  topology.connect(options, err => {\n    if (err) {\n      topology.close({\n        force: true\n      });\n      return callback(err);\n    }\n    callback(undefined, topology);\n    return;\n  });\n}","map":{"version":3,"names":["error_1","require","topology_1","connection_string_1","connection_pool_1","connection_1","server_1","exports","MONGO_CLIENT_EVENTS","CMAP_EVENTS","APM_EVENTS","TOPOLOGY_EVENTS","HEARTBEAT_EVENTS","connect","mongoClient","options","callback","MongoDriverError","topology","isConnected","undefined","logger","connectCallback","err","warningMessage","message","isWarn","warn","srvHost","resolveSRVRecord","hosts","index","host","entries","createTopology","Topology","once","OPEN","emit","event","on","args","autoEncrypter","init","close","force","encrypter","connectInternalClient","error"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\connect.ts"],"sourcesContent":["import { MongoDriverError } from '../error';\nimport { Topology, TOPOLOGY_EVENTS } from '../sdam/topology';\nimport { resolveSRVRecord } from '../connection_string';\nimport type { Callback } from '../utils';\nimport type { MongoClient, MongoOptions } from '../mongo_client';\nimport { CMAP_EVENTS } from '../cmap/connection_pool';\nimport { APM_EVENTS } from '../cmap/connection';\nimport { HEARTBEAT_EVENTS } from '../sdam/server';\n\n/** @public */\nexport const MONGO_CLIENT_EVENTS = [\n  ...CMAP_EVENTS,\n  ...APM_EVENTS,\n  ...TOPOLOGY_EVENTS,\n  ...HEARTBEAT_EVENTS\n] as const;\n\nexport function connect(\n  mongoClient: MongoClient,\n  options: MongoOptions,\n  callback: Callback<MongoClient>\n): void {\n  if (!callback) {\n    throw new MongoDriverError('no callback function provided');\n  }\n\n  // If a connection already been established, we can terminate early\n  if (mongoClient.topology && mongoClient.topology.isConnected()) {\n    return callback(undefined, mongoClient);\n  }\n\n  const logger = mongoClient.logger;\n  const connectCallback: Callback = err => {\n    const warningMessage =\n      'seed list contains no mongos proxies, replicaset connections requires ' +\n      'the parameter replicaSet to be supplied in the URI or options object, ' +\n      'mongodb://server:port/db?replicaSet=name';\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(warningMessage);\n      }\n\n      // Return a more specific error message for MongoClient.connect\n      return callback(new MongoDriverError(warningMessage));\n    }\n\n    callback(err, mongoClient);\n  };\n\n  if (typeof options.srvHost === 'string') {\n    return resolveSRVRecord(options, (err, hosts) => {\n      if (err || !hosts) return callback(err);\n      for (const [index, host] of hosts.entries()) {\n        options.hosts[index] = host;\n      }\n\n      return createTopology(mongoClient, options, connectCallback);\n    });\n  }\n\n  return createTopology(mongoClient, options, connectCallback);\n}\n\nfunction createTopology(\n  mongoClient: MongoClient,\n  options: MongoOptions,\n  callback: Callback<Topology>\n) {\n  // Create the topology\n  const topology = new Topology(options.hosts, options);\n  // Events can be emitted before initialization is complete so we have to\n  // save the reference to the topology on the client ASAP if the event handlers need to access it\n  mongoClient.topology = topology;\n\n  topology.once(Topology.OPEN, () => mongoClient.emit('open', mongoClient));\n\n  for (const event of MONGO_CLIENT_EVENTS) {\n    topology.on(event, (...args: any[]) => mongoClient.emit(event, ...(args as any)));\n  }\n\n  // initialize CSFLE if requested\n  if (mongoClient.autoEncrypter) {\n    mongoClient.autoEncrypter.init(err => {\n      if (err) {\n        return callback(err);\n      }\n\n      topology.connect(options, err => {\n        if (err) {\n          topology.close({ force: true });\n          return callback(err);\n        }\n\n        options.encrypter.connectInternalClient(error => {\n          if (error) return callback(error);\n\n          callback(undefined, topology);\n        });\n      });\n    });\n\n    return;\n  }\n\n  // otherwise connect normally\n  topology.connect(options, err => {\n    if (err) {\n      topology.close({ force: true });\n      return callback(err);\n    }\n\n    callback(undefined, topology);\n    return;\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}