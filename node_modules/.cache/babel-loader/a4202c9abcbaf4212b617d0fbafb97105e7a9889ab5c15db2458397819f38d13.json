{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst mongo_client_1 = require(\"./mongo_client\");\nconst error_1 = require(\"./error\");\nconst bson_1 = require(\"./bson\");\nconst connect_1 = require(\"./operations/connect\");\nlet AutoEncrypterClass;\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoDriverError('Options autoEncryption must be specified');\n    }\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n    options.autoEncryption.bson = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson.serialize = bson_1.serialize;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson.deserialize = bson_1.deserialize;\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n  getInternalClient(client, uri, options) {\n    if (!this[kInternalClient]) {\n      const clonedOptions = {};\n      for (const key of Object.keys(options)) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n      clonedOptions.minPoolSize = 0;\n      this[kInternalClient] = new mongo_client_1.MongoClient(uri, clonedOptions);\n      for (const eventName of connect_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          this[kInternalClient].on(eventName, listener);\n        }\n      }\n      client.on('newListener', (eventName, listener) => {\n        this[kInternalClient].on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n    return this[kInternalClient];\n  }\n  connectInternalClient(callback) {\n    if (this.needsConnecting) {\n      this.needsConnecting = false;\n      return this[kInternalClient].connect(callback);\n    }\n    return callback();\n  }\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      if (this[kInternalClient] && client !== this[kInternalClient]) {\n        return this[kInternalClient].close(force, callback);\n      }\n      callback(e);\n    });\n  }\n  static checkForMongoCrypt() {\n    let mongodbClientEncryption = undefined;\n    try {\n      // Ensure you always wrap an optional require in the try block NODE-3199\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch (err) {\n      throw new error_1.MongoDriverError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n    if (typeof (mongodbClientEncryption === null || mongodbClientEncryption === void 0 ? void 0 : mongodbClientEncryption.extension) !== 'function') {\n      throw new error_1.MongoDriverError('loaded version of `mongodb-client-encryption` does not have property `extension`. ' + 'Please make sure you are loading the correct version of `mongodb-client-encryption`');\n    }\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n}\nexports.Encrypter = Encrypter;","map":{"version":3,"names":["mongo_client_1","require","error_1","bson_1","connect_1","AutoEncrypterClass","kInternalClient","Symbol","Encrypter","constructor","client","uri","options","autoEncryption","MongoDriverError","bypassAutoEncryption","needsConnecting","maxPoolSize","keyVaultClient","getInternalClient","metadataClient","undefined","bson","Object","create","serialize","deserialize","autoEncrypter","clonedOptions","key","keys","includes","Reflect","set","get","minPoolSize","MongoClient","eventName","MONGO_CLIENT_EVENTS","listener","listeners","on","connectInternalClient","callback","connect","close","force","teardown","e","checkForMongoCrypt","mongodbClientEncryption","err","extension","AutoEncrypter","exports"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\encrypter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport { MongoClient, MongoClientOptions } from './mongo_client';\nimport type { AutoEncrypter, AutoEncryptionOptions } from './deps';\nimport { MongoDriverError } from './error';\nimport { deserialize, serialize } from './bson';\nimport type { Callback } from './utils';\nimport { MONGO_CLIENT_EVENTS } from './operations/connect';\n\nlet AutoEncrypterClass: AutoEncrypter;\n\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n\n/** @internal */\nexport interface EncrypterOptions {\n  autoEncryption: AutoEncryptionOptions;\n  maxPoolSize?: number;\n}\n\n/** @internal */\nexport class Encrypter {\n  [kInternalClient]: MongoClient;\n  bypassAutoEncryption: boolean;\n  needsConnecting: boolean;\n  autoEncrypter: AutoEncrypter;\n\n  constructor(client: MongoClient, uri: string, options: MongoClientOptions) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new MongoDriverError('Options autoEncryption must be specified');\n    }\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    options.autoEncryption.bson = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson!.serialize = serialize;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    options.autoEncryption.bson!.deserialize = deserialize;\n\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client: MongoClient, uri: string, options: MongoClientOptions): MongoClient {\n    if (!this[kInternalClient]) {\n      const clonedOptions: MongoClientOptions = {};\n\n      for (const key of Object.keys(options)) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n          continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n\n      this[kInternalClient] = new MongoClient(uri, clonedOptions);\n\n      for (const eventName of MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          this[kInternalClient].on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        this[kInternalClient].on(eventName, listener);\n      });\n\n      this.needsConnecting = true;\n    }\n    return this[kInternalClient];\n  }\n\n  connectInternalClient(callback: Callback): void {\n    if (this.needsConnecting) {\n      this.needsConnecting = false;\n      return this[kInternalClient].connect(callback);\n    }\n\n    return callback();\n  }\n\n  close(client: MongoClient, force: boolean, callback: Callback): void {\n    this.autoEncrypter.teardown(!!force, e => {\n      if (this[kInternalClient] && client !== this[kInternalClient]) {\n        return this[kInternalClient].close(force, callback);\n      }\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt(): void {\n    let mongodbClientEncryption = undefined;\n    try {\n      // Ensure you always wrap an optional require in the try block NODE-3199\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch (err) {\n      throw new MongoDriverError(\n        'Auto-encryption requested, but the module is not installed. ' +\n          'Please add `mongodb-client-encryption` as a dependency of your project'\n      );\n    }\n\n    if (typeof mongodbClientEncryption?.extension !== 'function') {\n      throw new MongoDriverError(\n        'loaded version of `mongodb-client-encryption` does not have property `extension`. ' +\n          'Please make sure you are loading the correct version of `mongodb-client-encryption`'\n      );\n    }\n\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}