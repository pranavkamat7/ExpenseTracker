{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst read_preference_1 = require(\"../read_preference\");\nconst bson_1 = require(\"../bson\");\nexports.Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n  constructor(options = {}) {\n    var _a;\n    this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION) ? read_preference_1.ReadPreference.primary : (_a = read_preference_1.ReadPreference.fromOptions(options)) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    // Pull the BSON serialize options from the already-resolved options\n    this.bsonOptions = bson_1.resolveBSONOptions(options);\n    if (options.session) {\n      this[kSession] = options.session;\n    }\n    this.options = options;\n  }\n  hasAspect(aspect) {\n    const ctor = this.constructor;\n    if (ctor.aspects == null) {\n      return false;\n    }\n    return ctor.aspects.has(aspect);\n  }\n  get session() {\n    return this[kSession];\n  }\n  get canRetryRead() {\n    return true;\n  }\n  get canRetryWrite() {\n    return true;\n  }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\nexports.defineAspects = defineAspects;","map":{"version":3,"names":["read_preference_1","require","bson_1","exports","Aspect","READ_OPERATION","Symbol","WRITE_OPERATION","RETRYABLE","EXPLAINABLE","SKIP_COLLATION","kSession","AbstractOperation","constructor","options","readPreference","hasAspect","ReadPreference","primary","_a","fromOptions","bsonOptions","resolveBSONOptions","session","aspect","ctor","aspects","has","canRetryRead","canRetryWrite","defineAspects","operation","Array","isArray","Set","Object","defineProperty","value","writable"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\operation.ts"],"sourcesContent":["import { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport { Document, BSONSerializeOptions, resolveBSONOptions } from '../bson';\nimport type { MongoDBNamespace, Callback } from '../utils';\nimport type { Server } from '../sdam/server';\n\nexport const Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION')\n} as const;\n\n/** @public */\nexport type Hint = string | Document;\n\nexport interface OperationConstructor extends Function {\n  aspects?: Set<symbol>;\n}\n\n/** @public */\nexport interface OperationOptions extends BSONSerializeOptions {\n  /** Specify ClientSession for this command */\n  session?: ClientSession;\n  willRetryWrites?: boolean;\n\n  /** The preferred read preference (ReadPreference.primary, ReadPreference.primary_preferred, ReadPreference.secondary, ReadPreference.secondary_preferred, ReadPreference.nearest). */\n  readPreference?: ReadPreferenceLike;\n}\n\n/** @internal */\nconst kSession = Symbol('session');\n\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nexport abstract class AbstractOperation<TResult = any> {\n  ns!: MongoDBNamespace;\n  cmd!: Document;\n  readPreference: ReadPreference;\n  server!: Server;\n  fullResponse?: boolean;\n\n  // BSON serialization options\n  bsonOptions?: BSONSerializeOptions;\n\n  // TODO: Each operation defines its own options, there should be better typing here\n  options: Document;\n\n  [kSession]: ClientSession;\n\n  constructor(options: OperationOptions = {}) {\n    this.readPreference = this.hasAspect(Aspect.WRITE_OPERATION)\n      ? ReadPreference.primary\n      : ReadPreference.fromOptions(options) ?? ReadPreference.primary;\n\n    // Pull the BSON serialize options from the already-resolved options\n    this.bsonOptions = resolveBSONOptions(options);\n\n    if (options.session) {\n      this[kSession] = options.session;\n    }\n\n    this.options = options;\n  }\n\n  abstract execute(server: Server, session: ClientSession, callback: Callback<TResult>): void;\n\n  hasAspect(aspect: symbol): boolean {\n    const ctor = this.constructor as OperationConstructor;\n    if (ctor.aspects == null) {\n      return false;\n    }\n\n    return ctor.aspects.has(aspect);\n  }\n\n  get session(): ClientSession {\n    return this[kSession];\n  }\n\n  get canRetryRead(): boolean {\n    return true;\n  }\n\n  get canRetryWrite(): boolean {\n    return true;\n  }\n}\n\nexport function defineAspects(\n  operation: OperationConstructor,\n  aspects: symbol | symbol[] | Set<symbol>\n): Set<symbol> {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n\n  return aspects;\n}\n"],"mappings":";;;;;;AAAA,MAAAA,iBAAA,GAAAC,OAAA;AAEA,MAAAC,MAAA,GAAAD,OAAA;AAIaE,OAAA,CAAAC,MAAM,GAAG;EACpBC,cAAc,EAAEC,MAAM,CAAC,gBAAgB,CAAC;EACxCC,eAAe,EAAED,MAAM,CAAC,iBAAiB,CAAC;EAC1CE,SAAS,EAAEF,MAAM,CAAC,WAAW,CAAC;EAC9BG,WAAW,EAAEH,MAAM,CAAC,aAAa,CAAC;EAClCI,cAAc,EAAEJ,MAAM,CAAC,gBAAgB;CAC/B;AAmBV;AACA,MAAMK,QAAQ,GAAGL,MAAM,CAAC,SAAS,CAAC;AAElC;;;;;;;AAOA,MAAsBM,iBAAiB;EAerCC,YAAYC,OAAA,GAA4B,EAAE;;IACxC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,SAAS,CAACb,OAAA,CAAAC,MAAM,CAACG,eAAe,CAAC,GACxDP,iBAAA,CAAAiB,cAAc,CAACC,OAAO,GACtB,CAAAC,EAAA,GAAAnB,iBAAA,CAAAiB,cAAc,CAACG,WAAW,CAACN,OAAO,CAAC,cAAAK,EAAA,cAAAA,EAAA,GAAInB,iBAAA,CAAAiB,cAAc,CAACC,OAAO;IAEjE;IACA,IAAI,CAACG,WAAW,GAAGnB,MAAA,CAAAoB,kBAAkB,CAACR,OAAO,CAAC;IAE9C,IAAIA,OAAO,CAACS,OAAO,EAAE;MACnB,IAAI,CAACZ,QAAQ,CAAC,GAAGG,OAAO,CAACS,OAAO;;IAGlC,IAAI,CAACT,OAAO,GAAGA,OAAO;EACxB;EAIAE,SAASA,CAACQ,MAAc;IACtB,MAAMC,IAAI,GAAG,IAAI,CAACZ,WAAmC;IACrD,IAAIY,IAAI,CAACC,OAAO,IAAI,IAAI,EAAE;MACxB,OAAO,KAAK;;IAGd,OAAOD,IAAI,CAACC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;EACjC;EAEA,IAAID,OAAOA,CAAA;IACT,OAAO,IAAI,CAACZ,QAAQ,CAAC;EACvB;EAEA,IAAIiB,YAAYA,CAAA;IACd,OAAO,IAAI;EACb;EAEA,IAAIC,aAAaA,CAAA;IACf,OAAO,IAAI;EACb;;AAnDF1B,OAAA,CAAAS,iBAAA,GAAAA,iBAAA;AAsDA,SAAgBkB,aAAaA,CAC3BC,SAA+B,EAC/BL,OAAwC;EAExC,IAAI,CAACM,KAAK,CAACC,OAAO,CAACP,OAAO,CAAC,IAAI,EAAEA,OAAO,YAAYQ,GAAG,CAAC,EAAE;IACxDR,OAAO,GAAG,CAACA,OAAO,CAAC;;EAGrBA,OAAO,GAAG,IAAIQ,GAAG,CAACR,OAAO,CAAC;EAC1BS,MAAM,CAACC,cAAc,CAACL,SAAS,EAAE,SAAS,EAAE;IAC1CM,KAAK,EAAEX,OAAO;IACdY,QAAQ,EAAE;GACX,CAAC;EAEF,OAAOZ,OAAO;AAChB;AAfAvB,OAAA,CAAA2B,aAAA,GAAAA,aAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}