{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenameOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst run_command_1 = require(\"./run_command\");\nconst operation_1 = require(\"./operation\");\nconst collection_1 = require(\"../collection\");\nconst error_1 = require(\"../error\");\n/** @internal */\nclass RenameOperation extends run_command_1.RunAdminCommandOperation {\n  constructor(collection, newName, options) {\n    // Check the collection name\n    utils_1.checkCollectionName(newName);\n    // Build the command\n    const renameCollection = collection.namespace;\n    const toCollection = collection.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = {\n      renameCollection: renameCollection,\n      to: toCollection,\n      dropTarget: dropTarget\n    };\n    super(collection, cmd, options);\n    this.options = options;\n    this.collection = collection;\n    this.newName = newName;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    super.execute(server, session, (err, doc) => {\n      if (err) return callback(err);\n      // We have an error\n      if (doc.errmsg) {\n        return callback(new error_1.MongoServerError(doc));\n      }\n      let newColl;\n      try {\n        newColl = new collection_1.Collection(coll.s.db, this.newName, coll.s.options);\n      } catch (err) {\n        return callback(err);\n      }\n      return callback(undefined, newColl);\n    });\n  }\n}\nexports.RenameOperation = RenameOperation;\noperation_1.defineAspects(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["utils_1","require","run_command_1","operation_1","collection_1","error_1","RenameOperation","RunAdminCommandOperation","constructor","collection","newName","options","checkCollectionName","renameCollection","namespace","toCollection","s","withCollection","toString","dropTarget","cmd","to","execute","server","session","callback","coll","err","doc","errmsg","MongoServerError","newColl","Collection","db","undefined","exports","defineAspects","Aspect","WRITE_OPERATION"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\rename.ts"],"sourcesContent":["import { checkCollectionName, Callback } from '../utils';\nimport { RunAdminCommandOperation } from './run_command';\nimport { defineAspects, Aspect } from './operation';\nimport type { Server } from '../sdam/server';\nimport { Collection } from '../collection';\nimport type { CommandOperationOptions } from './command';\nimport { MongoServerError } from '../error';\nimport type { ClientSession } from '../sessions';\nimport type { Document } from 'bson';\n\n/** @public */\nexport interface RenameOptions extends CommandOperationOptions {\n  /** Drop the target name collection if it previously exists. */\n  dropTarget?: boolean;\n  /** Unclear */\n  new_collection?: boolean;\n}\n\n/** @internal */\nexport class RenameOperation extends RunAdminCommandOperation {\n  options: RenameOptions;\n  collection: Collection;\n  newName: string;\n\n  constructor(collection: Collection, newName: string, options: RenameOptions) {\n    // Check the collection name\n    checkCollectionName(newName);\n\n    // Build the command\n    const renameCollection = collection.namespace;\n    const toCollection = collection.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };\n\n    super(collection, cmd, options);\n    this.options = options;\n    this.collection = collection;\n    this.newName = newName;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Collection>): void {\n    const coll = this.collection;\n\n    super.execute(server, session, (err, doc) => {\n      if (err) return callback(err);\n      // We have an error\n      if (doc.errmsg) {\n        return callback(new MongoServerError(doc));\n      }\n\n      let newColl: Collection<Document>;\n      try {\n        newColl = new Collection(coll.s.db, this.newName, coll.s.options);\n      } catch (err) {\n        return callback(err);\n      }\n\n      return callback(undefined, newColl);\n    });\n  }\n}\n\ndefineAspects(RenameOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,aAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AAEA,MAAAG,YAAA,GAAAH,OAAA;AAEA,MAAAI,OAAA,GAAAJ,OAAA;AAYA;AACA,MAAaK,eAAgB,SAAQJ,aAAA,CAAAK,wBAAwB;EAK3DC,YAAYC,UAAsB,EAAEC,OAAe,EAAEC,OAAsB;IACzE;IACAX,OAAA,CAAAY,mBAAmB,CAACF,OAAO,CAAC;IAE5B;IACA,MAAMG,gBAAgB,GAAGJ,UAAU,CAACK,SAAS;IAC7C,MAAMC,YAAY,GAAGN,UAAU,CAACO,CAAC,CAACF,SAAS,CAACG,cAAc,CAACP,OAAO,CAAC,CAACQ,QAAQ,EAAE;IAC9E,MAAMC,UAAU,GAAG,OAAOR,OAAO,CAACQ,UAAU,KAAK,SAAS,GAAGR,OAAO,CAACQ,UAAU,GAAG,KAAK;IACvF,MAAMC,GAAG,GAAG;MAAEP,gBAAgB,EAAEA,gBAAgB;MAAEQ,EAAE,EAAEN,YAAY;MAAEI,UAAU,EAAEA;IAAU,CAAE;IAE5F,KAAK,CAACV,UAAU,EAAEW,GAAG,EAAET,OAAO,CAAC;IAC/B,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;EAEAY,OAAOA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAA8B;IAC5E,MAAMC,IAAI,GAAG,IAAI,CAACjB,UAAU;IAE5B,KAAK,CAACa,OAAO,CAACC,MAAM,EAAEC,OAAO,EAAE,CAACG,GAAG,EAAEC,GAAG,KAAI;MAC1C,IAAID,GAAG,EAAE,OAAOF,QAAQ,CAACE,GAAG,CAAC;MAC7B;MACA,IAAIC,GAAG,CAACC,MAAM,EAAE;QACd,OAAOJ,QAAQ,CAAC,IAAIpB,OAAA,CAAAyB,gBAAgB,CAACF,GAAG,CAAC,CAAC;;MAG5C,IAAIG,OAA6B;MACjC,IAAI;QACFA,OAAO,GAAG,IAAI3B,YAAA,CAAA4B,UAAU,CAACN,IAAI,CAACV,CAAC,CAACiB,EAAE,EAAE,IAAI,CAACvB,OAAO,EAAEgB,IAAI,CAACV,CAAC,CAACL,OAAO,CAAC;OAClE,CAAC,OAAOgB,GAAG,EAAE;QACZ,OAAOF,QAAQ,CAACE,GAAG,CAAC;;MAGtB,OAAOF,QAAQ,CAACS,SAAS,EAAEH,OAAO,CAAC;IACrC,CAAC,CAAC;EACJ;;AAxCFI,OAAA,CAAA7B,eAAA,GAAAA,eAAA;AA2CAH,WAAA,CAAAiC,aAAa,CAAC9B,eAAe,EAAE,CAACH,WAAA,CAAAkC,MAAM,CAACC,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}