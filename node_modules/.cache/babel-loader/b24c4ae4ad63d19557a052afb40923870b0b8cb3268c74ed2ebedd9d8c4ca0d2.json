{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\nconst sort_1 = require(\"../sort\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n  cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n  constructor(collection, query, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n    const sort = sort_1.formatSort(options.sort);\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    }\n    // force primary read preference\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.collection = collection;\n    this.query = query;\n  }\n  execute(server, session, callback) {\n    var _a;\n    const coll = this.collection;\n    const query = this.query;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions\n    };\n    // Create findAndModify command object\n    const cmd = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    };\n    // Have we specified collation\n    try {\n      utils_1.decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0;\n      if (unacknowledgedWrite || utils_1.maxWireVersion(server) < 8) {\n        callback(new error_1.MongoDriverError('The current topology does not support a hint on findAndModify commands'));\n        return;\n      }\n      cmd.hint = options.hint;\n    }\n    if (this.explain && utils_1.maxWireVersion(server) < 4) {\n      callback(new error_1.MongoDriverError(`server ${server.name} does not support explain on findAndModify`));\n      return;\n    }\n    // Execute the command\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) return callback(err);\n      return callback(undefined, result);\n    });\n  }\n}\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection, filter, options) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoDriverError('Filter parameter must be an object');\n    }\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoDriverError('Filter parameter must be an object');\n    }\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new error_1.MongoDriverError('Replacement parameter must be an object');\n    }\n    if (utils_1.hasAtomicOperators(replacement)) {\n      throw new error_1.MongoDriverError('Replacement document must not contain atomic operators');\n    }\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoDriverError('Filter parameter must be an object');\n    }\n    if (update == null || typeof update !== 'object') {\n      throw new error_1.MongoDriverError('Update parameter must be an object');\n    }\n    if (!utils_1.hasAtomicOperators(update)) {\n      throw new error_1.MongoDriverError('Update document requires atomic operators');\n    }\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\noperation_1.defineAspects(FindAndModifyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"names":["read_preference_1","require","utils_1","error_1","command_1","operation_1","sort_1","exports","ReturnDocument","Object","freeze","BEFORE","AFTER","configureFindAndModifyCmdBaseUpdateOpts","cmdBase","options","new","returnDocument","upsert","bypassDocumentValidation","FindAndModifyOperation","CommandOperation","constructor","collection","query","remove","sort","formatSort","projection","fields","maxTimeMS","writeConcern","let","readPreference","ReadPreference","primary","execute","server","session","callback","coll","bsonOptions","cmd","findAndModify","collectionName","decorateWithCollation","err","hint","unacknowledgedWrite","_a","w","maxWireVersion","MongoDriverError","explain","name","executeCommand","result","undefined","FindOneAndDeleteOperation","filter","FindOneAndReplaceOperation","replacement","hasAtomicOperators","update","FindOneAndUpdateOperation","arrayFilters","defineAspects","Aspect","WRITE_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["C:\\Users\\pranav kamat\\node_modules\\mongodb\\src\\operations\\find_and_modify.ts"],"sourcesContent":["import { ReadPreference } from '../read_preference';\nimport { maxWireVersion, decorateWithCollation, hasAtomicOperators, Callback } from '../utils';\nimport { MongoDriverError } from '../error';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { defineAspects, Aspect } from './operation';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Collection } from '../collection';\nimport { Sort, SortForCmd, formatSort } from '../sort';\nimport type { ClientSession } from '../sessions';\nimport type { WriteConcern, WriteConcernSettings } from '../write_concern';\n\n/** @public */\nexport const ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n} as const);\n\n/** @public */\nexport type ReturnDocument = typeof ReturnDocument[keyof typeof ReturnDocument];\n\n/** @public */\nexport interface FindOneAndDeleteOptions extends CommandOperationOptions {\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @public */\nexport interface FindOneAndReplaceOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n  returnDocument?: ReturnDocument;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Upsert the document if it does not exist. */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @public */\nexport interface FindOneAndUpdateOptions extends CommandOperationOptions {\n  /** Optional list of array filters referenced in filtered positional operators */\n  arrayFilters?: Document[];\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n  returnDocument?: ReturnDocument;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Upsert the document if it does not exist. */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @internal */\ninterface FindAndModifyCmdBase {\n  remove: boolean;\n  new: boolean;\n  upsert: boolean;\n  update?: Document;\n  sort?: SortForCmd;\n  fields?: Document;\n  bypassDocumentValidation?: boolean;\n  arrayFilters?: Document[];\n  maxTimeMS?: number;\n  let?: Document;\n  writeConcern?: WriteConcern | WriteConcernSettings;\n}\n\nfunction configureFindAndModifyCmdBaseUpdateOpts(\n  cmdBase: FindAndModifyCmdBase,\n  options: FindOneAndReplaceOptions | FindOneAndUpdateOptions\n): FindAndModifyCmdBase {\n  cmdBase.new = options.returnDocument === ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n\n/** @internal */\nclass FindAndModifyOperation extends CommandOperation<Document> {\n  options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions;\n  cmdBase: FindAndModifyCmdBase;\n  collection: Collection;\n  query: Document;\n  doc?: Document;\n\n  constructor(\n    collection: Collection,\n    query: Document,\n    options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions\n  ) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n\n    const sort = formatSort(options.sort);\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    }\n\n    // force primary read preference\n    this.readPreference = ReadPreference.primary;\n\n    this.collection = collection;\n    this.query = query;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Document>): void {\n    const coll = this.collection;\n    const query = this.query;\n    const options = { ...this.options, ...this.bsonOptions };\n\n    // Create findAndModify command object\n    const cmd: Document = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    };\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = this.writeConcern?.w === 0;\n      if (unacknowledgedWrite || maxWireVersion(server) < 8) {\n        callback(\n          new MongoDriverError(\n            'The current topology does not support a hint on findAndModify commands'\n          )\n        );\n\n        return;\n      }\n\n      cmd.hint = options.hint;\n    }\n\n    if (this.explain && maxWireVersion(server) < 4) {\n      callback(\n        new MongoDriverError(`server ${server.name} does not support explain on findAndModify`)\n      );\n      return;\n    }\n\n    // Execute the command\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) return callback(err);\n      return callback(undefined, result);\n    });\n  }\n}\n\n/** @internal */\nexport class FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection: Collection, filter: Document, options: FindOneAndDeleteOptions) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoDriverError('Filter parameter must be an object');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n}\n\n/** @internal */\nexport class FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: FindOneAndReplaceOptions\n  ) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoDriverError('Filter parameter must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new MongoDriverError('Replacement parameter must be an object');\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoDriverError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n}\n\n/** @internal */\nexport class FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    update: Document,\n    options: FindOneAndUpdateOptions\n  ) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoDriverError('Filter parameter must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new MongoDriverError('Update parameter must be an object');\n    }\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoDriverError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n}\n\ndefineAspects(FindAndModifyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}