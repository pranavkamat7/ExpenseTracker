{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommaAndColonSeparatedRecord = void 0;\nconst whatwg_url_1 = require(\"whatwg-url\");\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\nconst HOSTS_REGEX = new RegExp(String.raw`(?<protocol>mongodb(?:\\+srv|)):\\/\\/(?:(?<username>[^:]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^\\/?@]+)(?<rest>.*)`);\nclass CaseInsensitiveMap extends Map {\n  delete(name) {\n    return super.delete(this._normalizeKey(name));\n  }\n  get(name) {\n    return super.get(this._normalizeKey(name));\n  }\n  has(name) {\n    return super.has(this._normalizeKey(name));\n  }\n  set(name, value) {\n    return super.set(this._normalizeKey(name), value);\n  }\n  _normalizeKey(name) {\n    name = `${name}`;\n    for (const key of this.keys()) {\n      if (key.toLowerCase() === name.toLowerCase()) {\n        name = key;\n        break;\n      }\n    }\n    return name;\n  }\n}\nconst caseInsenstiveURLSearchParams = Ctor => class CaseInsenstiveURLSearchParams extends Ctor {\n  append(name, value) {\n    return super.append(this._normalizeKey(name), value);\n  }\n  delete(name) {\n    return super.delete(this._normalizeKey(name));\n  }\n  get(name) {\n    return super.get(this._normalizeKey(name));\n  }\n  getAll(name) {\n    return super.getAll(this._normalizeKey(name));\n  }\n  has(name) {\n    return super.has(this._normalizeKey(name));\n  }\n  set(name, value) {\n    return super.set(this._normalizeKey(name), value);\n  }\n  _normalizeKey(name) {\n    return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n  }\n};\nclass URLWithoutHost extends whatwg_url_1.URL {}\nclass MongoParseError extends Error {\n  get name() {\n    return 'MongoParseError';\n  }\n}\nclass ConnectionString extends URLWithoutHost {\n  constructor(uri) {\n    var _a;\n    const match = uri.match(HOSTS_REGEX);\n    if (!match) {\n      throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n    }\n    const {\n      protocol,\n      username,\n      password,\n      hosts,\n      rest\n    } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n    if (!protocol || !hosts) {\n      throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n    }\n    try {\n      decodeURIComponent(username !== null && username !== void 0 ? username : '');\n      decodeURIComponent(password !== null && password !== void 0 ? password : '');\n    } catch (err) {\n      throw new MongoParseError(err.message);\n    }\n    const illegalCharacters = new RegExp(String.raw`[:/?#\\[\\]@]`, 'gi');\n    if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n      throw new MongoParseError(`Username contains unescaped characters ${username}`);\n    }\n    if (!username || !password) {\n      const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n      if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n        throw new MongoParseError('URI contained empty userinfo section');\n      }\n    }\n    if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n      throw new MongoParseError('Password contains unescaped characters');\n    }\n    let authString = '';\n    if (typeof username === 'string') authString += username;\n    if (typeof password === 'string') authString += `:${password}`;\n    if (authString) authString += '@';\n    super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n    this._hosts = hosts.split(',');\n    if (this.isSRV && this.hosts.length !== 1) {\n      throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n    }\n    if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n      throw new MongoParseError('mongodb+srv URI cannot have port number');\n    }\n    if (!this.pathname) {\n      this.pathname = '/';\n    }\n    Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n  }\n  get host() {\n    return DUMMY_HOSTNAME;\n  }\n  set host(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n  get hostname() {\n    return DUMMY_HOSTNAME;\n  }\n  set hostname(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n  get port() {\n    return '';\n  }\n  set port(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n  get href() {\n    return this.toString();\n  }\n  set href(_ignored) {\n    throw new Error('Cannot set href for connection strings');\n  }\n  get isSRV() {\n    return this.protocol.includes('srv');\n  }\n  get hosts() {\n    return this._hosts;\n  }\n  set hosts(list) {\n    this._hosts = list;\n  }\n  toString() {\n    return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n  }\n  clone() {\n    return new ConnectionString(this.toString());\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    const {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    } = this;\n    return {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    };\n  }\n}\nexports.default = ConnectionString;\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n  constructor(from) {\n    super();\n    for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n      if (!entry) continue;\n      const colonIndex = entry.indexOf(':');\n      if (colonIndex === -1) {\n        this.set(entry, '');\n      } else {\n        this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n      }\n    }\n  }\n  toString() {\n    return [...this].map(entry => entry.join(':')).join(',');\n  }\n}\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;","map":{"version":3,"names":["whatwg_url_1","require","DUMMY_HOSTNAME","HOSTS_REGEX","RegExp","String","raw","CaseInsensitiveMap","Map","delete","name","_normalizeKey","get","has","set","value","key","keys","toLowerCase","caseInsenstiveURLSearchParams","Ctor","CaseInsenstiveURLSearchParams","append","getAll","prototype","call","URLWithoutHost","URL","MongoParseError","Error","ConnectionString","constructor","uri","match","protocol","username","password","hosts","rest","_a","groups","decodeURIComponent","err","message","illegalCharacters","uriWithoutProtocol","replace","startsWith","authString","_hosts","split","isSRV","length","some","host","includes","pathname","Object","setPrototypeOf","searchParams","_ignored","hostname","port","href","toString","list","join","clone","Symbol","for","origin","search","hash","exports","default","CommaAndColonSeparatedRecord","from","entry","colonIndex","indexOf","slice","map"],"sources":["../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}